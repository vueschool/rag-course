[
  {
    "content": "A **closure** is the combination of a function bundled together (enclosed) with references to its surrounding state (the **lexical environment**). In other words, a closure gives a function access to its outer scope. In JavaScript, closures are created every time a function is created, at function creation time.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 30,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "## Lexical scoping\n\nConsider the following example code:\n\n```js\nfunction init() {\n  var name = \"Mozilla\"; // name is a local variable created by init\n  function displayName() {\n    // displayName() is the inner function, that forms a closure\n    console.log(name); // use variable declared in the parent function\n  }\n  displayName();\n}\ninit();\n```\n\n`init()` creates a local variable called `name` and a function called `displayName()`. The `displayName()` function is an inner function that is defined inside `init()` and is available only within the body of the `init()` function. Note that the `displayName()` function has no local variables of its own. However, since inner functions have access to the variables of outer scopes, `displayName()` can access the variable `name` declared in the parent function, `init()`.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Lexical scoping",
      "chunkIndex": 1,
      "totalChunks": 30,
      "startLineNumber": 10,
      "endLineNumber": 26
    }
  },
  {
    "content": "If you run this code in your console, you can see that the `console.log()` statement within the `displayName()` function successfully displays the value of the `name` variable, which is declared in its parent function. This is an example of _lexical scoping_, which describes how a parser resolves variable names when functions are nested. The word _lexical_ refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Lexical scoping",
      "chunkIndex": 2,
      "totalChunks": 30,
      "startLineNumber": 28,
      "endLineNumber": 28
    }
  },
  {
    "content": "### Scoping with let and const\n\nTraditionally (before ES6), JavaScript variables only had two kinds of scopes: _function scope_ and _global scope_. Variables declared with `var` are either function-scoped or global-scoped, depending on whether they are declared within a function or outside a function. This can be tricky, because blocks with curly braces do not create scopes:\n\n```js\nif (Math.random() > 0.5) {\n  var x = 1;\n} else {\n  var x = 2;\n}\nconsole.log(x);\n```\n\nFor people from other languages (e.g., C, Java) where blocks create scopes, the above code should throw an error on the `console.log` line, because we are outside the scope of `x` in either block. However, because blocks don't create scopes for `var`, the `var` statements here actually create a global variable. There is also [a practical example](#creating_closures_in_loops_a_common_mistake) introduced below that illustrates how this can cause actual bugs when combined with closures.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoping with let and const",
      "chunkIndex": 3,
      "totalChunks": 30,
      "startLineNumber": 30,
      "endLineNumber": 43
    }
  },
  {
    "content": "In ES6, JavaScript introduced the `let` and `const` declarations, which, among other things like [temporal dead zones](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz), allow you to create block-scoped variables.\n\n```js\nif (Math.random() > 0.5) {\n  const x = 1;\n} else {\n  const x = 2;\n}\nconsole.log(x); // ReferenceError: x is not defined\n```\n\nIn essence, blocks are finally treated as scopes in ES6, but only if you declare variables with `let` or `const`. In addition, ES6 introduced [modules](/en-US/docs/Web/JavaScript/Guide/Modules), which introduced another kind of scope. Closures are able to capture variables in all these scopes, which we will introduce later.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoping with let and const",
      "chunkIndex": 4,
      "totalChunks": 30,
      "startLineNumber": 45,
      "endLineNumber": 56
    }
  },
  {
    "content": "## Closure\n\nConsider the following code example:\n\n```js\nfunction makeFunc() {\n  const name = \"Mozilla\";\n  function displayName() {\n    console.log(name);\n  }\n  return displayName;\n}\n\nconst myFunc = makeFunc();\nmyFunc();\n```\n\nRunning this code has exactly the same effect as the previous example of the `init()` function above. What's different (and interesting) is that the `displayName()` inner function is returned from the outer function _before being executed_.\n\nAt first glance, it might seem unintuitive that this code still works. In some programming languages, the local variables within a function exist for just the duration of that function's execution. Once `makeFunc()` finishes executing, you might expect that the `name` variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure",
      "chunkIndex": 5,
      "totalChunks": 30,
      "startLineNumber": 58,
      "endLineNumber": 77
    }
  },
  {
    "content": "The reason is that functions in JavaScript form closures. A _closure_ is the combination of a function and the lexical environment within which that function was declared. This environment consists of any variables that were in-scope at the time the closure was created. In this case, `myFunc` is a reference to the instance of the function `displayName` that is created when `makeFunc` is run. The instance of `displayName` maintains a reference to its lexical environment, within which the variable `name` exists. For this reason, when `myFunc` is invoked, the variable `name` remains available for use, and \"Mozilla\" is passed to `console.log`.\n\nHere's a slightly more interesting example—a `makeAdder` function:\n\n```js\nfunction makeAdder(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nconst add5 = makeAdder(5);\nconst add10 = makeAdder(10);\n\nconsole.log(add5(2)); // 7\nconsole.log(add10(2)); // 12\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure",
      "chunkIndex": 6,
      "totalChunks": 30,
      "startLineNumber": 79,
      "endLineNumber": 95
    }
  },
  {
    "content": "```js\nfunction makeAdder(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nconst add5 = makeAdder(5);\nconst add10 = makeAdder(10);\n\nconsole.log(add5(2)); // 7\nconsole.log(add10(2)); // 12\n```\n\nIn this example, we have defined a function `makeAdder(x)`, that takes a single argument `x`, and returns a new function. The function it returns takes a single argument `y`, and returns the sum of `x` and `y`.\n\nIn essence, `makeAdder` is a function factory. It creates functions that can add a specific value to their argument. In the above example, the function factory creates two new functions—one that adds five to its argument, and one that adds 10.\n\n`add5` and `add10` both form closures. They share the same function body definition, but store different lexical environments. In `add5`'s lexical environment, `x` is 5, while in the lexical environment for `add10`, `x` is 10.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure",
      "chunkIndex": 7,
      "totalChunks": 30,
      "startLineNumber": 83,
      "endLineNumber": 101
    }
  },
  {
    "content": "## Practical closures\n\nClosures are useful because they let you associate data (the lexical environment) with a function that operates on that data. This has obvious parallels to object-oriented programming, where objects allow you to associate data (the object's properties) with one or more methods.\n\nConsequently, you can use a closure anywhere that you might normally use an object with only a single method.\n\nSituations where you might want to do this are particularly common on the web. Much of the code written in front-end JavaScript is event-based. You define some behavior, and then attach it to an event that is triggered by the user (such as a click or a keypress). The code is attached as a callback (a single function that is executed in response to the event).",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Practical closures",
      "chunkIndex": 8,
      "totalChunks": 30,
      "startLineNumber": 103,
      "endLineNumber": 109
    }
  },
  {
    "content": "For instance, suppose we want to add buttons to a page to adjust the text size. One way of doing this is to specify the font-size of the `body` element (in pixels), and then set the size of the other elements on the page (such as headers) using the relative `em` unit:\n\n```css\nbody {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n```\n\nSuch interactive text size buttons can change the `font-size` property of the `body` element, and the adjustments are picked up by other elements on the page thanks to the relative units.\n\nHere's the JavaScript:\n\n```js\nfunction makeSizer(size) {\n  return () => {\n    document.body.style.fontSize = `${size}px`;\n  };\n}\n\nconst size12 = makeSizer(12);\nconst size14 = makeSizer(14);\nconst size16 = makeSizer(16);\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Practical closures",
      "chunkIndex": 9,
      "totalChunks": 30,
      "startLineNumber": 111,
      "endLineNumber": 142
    }
  },
  {
    "content": "const size12 = makeSizer(12);\nconst size14 = makeSizer(14);\nconst size16 = makeSizer(16);\n```\n\n`size12`, `size14`, and `size16` are now functions that resize the body text to 12, 14, and 16 pixels, respectively. You can attach them to buttons as demonstrated in the following code example.\n\n```js\ndocument.getElementById(\"size-12\").onclick = size12;\ndocument.getElementById(\"size-14\").onclick = size14;\ndocument.getElementById(\"size-16\").onclick = size16;\n```\n\n```html\n<button id=\"size-12\">12</button>\n<button id=\"size-14\">14</button>\n<button id=\"size-16\">16</button>\n<p>This is some text that will change size when you click the buttons above.</p>\n```\n\n{{EmbedLiveSample(\"practical closures\", \"\", \"200\")}}",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Practical closures",
      "chunkIndex": 10,
      "totalChunks": 30,
      "startLineNumber": 139,
      "endLineNumber": 159
    }
  },
  {
    "content": "## Emulating private methods with closures\n\nLanguages such as Java allow you to declare methods as private, meaning that they can be called only by other methods in the same class.\n\nJavaScript, prior to [classes](/en-US/docs/Web/JavaScript/Reference/Classes), didn't have a native way of declaring [private methods](/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements#private_methods), but it was possible to emulate private methods using closures. Private methods aren't just useful for restricting access to code. They also provide a powerful way of managing your global namespace.\n\nThe following code illustrates how to use closures to define public functions that can access private functions and variables. Note that these closures follow the [Module Design Pattern](https://www.google.com/search?q=javascript+module+pattern).\n\n```js\nconst counter = (function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Emulating private methods with closures",
      "chunkIndex": 11,
      "totalChunks": 30,
      "startLineNumber": 161,
      "endLineNumber": 174
    }
  },
  {
    "content": "```js\nconst counter = (function () {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // 0.\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // 2.\n\ncounter.decrement();\nconsole.log(counter.value()); // 1.\n```\n\nIn previous examples, each closure had its own lexical environment. Here though, there is a single lexical environment that is shared by the three functions: `counter.increment`, `counter.decrement`, and `counter.value`.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Emulating private methods with closures",
      "chunkIndex": 12,
      "totalChunks": 30,
      "startLineNumber": 169,
      "endLineNumber": 201
    }
  },
  {
    "content": "The shared lexical environment is created in the body of an anonymous function, _which is executed as soon as it has been defined_ (also known as an [IIFE](/en-US/docs/Glossary/IIFE)). The lexical environment contains two private items: a variable called `privateCounter`, and a function called `changeBy`. You can't access either of these private members from outside the anonymous function. Instead, you indirectly access them using the three public functions that are returned from the anonymous wrapper.\n\nThose three public functions form closures that share the same lexical environment. Thanks to JavaScript's lexical scoping, they each have access to the `privateCounter` variable and the `changeBy` function.\n\n```js\nfunction makeCounter() {\n  let privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment() {\n      changeBy(1);\n    },\n\n    decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n}",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Emulating private methods with closures",
      "chunkIndex": 13,
      "totalChunks": 30,
      "startLineNumber": 203,
      "endLineNumber": 226
    }
  },
  {
    "content": "decrement() {\n      changeBy(-1);\n    },\n\n    value() {\n      return privateCounter;\n    },\n  };\n}\n\nconst counter1 = makeCounter();\nconst counter2 = makeCounter();\n\nconsole.log(counter1.value()); // 0.\n\ncounter1.increment();\ncounter1.increment();\nconsole.log(counter1.value()); // 2.\n\ncounter1.decrement();\nconsole.log(counter1.value()); // 1.\nconsole.log(counter2.value()); // 0.\n```\n\nNotice how the two counters maintain their independence from one another. Each closure references a different version of the `privateCounter` variable through its own closure. Each time one of the counters is called, its lexical environment changes by changing the value of this variable. Changes to the variable value in one closure don't affect the value in the other closure.\n\n> [!NOTE]\n> Using closures in this way provides benefits that are normally associated with object-oriented programming. In particular, _data hiding_ and _encapsulation_.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Emulating private methods with closures",
      "chunkIndex": 14,
      "totalChunks": 30,
      "startLineNumber": 218,
      "endLineNumber": 245
    }
  },
  {
    "content": "## Closure scope chain\n\nA nested function's access to the outer function's scope includes the enclosing scope of the outer function—effectively creating a chain of function scopes. To demonstrate, consider the following example code.\n\n```js\n// global scope\nconst e = 10;\nfunction sum(a) {\n  return function (b) {\n    return function (c) {\n      // outer functions scope\n      return function (d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconsole.log(sum(1)(2)(3)(4)); // 20\n```\n\nYou can also write without anonymous functions:\n\n```js\n// global scope\nconst e = 10;\nfunction sum(a) {\n  return function sum2(b) {\n    return function sum3(c) {\n      // outer functions scope\n      return function sum4(d) {\n        // local scope\n        return a + b + c + d + e;\n      };\n    };\n  };\n}\n\nconst sum2 = sum(1);\nconst sum3 = sum2(2);\nconst sum4 = sum3(3);\nconst result = sum4(4);\nconsole.log(result); // 20\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure scope chain",
      "chunkIndex": 15,
      "totalChunks": 30,
      "startLineNumber": 247,
      "endLineNumber": 291
    }
  },
  {
    "content": "const sum2 = sum(1);\nconst sum3 = sum2(2);\nconst sum4 = sum3(3);\nconst result = sum4(4);\nconsole.log(result); // 20\n```\n\nIn the example above, there's a series of nested functions, all of which have access to the outer functions' scope. In this context, we can say that closures have access to _all_ outer scopes.\n\nClosures can capture variables in block scopes and module scopes as well. For example, the following creates a closure over the block-scoped variable `y`:\n\n```js\nfunction outer() {\n  let getY;\n  {\n    const y = 6;\n    getY = () => y;\n  }\n  console.log(typeof y); // undefined\n  console.log(getY()); // 6\n}\n\nouter();\n```\n\nClosures over modules can be more interesting.\n\n```js\n// myModule.js\nlet x = 5;\nexport const getX = () => x;\nexport const setX = (val) => {\n  x = val;\n};\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure scope chain",
      "chunkIndex": 16,
      "totalChunks": 30,
      "startLineNumber": 286,
      "endLineNumber": 320
    }
  },
  {
    "content": "outer();\n```\n\nClosures over modules can be more interesting.\n\n```js\n// myModule.js\nlet x = 5;\nexport const getX = () => x;\nexport const setX = (val) => {\n  x = val;\n};\n```\n\nHere, the module exports a pair of getter-setter functions, which close over the module-scoped variable `x`. Even when `x` is not directly accessible from other modules, it can be read and written with the functions.\n\n```js\nimport { getX, setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 5\nsetX(6);\nconsole.log(getX()); // 6\n```\n\nClosures can close over imported values as well, which are regarded as _live {{Glossary(\"binding\", \"bindings\")}}_, because when the original value changes, the imported one changes accordingly.\n\n```js\n// myModule.js\nexport let x = 1;\nexport const setX = (val) => {\n  x = val;\n};\n```\n\n```js\n// closureCreator.js\nimport { x } from \"./myModule.js\";\n\nexport const getX = () => x; // Close over an imported live binding\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure scope chain",
      "chunkIndex": 17,
      "totalChunks": 30,
      "startLineNumber": 308,
      "endLineNumber": 347
    }
  },
  {
    "content": "```js\n// closureCreator.js\nimport { x } from \"./myModule.js\";\n\nexport const getX = () => x; // Close over an imported live binding\n```\n\n```js\nimport { getX } from \"./closureCreator.js\";\nimport { setX } from \"./myModule.js\";\n\nconsole.log(getX()); // 1\nsetX(2);\nconsole.log(getX()); // 2\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closure scope chain",
      "chunkIndex": 18,
      "totalChunks": 30,
      "startLineNumber": 342,
      "endLineNumber": 356
    }
  },
  {
    "content": "## Creating closures in loops: A common mistake\n\nPrior to the introduction of the [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) keyword, a common problem with closures occurred when you created them inside a loop. To demonstrate, consider the following example code.\n\n```html live-sample___closures_bad\n<p id=\"help\">Helpful notes will appear here</p>\n<p>Email: <input type=\"text\" id=\"email\" name=\"email\" /></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\" /></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\" /></p>\n```\n\n```js example-bad live-sample___closures_bad\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 19,
      "totalChunks": 30,
      "startLineNumber": 358,
      "endLineNumber": 379
    }
  },
  {
    "content": "function setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    // Culprit is the use of `var` on this line\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = function () {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n\n{{EmbedLiveSample(\"closures_bad\", \"\", \"200\")}}\n\nThe `helpText` array defines three helpful hints, each associated with the ID of an input field in the document. The loop cycles through these definitions, hooking up an `onfocus` event to each one that shows the associated help method.\n\nIf you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 20,
      "totalChunks": 30,
      "startLineNumber": 374,
      "endLineNumber": 397
    }
  },
  {
    "content": "If you try this code out, you'll see that it doesn't work as expected. No matter what field you focus on, the message about your age will be displayed.\n\nThe reason for this is that the functions assigned to `onfocus` form closures; they consist of the function definition and the captured environment from the `setupHelp` function's scope. Three closures have been created by the loop, but each one shares the same single lexical environment, which has a variable with changing values (`item`). This is because the variable `item` is declared with `var` and thus has function scope due to hoisting. The value of `item.help` is determined when the `onfocus` callbacks are executed. Because the loop has already run its course by that time, the `item` variable object (shared by all three closures) has been left pointing to the last entry in the `helpText` list.\n\nOne solution in this case is to use more closures: in particular, to use a function factory as described earlier:",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 21,
      "totalChunks": 30,
      "startLineNumber": 397,
      "endLineNumber": 401
    }
  },
  {
    "content": "One solution in this case is to use more closures: in particular, to use a function factory as described earlier:\n\n```html hidden live-sample___closures_factory\n<p id=\"help\">Helpful notes will appear here</p>\n<p>Email: <input type=\"text\" id=\"email\" name=\"email\" /></p>\n<p>Name: <input type=\"text\" id=\"name\" name=\"name\" /></p>\n<p>Age: <input type=\"text\" id=\"age\" name=\"age\" /></p>\n```\n\n```js live-sample___closures_factory\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction makeHelpCallback(help) {\n  return function () {\n    showHelp(help);\n  };\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n\nsetupHelp();\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 22,
      "totalChunks": 30,
      "startLineNumber": 401,
      "endLineNumber": 435
    }
  },
  {
    "content": "for (var i = 0; i < helpText.length; i++) {\n    var item = helpText[i];\n    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n\nsetupHelp();\n```\n\n{{EmbedLiveSample(\"closures_factory\", \"\", \"200\")}}\n\nThis works as expected. Rather than the callbacks all sharing a single lexical environment, the `makeHelpCallback` function creates _a new lexical environment_ for each callback, in which `help` refers to the corresponding string from the `helpText` array.\n\nOne other way to write the above using anonymous closures is:\n\n```js\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 23,
      "totalChunks": 30,
      "startLineNumber": 428,
      "endLineNumber": 453
    }
  },
  {
    "content": "function setupHelp() {\n  var helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (var i = 0; i < helpText.length; i++) {\n    (function () {\n      var item = helpText[i];\n      document.getElementById(item.id).onfocus = function () {\n        showHelp(item.help);\n      };\n    })(); // Immediate event listener attachment with the current value of item (preserved until iteration).\n  }\n}\n\nsetupHelp();\n```\n\nIf you don't want to use more closures, you can use the [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const) keyword:\n\n```js\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 24,
      "totalChunks": 30,
      "startLineNumber": 448,
      "endLineNumber": 473
    }
  },
  {
    "content": "```js\nfunction showHelp(help) {\n  document.getElementById(\"help\").textContent = help;\n}\n\nfunction setupHelp() {\n  const helpText = [\n    { id: \"email\", help: \"Your email address\" },\n    { id: \"name\", help: \"Your full name\" },\n    { id: \"age\", help: \"Your age (you must be over 16)\" },\n  ];\n\n  for (let i = 0; i < helpText.length; i++) {\n    const item = helpText[i];\n    document.getElementById(item.id).onfocus = () => {\n      showHelp(item.help);\n    };\n  }\n}\n\nsetupHelp();\n```\n\nThis example uses `const` instead of `var`, so every closure binds the block-scoped variable, meaning that no additional closures are required.\n\nIf you are writing modern JavaScript anyway, you can consider more alternatives to the plain `for` loop, such as using {{jsxref(\"Statements/for...of\", \"for...of\")}} loop and declaring `item` as `let` or `const`, or using the {{jsxref(\"Array/forEach\", \"forEach()\")}} method, which both avoid the closure problem.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 25,
      "totalChunks": 30,
      "startLineNumber": 470,
      "endLineNumber": 495
    }
  },
  {
    "content": "```js\nfor (const item of helpText) {\n  document.getElementById(item.id).onfocus = () => {\n    document.getElementById(\"help\").textContent = item.help;\n  };\n}\n\nhelpText.forEach((item) => {\n  document.getElementById(item.id).onfocus = () => {\n    showHelp(item.help);\n  };\n});\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating closures in loops: A common mistake",
      "chunkIndex": 26,
      "totalChunks": 30,
      "startLineNumber": 497,
      "endLineNumber": 509
    }
  },
  {
    "content": "## Performance considerations\n\nAs mentioned previously, each function instance manages its own scope and closure. Therefore, it is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.\n\nFor instance, when creating a new object/class, methods should normally be associated to the object's prototype rather than defined into the object constructor. The reason is that whenever the constructor is called, the methods would get reassigned (that is, for every object creation).\n\nConsider the following case:\n\n```js\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function () {\n    return this.name;\n  };\n\n  this.getMessage = function () {\n    return this.message;\n  };\n}\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance considerations",
      "chunkIndex": 27,
      "totalChunks": 30,
      "startLineNumber": 511,
      "endLineNumber": 531
    }
  },
  {
    "content": "this.getMessage = function () {\n    return this.message;\n  };\n}\n```\n\nBecause the previous code does not take advantage of the benefits of using closures in this particular instance, we could instead rewrite it to avoid using closures as follows:\n\n```js\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype = {\n  getName() {\n    return this.name;\n  },\n  getMessage() {\n    return this.message;\n  },\n};\n```\n\nHowever, redefining the prototype is not recommended. The following example instead appends to the existing prototype:\n\n```js\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function () {\n  return this.name;\n};\nMyObject.prototype.getMessage = function () {\n  return this.message;\n};\n```",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance considerations",
      "chunkIndex": 28,
      "totalChunks": 30,
      "startLineNumber": 527,
      "endLineNumber": 563
    }
  },
  {
    "content": "In the two previous examples, the inherited prototype can be shared by all objects and the method definitions need not occur at every object creation. See [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) for more.",
    "metadata": {
      "source": "closures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Closures",
      "documentTitle": "Closures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance considerations",
      "chunkIndex": 29,
      "totalChunks": 30,
      "startLineNumber": 565,
      "endLineNumber": 565
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Grammar_and_types\", \"Web/JavaScript/Guide/Loops_and_iteration\")}}\n\nJavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\n\nThe [JavaScript reference](/en-US/docs/Web/JavaScript/Reference/Statements)\ncontains exhaustive details about the statements in this chapter. The semicolon\n(`;`) character is used to separate statements in JavaScript code.\n\nAny JavaScript expression is also a statement.\nSee [Expressions and operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)\nfor complete information about expressions.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 26,
      "startLineNumber": 8,
      "endLineNumber": 20
    }
  },
  {
    "content": "## Block statement\n\nThe most basic statement is a _block statement_, which is used to group\nstatements. The block is delimited by a pair of curly braces:\n\n```js\n{\n  statement1;\n  statement2;\n  // …\n  statementN;\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Block statement",
      "chunkIndex": 1,
      "totalChunks": 26,
      "startLineNumber": 22,
      "endLineNumber": 34
    }
  },
  {
    "content": "### Example\n\nBlock statements are commonly used with control flow statements (`if`,\n`for`, `while`).\n\n```js\nwhile (x < 10) {\n  x++;\n}\n```\n\nHere, `{ x++; }` is the block statement.\n\n> [!NOTE]\n> [`var`](/en-US/docs/Web/JavaScript/Reference/Statements/var)-declared variables are not block-scoped, but are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. For example:\n>\n> ```js\n> var x = 1;\n> {\n>   var x = 2;\n> }\n> console.log(x); // 2\n> ```\n>\n> This outputs `2` because the `var x` statement within the block is in the same scope as the `var x` statement before the block. (In C or Java, the equivalent code would have output `1`.)\n>\n> This scoping effect can be mitigated by using {{jsxref(\"Statements/let\", \"let\")}} or {{jsxref(\"Statements/const\", \"const\")}}.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 2,
      "totalChunks": 26,
      "startLineNumber": 36,
      "endLineNumber": 62
    }
  },
  {
    "content": "## Conditional statements\n\nA conditional statement is a set of commands that executes if a specified condition is\ntrue. JavaScript supports two conditional statements: `if...else` and\n`switch`.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conditional statements",
      "chunkIndex": 3,
      "totalChunks": 26,
      "startLineNumber": 64,
      "endLineNumber": 68
    }
  },
  {
    "content": "### if...else statement\n\nUse the `if` statement to execute a statement if a logical condition is\n`true`. Use the optional `else` clause to execute a statement if\nthe condition is `false`.\n\nAn `if` statement looks like this:\n\n```js\nif (condition) {\n  statement1;\n} else {\n  statement2;\n}\n```\n\nHere, the `condition` can be any expression that evaluates to\n`true` or `false`. (See [Boolean](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#description)\nfor an explanation of what evaluates to `true` and `false`.)\n\nIf `condition` evaluates to `true`,\n`statement1` is executed. Otherwise,\n`statement2` is executed. `statement1` and\n`statement2` can be any statement, including further nested\n`if` statements.\n\nYou can also compound the statements using `else if` to have multiple\nconditions tested in sequence, as follows:\n\n```js\nif (condition1) {\n  statement1;\n} else if (condition2) {\n  statement2;\n} else if (conditionN) {\n  statementN;\n} else {\n  statementLast;\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "if...else statement",
      "chunkIndex": 4,
      "totalChunks": 26,
      "startLineNumber": 70,
      "endLineNumber": 109
    }
  },
  {
    "content": "```js\nif (condition1) {\n  statement1;\n} else if (condition2) {\n  statement2;\n} else if (conditionN) {\n  statementN;\n} else {\n  statementLast;\n}\n```\n\nIn the case of multiple conditions, only the first logical condition which evaluates to\n`true` will be executed. To execute multiple statements, group them within a\nblock statement (`{ /* … */ }`).",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "if...else statement",
      "chunkIndex": 5,
      "totalChunks": 26,
      "startLineNumber": 99,
      "endLineNumber": 113
    }
  },
  {
    "content": "#### Best practice\n\nIn general, it's good practice to always use block statements—_especially_ when\nnesting `if` statements:\n\n```js\nif (condition) {\n  // Statements for when condition is true\n  // …\n} else {\n  // Statements for when condition is false\n  // …\n}\n```\n\nIn general it's good practice to not have an `if...else` with an assignment like `x = y` as a condition:\n\n```js-nolint example-bad\nif (x = y) {\n  // statements here\n}\n```\n\nHowever, in the rare case you find yourself wanting to do something like that, the [`while`](/en-US/docs/Web/JavaScript/Reference/Statements/while) documentation has a [Using an assignment as a condition](/en-US/docs/Web/JavaScript/Reference/Statements/while#using_an_assignment_as_a_condition) section with guidance on a general best-practice syntax you should know about and follow.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Best practice",
      "chunkIndex": 6,
      "totalChunks": 26,
      "startLineNumber": 115,
      "endLineNumber": 138
    }
  },
  {
    "content": "#### Falsy values\n\nThe following values evaluate to `false` (also known as [Falsy](/en-US/docs/Glossary/Falsy) values):\n\n- `false`\n- `undefined`\n- `null`\n- `0`\n- `NaN`\n- the empty string (`\"\"`)\n\nAll other values—including all objects—evaluate to `true` when passed to a\nconditional statement.\n\n> [!NOTE]\n> Do not confuse the primitive boolean values\n> `true` and `false` with the true and false values of the\n> {{jsxref(\"Boolean\")}} object!\n>\n> For example:\n>\n> ```js\n> const b = new Boolean(false);\n> if (b) {\n>   // this condition evaluates to true\n> }\n> if (b == true) {\n>   // this condition evaluates to false\n> }\n> ```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Falsy values",
      "chunkIndex": 7,
      "totalChunks": 26,
      "startLineNumber": 140,
      "endLineNumber": 169
    }
  },
  {
    "content": "#### Example\n\nIn the following example, the function `checkData` returns `true`\nif the number of characters in a `Text` object is three. Otherwise, it\ndisplays an alert and returns `false`.\n\n```js\nfunction checkData() {\n  if (document.form1.threeChar.value.length === 3) {\n    return true;\n  }\n  alert(\n    `Enter exactly three characters. ${document.form1.threeChar.value} is not valid.`,\n  );\n  return false;\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 8,
      "totalChunks": 26,
      "startLineNumber": 171,
      "endLineNumber": 187
    }
  },
  {
    "content": "### switch statement\n\nA `switch` statement allows a program to evaluate an expression and attempt\nto match the expression's value to a `case` label. If a match is found, the\nprogram executes the associated statement.\n\nA `switch` statement looks like this:\n\n```js\nswitch (expression) {\n  case label1:\n    statements1;\n    break;\n  case label2:\n    statements2;\n    break;\n  // …\n  default:\n    statementsDefault;\n}\n```\n\nJavaScript evaluates the above switch statement as follows:",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "switch statement",
      "chunkIndex": 9,
      "totalChunks": 26,
      "startLineNumber": 189,
      "endLineNumber": 211
    }
  },
  {
    "content": "JavaScript evaluates the above switch statement as follows:\n\n- The program first looks for a `case` clause with a label matching the\n  value of expression and then transfers control to that clause, executing the\n  associated statements.\n- If no matching label is found, the program looks for the optional\n  `default` clause:\n  - If a `default` clause is found, the program transfers control to that\n    clause, executing the associated statements.\n  - If no `default` clause is found, the program resumes execution at the\n    statement following the end of `switch`.\n  - (By convention, the `default` clause is written as the last clause,\n    but it does not need to be so.)",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "switch statement",
      "chunkIndex": 10,
      "totalChunks": 26,
      "startLineNumber": 211,
      "endLineNumber": 223
    }
  },
  {
    "content": "#### break statements\n\nThe optional `break` statement associated with each `case` clause\nensures that the program breaks out of `switch` once the matched statement is\nexecuted, and then continues execution at the statement following `switch`.\nIf `break` is omitted, the program continues execution inside the\n`switch` statement (and will execute statements under the next `case`, and so on).",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "break statements",
      "chunkIndex": 11,
      "totalChunks": 26,
      "startLineNumber": 225,
      "endLineNumber": 231
    }
  },
  {
    "content": "##### Example\n\nIn the following example, if `fruitType` evaluates to\n`\"Bananas\"`, the program matches the value with `case \"Bananas\"`\nand executes the associated statement. When `break` is encountered, the\nprogram exits the `switch` and continues execution from the statement\nfollowing `switch`. If `break` were omitted, the statement for\n`case \"Cherries\"` would also be executed.\n\n```js\nswitch (fruitType) {\n  case \"Oranges\":\n    console.log(\"Oranges are $0.59 a pound.\");\n    break;\n  case \"Apples\":\n    console.log(\"Apples are $0.32 a pound.\");\n    break;\n  case \"Bananas\":\n    console.log(\"Bananas are $0.48 a pound.\");\n    break;\n  case \"Cherries\":\n    console.log(\"Cherries are $3.00 a pound.\");\n    break;\n  case \"Mangoes\":\n    console.log(\"Mangoes are $0.56 a pound.\");\n    break;\n  case \"Papayas\":\n    console.log(\"Papayas are $2.79 a pound.\");\n    break;\n  default:\n    console.log(`Sorry, we are out of ${fruitType}.`);\n}\nconsole.log(\"Is there anything else you'd like?\");\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 12,
      "totalChunks": 26,
      "startLineNumber": 233,
      "endLineNumber": 266
    }
  },
  {
    "content": "## Exception handling statements\n\nYou can throw exceptions using the `throw` statement and handle them using\nthe `try...catch` statements.\n\n- [`throw` statement](#throw_statement)\n- [`try...catch` statement](#try...catch_statement)\n\n### Exception types\n\nJust about any object can be thrown in JavaScript. Nevertheless, not all thrown objects\nare created equal. While it is common to throw numbers or strings as errors, it is\nfrequently more effective to use one of the exception types specifically created for\nthis purpose:\n\n- [ECMAScript exceptions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types)\n- [`DOMException`](/en-US/docs/Web/API/DOMException)",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Exception handling statements",
      "chunkIndex": 13,
      "totalChunks": 26,
      "startLineNumber": 268,
      "endLineNumber": 284
    }
  },
  {
    "content": "### throw statement\n\nUse the `throw` statement to throw an exception. A `throw`\nstatement specifies the value to be thrown:\n\n```js\nthrow expression;\n```\n\nYou may throw any expression, not just expressions of a specific type. The following\ncode throws several exceptions of varying types:\n\n```js\nthrow \"Error2\"; // String type\nthrow 42; // Number type\nthrow true; // Boolean type\nthrow {\n  toString() {\n    return \"I'm an object!\";\n  },\n};\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "throw statement",
      "chunkIndex": 14,
      "totalChunks": 26,
      "startLineNumber": 286,
      "endLineNumber": 307
    }
  },
  {
    "content": "### try...catch statement\n\nThe `try...catch` statement marks a block of statements to try, and\nspecifies one or more responses should an exception be thrown. If an exception is\nthrown, the `try...catch` statement catches it.\n\nThe `try...catch` statement consists of a `try` block, which\ncontains one or more statements, and a `catch` block, containing statements\nthat specify what to do if an exception is thrown in the `try` block.\n\nIn other words, you want the `try` block to succeed—but if it does not, you\nwant control to pass to the `catch` block. If any statement within the\n`try` block (or in a function called from within the `try` block)\nthrows an exception, control _immediately_ shifts to the `catch`\nblock. If no exception is thrown in the `try` block, the `catch`\nblock is skipped. The `finally` block executes after the `try` and\n`catch` blocks execute but before the statements following the\n`try...catch` statement.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "try...catch statement",
      "chunkIndex": 15,
      "totalChunks": 26,
      "startLineNumber": 309,
      "endLineNumber": 326
    }
  },
  {
    "content": "The following example uses a `try...catch` statement. The example calls a\nfunction that retrieves a month name from an array based on the value passed to the\nfunction. If the value does not correspond to a month number\n(`1` – `12`), an exception is thrown with the value\n`'InvalidMonthNo'` and the statements in the `catch` block set the\n`monthName` variable to `'unknown'`.\n\n```js\nfunction getMonthName(mo) {\n  mo--; // Adjust month number for array index (so that 0 = Jan, 11 = Dec)\n  // prettier-ignore\n  const months = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n  ];\n  if (!months[mo]) {\n    throw new Error(\"Invalid month code\"); // throw keyword is used here\n  }\n  return months[mo];\n}\n\ntry {\n  // statements to try\n  monthName = getMonthName(myMonth); // function could throw exception\n} catch (e) {\n  monthName = \"unknown\";\n  logMyErrors(e); // pass exception object to error handler (i.e. your own function)\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "try...catch statement",
      "chunkIndex": 16,
      "totalChunks": 26,
      "startLineNumber": 328,
      "endLineNumber": 356
    }
  },
  {
    "content": "#### The catch block\n\nYou can use a `catch` block to handle all exceptions that may be generated\nin the `try` block.\n\n```js-nolint\ncatch (exception) {\n  statements\n}\n```\n\nThe `catch` block specifies an identifier (`exception`\nin the preceding syntax) that holds the value specified by the `throw`\nstatement. You can use this identifier to get information about the exception that was\nthrown.\n\nJavaScript creates this identifier when the `catch` block is entered. The\nidentifier lasts only for the duration of the `catch` block. Once the\n`catch` block finishes executing, the identifier no longer exists.\n\nFor example, the following code throws an exception. When the exception occurs, control\ntransfers to the `catch` block.\n\n```js\ntry {\n  throw \"myException\"; // generates an exception\n} catch (err) {\n  // statements to handle any exceptions\n  logMyErrors(err); // pass exception object to error handler\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The catch block",
      "chunkIndex": 17,
      "totalChunks": 26,
      "startLineNumber": 358,
      "endLineNumber": 388
    }
  },
  {
    "content": "```js\ntry {\n  throw \"myException\"; // generates an exception\n} catch (err) {\n  // statements to handle any exceptions\n  logMyErrors(err); // pass exception object to error handler\n}\n```\n\n> [!NOTE]\n> When logging errors to the console inside\n> a `catch` block, using `console.error()` rather than\n> `console.log()` is advised for debugging. It formats the message as an\n> error, and adds it to the list of error messages generated by the page.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The catch block",
      "chunkIndex": 18,
      "totalChunks": 26,
      "startLineNumber": 381,
      "endLineNumber": 394
    }
  },
  {
    "content": "#### The finally block\n\nThe `finally` block contains statements to be executed _after_ the\n`try` and `catch` blocks execute. Additionally, the\n`finally` block executes _before_ the code that follows the\n`try...catch...finally` statement.\n\nIt is also important to note that the `finally` block will execute\n_whether or not_ an exception is thrown. If an exception is thrown, however, the\nstatements in the `finally` block execute even if no `catch` block\nhandles the exception that was thrown.\n\nYou can use the `finally` block to make your script fail gracefully when an\nexception occurs. For example, you may need to release a resource that your script has\ntied up.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The finally block",
      "chunkIndex": 19,
      "totalChunks": 26,
      "startLineNumber": 396,
      "endLineNumber": 410
    }
  },
  {
    "content": "You can use the `finally` block to make your script fail gracefully when an\nexception occurs. For example, you may need to release a resource that your script has\ntied up.\n\nThe following example opens a file and then executes statements that use the file.\n(Server-side JavaScript allows you to access files.) If an exception is thrown while the\nfile is open, the `finally` block closes the file before the script fails.\nUsing `finally` here _ensures_ that the file is never left open, even\nif an error occurs.\n\n```js\nopenMyFile();\ntry {\n  writeMyFile(theData); // This may throw an error\n} catch (e) {\n  handleError(e); // If an error occurred, handle it\n} finally {\n  closeMyFile(); // Always close the resource\n}\n```\n\nIf the `finally` block returns a value, this value becomes the return value\nof the entire `try...catch...finally` production, regardless of any\n`return` statements in the `try` and `catch` blocks:",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The finally block",
      "chunkIndex": 20,
      "totalChunks": 26,
      "startLineNumber": 408,
      "endLineNumber": 431
    }
  },
  {
    "content": "If the `finally` block returns a value, this value becomes the return value\nof the entire `try...catch...finally` production, regardless of any\n`return` statements in the `try` and `catch` blocks:\n\n```js\nfunction f() {\n  try {\n    console.log(0);\n    throw \"bogus\";\n  } catch (e) {\n    console.log(1);\n    // This return statement is suspended\n    // until finally block has completed\n    return true;\n    console.log(2); // not reachable\n  } finally {\n    console.log(3);\n    return false; // overwrites the previous \"return\"\n    // `f` exits here\n    console.log(4); // not reachable\n  }\n  console.log(5); // not reachable\n}\nconsole.log(f()); // 0, 1, 3, false\n```\n\nOverwriting of return values by the `finally` block also applies to\nexceptions thrown or re-thrown inside of the `catch` block:",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The finally block",
      "chunkIndex": 21,
      "totalChunks": 26,
      "startLineNumber": 429,
      "endLineNumber": 456
    }
  },
  {
    "content": "Overwriting of return values by the `finally` block also applies to\nexceptions thrown or re-thrown inside of the `catch` block:\n\n```js\nfunction f() {\n  try {\n    throw \"bogus\";\n  } catch (e) {\n    console.log('caught inner \"bogus\"');\n    // This throw statement is suspended until\n    // finally block has completed\n    throw e;\n  } finally {\n    return false; // overwrites the previous \"throw\"\n    // `f` exits here\n  }\n}\n\ntry {\n  console.log(f());\n} catch (e) {\n  // this is never reached!\n  // while f() executes, the `finally` block returns false,\n  // which overwrites the `throw` inside the above `catch`\n  console.log('caught outer \"bogus\"');\n}\n\n// Logs:\n// caught inner \"bogus\"\n// false\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The finally block",
      "chunkIndex": 22,
      "totalChunks": 26,
      "startLineNumber": 455,
      "endLineNumber": 485
    }
  },
  {
    "content": "#### Nesting try...catch statements\n\nYou can nest one or more `try...catch` statements.\n\nIf an inner `try` block does _not_ have a corresponding\n`catch` block:\n\n1. it _must_ contain a `finally` block, and\n2. the enclosing `try...catch` statement's `catch` block is\n   checked for a match.\n\nFor more information, see [nested try-blocks](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#nested_try_blocks)\non the [`try...catch`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch)\nreference page.",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Nesting try...catch statements",
      "chunkIndex": 23,
      "totalChunks": 26,
      "startLineNumber": 487,
      "endLineNumber": 500
    }
  },
  {
    "content": "### Utilizing Error objects\n\nDepending on the type of error, you may be able to use the `name` and\n`message` properties to get a more refined message.\n\nThe `name` property provides the general class of `Error` (such\nas `DOMException` or `Error`), while `message`\ngenerally provides a more succinct message than one would get by converting the error\nobject to a string.\n\nIf you are throwing your own exceptions, in order to take advantage of these properties\n(such as if your `catch` block doesn't discriminate between your own\nexceptions and system ones), you can use the `Error` constructor.\n\nFor example:\n\n```js\nfunction doSomethingErrorProne() {\n  if (ourCodeMakesAMistake()) {\n    throw new Error(\"The message\");\n  }\n  doSomethingToGetAJavaScriptError();\n}\n\ntry {\n  doSomethingErrorProne();\n} catch (e) {\n  // Now, we actually use `console.error()`\n  console.error(e.name); // 'Error'\n  console.error(e.message); // 'The message', or a JavaScript error message\n}\n```",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Utilizing Error objects",
      "chunkIndex": 24,
      "totalChunks": 26,
      "startLineNumber": 502,
      "endLineNumber": 533
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Grammar_and_types\", \"Web/JavaScript/Guide/Loops_and_iteration\")}}",
    "metadata": {
      "source": "control_flow_and_error_handling/index.md",
      "documentSlug": "Web/JavaScript/Guide/Control_flow_and_error_handling",
      "documentTitle": "Control flow and error handling",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 25,
      "totalChunks": 26,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.\n\nThe [language overview](/en-US/docs/Web/JavaScript/Guide/Language_overview) offers a similar summary of the common data types, but with more comparisons to other languages.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 49,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Dynamic and weak typing\n\nJavaScript is a [dynamic](https://en.wikipedia.org/wiki/Dynamic_programming_language) language with [dynamic types](https://en.wikipedia.org/wiki/Type_system#DYNAMIC). Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:\n\n```js\nlet foo = 42; // foo is now a number\nfoo = \"bar\"; // foo is now a string\nfoo = true; // foo is now a boolean\n```\n\nJavaScript is also a [weakly typed](https://en.wikipedia.org/wiki/Strong_and_weak_typing) language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors.\n\n```js\nconst foo = 42; // foo is a number\nconst result = foo + \"1\"; // JavaScript coerces foo to a string, so it can be concatenated with the other operand\nconsole.log(result); // 421\n```",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic and weak typing",
      "chunkIndex": 1,
      "totalChunks": 49,
      "startLineNumber": 12,
      "endLineNumber": 28
    }
  },
  {
    "content": "```js\nconst foo = 42; // foo is a number\nconst result = foo + \"1\"; // JavaScript coerces foo to a string, so it can be concatenated with the other operand\nconsole.log(result); // 421\n```\n\nImplicit coercions are very convenient, but can create subtle bugs when conversions happen where they are not expected, or where they are expected to happen in the other direction (for example, string to number instead of number to string). For [symbols](#symbol_type) and [BigInts](#bigint_type), JavaScript has intentionally disallowed certain implicit type conversions.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic and weak typing",
      "chunkIndex": 2,
      "totalChunks": 49,
      "startLineNumber": 24,
      "endLineNumber": 30
    }
  },
  {
    "content": "## Primitive values\n\nAll types except [Object](#objects) define [immutable](/en-US/docs/Glossary/Immutable) values represented directly at the lowest level of the language. We refer to values of these types as _primitive values_.\n\nAll primitive types, except [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null), can be tested by the [`typeof`](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) operator. `typeof null` returns `\"object\"`, so one has to use `=== null` to test for `null`.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive values",
      "chunkIndex": 3,
      "totalChunks": 49,
      "startLineNumber": 32,
      "endLineNumber": 36
    }
  },
  {
    "content": "All primitive types, except [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined), have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the [`Number`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) object provides methods like [`toExponential()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential). When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead. However, accessing a property on `null` or `undefined` throws a `TypeError` exception, which necessitates the introduction of the [optional chaining](/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) operator.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive values",
      "chunkIndex": 4,
      "totalChunks": 49,
      "startLineNumber": 38,
      "endLineNumber": 38
    }
  },
  {
    "content": "| Type                         | `typeof` return value | Object wrapper        |\n| ---------------------------- | --------------------- | --------------------- |\n| [Null](#null_type)           | `\"object\"`            | N/A                   |\n| [Undefined](#undefined_type) | `\"undefined\"`         | N/A                   |\n| [Boolean](#boolean_type)     | `\"boolean\"`           | {{jsxref(\"Boolean\")}} |\n| [Number](#number_type)       | `\"number\"`            | {{jsxref(\"Number\")}}  |\n| [BigInt](#bigint_type)       | `\"bigint\"`            | {{jsxref(\"BigInt\")}}  |\n| [String](#string_type)       | `\"string\"`            | {{jsxref(\"String\")}}  |\n| [Symbol](#symbol_type)       | `\"symbol\"`            | {{jsxref(\"Symbol\")}}  |\n\nThe object wrapper classes' reference pages contain more information about the methods and properties available for each type, as well as detailed descriptions for the semantics of the primitive types themselves.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive values",
      "chunkIndex": 5,
      "totalChunks": 49,
      "startLineNumber": 40,
      "endLineNumber": 50
    }
  },
  {
    "content": "### Null type\n\nThe Null type is inhabited by exactly one value: [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Null type",
      "chunkIndex": 6,
      "totalChunks": 49,
      "startLineNumber": 52,
      "endLineNumber": 54
    }
  },
  {
    "content": "### Undefined type\n\nThe Undefined type is inhabited by exactly one value: [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\nConceptually, `undefined` indicates the absence of a _value_, while `null` indicates the absence of an _object_ (which could also make up an excuse for [`typeof null === \"object\"`](/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null)). The language usually defaults to `undefined` when something is devoid of a value:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Undefined type",
      "chunkIndex": 7,
      "totalChunks": 49,
      "startLineNumber": 56,
      "endLineNumber": 60
    }
  },
  {
    "content": "- A [`return`](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement with no value (`return;`) implicitly returns `undefined`.\n- Accessing a nonexistent [object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) property (`obj.iDontExist`) returns `undefined`.\n- A variable declaration without initialization (`let x;`) implicitly initializes the variable to `undefined`.\n- Many methods, such as {{jsxref(\"Array.prototype.find()\")}} and {{jsxref(\"Map.prototype.get()\")}}, return `undefined` when no element is found.\n\n`null` is used much less often in the core language. The most important place is the end of the [prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) — subsequently, methods that interact with prototypes, such as {{jsxref(\"Object.getPrototypeOf()\")}}, {{jsxref(\"Object.create()\")}}, etc., accept or return `null` instead of `undefined`.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Undefined type",
      "chunkIndex": 8,
      "totalChunks": 49,
      "startLineNumber": 62,
      "endLineNumber": 67
    }
  },
  {
    "content": "`null` is a [keyword](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords), but `undefined` is a normal [identifier](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) that happens to be a global property. In practice, the difference is minor, since `undefined` should not be redefined or shadowed.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Undefined type",
      "chunkIndex": 9,
      "totalChunks": 49,
      "startLineNumber": 69,
      "endLineNumber": 69
    }
  },
  {
    "content": "### Boolean type\n\nThe {{jsxref(\"Boolean\")}} type represents a logical entity and is inhabited by two values: `true` and `false`.\n\nBoolean values are usually used for conditional operations, including [ternary operators](/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator), [`if...else`](/en-US/docs/Web/JavaScript/Reference/Statements/if...else), [`while`](/en-US/docs/Web/JavaScript/Reference/Statements/while), etc.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boolean type",
      "chunkIndex": 10,
      "totalChunks": 49,
      "startLineNumber": 71,
      "endLineNumber": 75
    }
  },
  {
    "content": "### Number type\n\nThe {{jsxref(\"Number\")}} type is a [double-precision 64-bit binary format IEEE 754 value](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding). It is capable of storing positive floating-point numbers between 2<sup>-1074</sup> ({{jsxref(\"Number.MIN_VALUE\")}}) and 2<sup>1023</sup> × (2 - 2<sup>-52</sup>) ({{jsxref(\"Number.MAX_VALUE\")}}) as well as negative floating-point numbers of the same magnitude, but it can only safely store integers in the range -(2<sup>53</sup> − 1) ({{jsxref(\"Number.MIN_SAFE_INTEGER\")}}) to 2<sup>53</sup> − 1 ({{jsxref(\"Number.MAX_SAFE_INTEGER\")}}). Outside this range, JavaScript can no longer safely represent integers; they will instead be represented by a double-precision floating point approximation. You can check if a number is within the range of safe integers using {{jsxref(\"Number.isSafeInteger()\")}}.\n\nValues outside the representable range are automatically converted:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number type",
      "chunkIndex": 11,
      "totalChunks": 49,
      "startLineNumber": 77,
      "endLineNumber": 81
    }
  },
  {
    "content": "Values outside the representable range are automatically converted:\n\n- Positive values greater than {{jsxref(\"Number.MAX_VALUE\")}} are converted to `Infinity`.\n- Positive values smaller than {{jsxref(\"Number.MIN_VALUE\")}} are converted to `0`.\n- Negative values smaller than -{{jsxref(\"Number.MAX_VALUE\")}} are converted to `-Infinity`.\n- Negative values greater than -{{jsxref(\"Number.MIN_VALUE\")}} are converted to `-0`.\n\n`Infinity` and `-Infinity` behave similarly to mathematical infinity, but with some slight differences; see {{jsxref(\"Number.POSITIVE_INFINITY\")}} and {{jsxref(\"Number.NEGATIVE_INFINITY\")}} for details.\n\nThe Number type has only one value with multiple representations: `0` is represented as both `-0` and `+0` (where `0` is an alias for `+0`). In practice, there is almost no difference between the different representations; for example, `+0 === -0` is `true`. However, you are able to notice this when you divide by zero:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number type",
      "chunkIndex": 12,
      "totalChunks": 49,
      "startLineNumber": 81,
      "endLineNumber": 90
    }
  },
  {
    "content": "```js\nconsole.log(42 / +0); // Infinity\nconsole.log(42 / -0); // -Infinity\n```\n\n{{jsxref(\"NaN\")}} (\"**N**ot **a** **N**umber\") is a special kind of number value that's typically encountered when the result of an arithmetic operation cannot be expressed as a number. It is also the only value in JavaScript that is not equal to itself.\n\nAlthough a number is conceptually a \"mathematical value\" and is always implicitly floating-point-encoded, JavaScript provides [bitwise operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators). When applying bitwise operators, the number is first converted to a 32-bit integer.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number type",
      "chunkIndex": 13,
      "totalChunks": 49,
      "startLineNumber": 92,
      "endLineNumber": 99
    }
  },
  {
    "content": "> [!NOTE]\n> Although bitwise operators _can_ be used to represent several Boolean values within a single number using [bit masking](https://en.wikipedia.org/wiki/Mask_%28computing%29), this is usually considered a bad practice. JavaScript offers other means to represent a set of Booleans (like an array of Booleans, or an object with Boolean values assigned to named properties). Bit masking also tends to make the code more difficult to read, understand, and maintain.\n\nIt may be necessary to use such techniques in very constrained environments, like when trying to cope with the limitations of local storage, or in extreme cases (such as when each bit over the network counts). This technique should only be considered when it is the last measure that can be taken to optimize size.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number type",
      "chunkIndex": 14,
      "totalChunks": 49,
      "startLineNumber": 101,
      "endLineNumber": 104
    }
  },
  {
    "content": "### BigInt type\n\nThe {{jsxref(\"BigInt\")}} type is a numeric primitive in JavaScript that can represent integers with arbitrary magnitude. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit ({{jsxref(\"Number.MAX_SAFE_INTEGER\")}}) for Numbers.\n\nA BigInt is created by appending `n` to the end of an integer or by calling the [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function.\n\nThis example demonstrates where incrementing the {{jsxref(\"Number.MAX_SAFE_INTEGER\")}} returns the expected result:\n\n```js\n// BigInt\nconst x = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n\nx + 1n === x + 2n; // false because 9007199254740992n and 9007199254740993n are unequal\n\n// Number\nNumber.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true because both are 9007199254740992\n```",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInt type",
      "chunkIndex": 15,
      "totalChunks": 49,
      "startLineNumber": 106,
      "endLineNumber": 121
    }
  },
  {
    "content": "// Number\nNumber.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true because both are 9007199254740992\n```\n\nYou can use most operators to work with BigInts, including `+`, `*`, `-`, `**`, and `%` — the only forbidden one is [`>>>`](/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift). A BigInt is not [strictly equal](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) to a Number with the same mathematical value, but it is [loosely](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) so.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInt type",
      "chunkIndex": 16,
      "totalChunks": 49,
      "startLineNumber": 119,
      "endLineNumber": 123
    }
  },
  {
    "content": "BigInt values are neither always more precise nor always less precise than numbers, since BigInts cannot represent fractional numbers, but can represent big integers more accurately. Neither type entails the other, and they are not mutually substitutable. A {{jsxref(\"TypeError\")}} is thrown if BigInt values are mixed with regular numbers in arithmetic expressions, or if they are [implicitly converted](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to each other.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInt type",
      "chunkIndex": 17,
      "totalChunks": 49,
      "startLineNumber": 125,
      "endLineNumber": 125
    }
  },
  {
    "content": "### String type\n\nThe {{jsxref(\"String\")}} type represents textual data and is encoded as a sequence of 16-bit unsigned integer values representing [UTF-16 code units](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters). Each element in the string occupies a position in the string. The first element is at index `0`, the next at index `1`, and so on. The [length](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) of a string is the number of UTF-16 code units in it, which may not correspond to the actual number of Unicode characters; see the [`String`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) reference page for more details.\n\nJavaScript strings are immutable. This means that once a string is created, it is not possible to modify it. String methods create new strings based on the content of the current string — for example:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String type",
      "chunkIndex": 18,
      "totalChunks": 49,
      "startLineNumber": 127,
      "endLineNumber": 131
    }
  },
  {
    "content": "- A substring of the original using [`substring()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring).\n- A concatenation of two strings using the concatenation operator (`+`) or [`concat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat).",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String type",
      "chunkIndex": 19,
      "totalChunks": 49,
      "startLineNumber": 133,
      "endLineNumber": 134
    }
  },
  {
    "content": "#### Beware of \"stringly-typing\" your code!\n\nIt can be tempting to use strings to represent complex data. Doing this comes with short-term benefits:\n\n- It is easy to build complex strings with concatenation.\n- Strings are easy to debug (what you see printed is always what is in the string).\n- Strings are the common denominator of a lot of APIs ([input fields](/en-US/docs/Web/API/HTMLInputElement), [local storage](/en-US/docs/Web/API/Web_Storage_API) values, [`fetch()`](/en-US/docs/Web/API/Window/fetch) responses when using {{domxref(\"Response.text()\")}}, etc.) and it can be tempting to only work with strings.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Beware of \"stringly-typing\" your code!",
      "chunkIndex": 20,
      "totalChunks": 49,
      "startLineNumber": 136,
      "endLineNumber": 142
    }
  },
  {
    "content": "With conventions, it is possible to represent any data structure in a string. This does not make it a good idea. For instance, with a separator, one could emulate a list (while a JavaScript array would be more suitable). Unfortunately, when the separator is used in one of the \"list\" elements, then, the list is broken. An escape character can be chosen, etc. All of this requires conventions and creates an unnecessary maintenance burden.\n\nUse strings for textual data. When representing complex data, _parse_ strings, and use the appropriate abstraction.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Beware of \"stringly-typing\" your code!",
      "chunkIndex": 21,
      "totalChunks": 49,
      "startLineNumber": 144,
      "endLineNumber": 146
    }
  },
  {
    "content": "### Symbol type\n\nA {{jsxref(\"Symbol\")}} is a **unique** and **immutable** primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called \"atoms\". The purpose of symbols is to create unique property keys that are guaranteed not to clash with keys from other code.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Symbol type",
      "chunkIndex": 22,
      "totalChunks": 49,
      "startLineNumber": 148,
      "endLineNumber": 150
    }
  },
  {
    "content": "## Objects\n\nIn computer science, an object is a value in memory which is possibly referenced by an [identifier](/en-US/docs/Glossary/Identifier). In JavaScript, objects are the only [mutable](/en-US/docs/Glossary/Mutable) values. [Functions](/en-US/docs/Web/JavaScript/Reference/Functions) are, in fact, also objects with the additional capability of being _callable_.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects",
      "chunkIndex": 23,
      "totalChunks": 49,
      "startLineNumber": 152,
      "endLineNumber": 154
    }
  },
  {
    "content": "### Properties\n\nIn JavaScript, objects can be seen as a collection of properties. With the [object literal syntax](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals), a limited set of properties are initialized; then properties can be added and removed. Object properties are equivalent to key-value pairs. Property keys are either [strings](#string_type) or [symbols](#symbol_type). When other types (such as numbers) are used to index objects, the values are implicitly converted to strings. Property values can be values of any type, including other objects, which enables building complex data structures.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Properties",
      "chunkIndex": 24,
      "totalChunks": 49,
      "startLineNumber": 156,
      "endLineNumber": 158
    }
  },
  {
    "content": "There are two types of object properties: The [_data_ property](#data_property) and the [_accessor_ property](#accessor_property). Each property has corresponding _attributes_. Each attribute is accessed internally by the JavaScript engine, but you can set them through {{jsxref(\"Object.defineProperty()\")}}, or read them through {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}. You can read more about the various nuances on the {{jsxref(\"Object.defineProperty()\")}} page.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Properties",
      "chunkIndex": 25,
      "totalChunks": 49,
      "startLineNumber": 160,
      "endLineNumber": 160
    }
  },
  {
    "content": "#### Data property\n\nData properties associate a key with a value. It can be described by the following attributes:\n\n- `value`\n  - : The value retrieved by a get access of the property. Can be any JavaScript value.\n- `writable`\n  - : A boolean value indicating if the property can be changed with an assignment.\n- `enumerable`\n  - : A boolean value indicating if the property can be enumerated by a [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop. See also [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties) for how enumerability interacts with other functions and syntaxes.\n- `configurable`\n  - : A boolean value indicating if the property can be deleted, can be changed to an accessor property, and can have its attributes changed.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data property",
      "chunkIndex": 26,
      "totalChunks": 49,
      "startLineNumber": 162,
      "endLineNumber": 173
    }
  },
  {
    "content": "#### Accessor property\n\nAssociates a key with one of two accessor functions (`get` and `set`) to retrieve or store a value.\n\n> [!NOTE]\n> It's important to recognize it's accessor _property_ — not accessor _method_. We can give a JavaScript object class-like accessors by using a function as a value — but that doesn't make the object a class.\n\nAn accessor property has the following attributes:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessor property",
      "chunkIndex": 27,
      "totalChunks": 49,
      "startLineNumber": 175,
      "endLineNumber": 182
    }
  },
  {
    "content": "- `get`\n  - : A function called with an empty argument list to retrieve the property value whenever a get access to the value is performed. See also [getters](/en-US/docs/Web/JavaScript/Reference/Functions/get). May be `undefined`.\n- `set`\n  - : A function called with an argument that contains the assigned value. Executed whenever a specified property is attempted to be changed. See also [setters](/en-US/docs/Web/JavaScript/Reference/Functions/set). May be `undefined`.\n- `enumerable`\n  - : A boolean value indicating if the property can be enumerated by a [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop. See also [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties) for how enumerability interacts with other functions and syntaxes.\n- `configurable`\n  - : A boolean value indicating if the property can be deleted, can be changed to a data property, and can have its attributes changed.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessor property",
      "chunkIndex": 28,
      "totalChunks": 49,
      "startLineNumber": 184,
      "endLineNumber": 191
    }
  },
  {
    "content": "The [prototype](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) of an object points to another object or to `null` — it's conceptually a hidden property of the object, commonly represented as `[[Prototype]]`. Properties of the object's `[[Prototype]]` can also be accessed on the object itself.\n\nObjects are ad-hoc key-value pairs, so they are often used as maps. However, there can be ergonomics, security, and performance issues. Use a {{jsxref(\"Map\")}} for storing arbitrary data instead. The [`Map` reference](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps) contains a more detailed discussion of the pros & cons between plain objects and maps for storing key-value associations.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessor property",
      "chunkIndex": 29,
      "totalChunks": 49,
      "startLineNumber": 193,
      "endLineNumber": 195
    }
  },
  {
    "content": "### Dates\n\nJavaScript provides two sets of APIs for representing dates: the legacy {{jsxref(\"Date\")}} object and the modern {{jsxref(\"Temporal\")}} object. `Date` has many undesirable design choices and should be avoided in new code if possible.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dates",
      "chunkIndex": 30,
      "totalChunks": 49,
      "startLineNumber": 197,
      "endLineNumber": 199
    }
  },
  {
    "content": "### Indexed collections: Arrays and typed Arrays\n\n[Arrays](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) are regular objects for which there is a particular relationship between integer-keyed properties and the `length` property.\n\nAdditionally, arrays inherit from `Array.prototype`, which provides a handful of convenient methods to manipulate arrays. For example, [`indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) searches a value in the array and [`push()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) appends an element to the array. This makes Arrays a perfect candidate to represent ordered lists.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Indexed collections: Arrays and typed Arrays",
      "chunkIndex": 31,
      "totalChunks": 49,
      "startLineNumber": 201,
      "endLineNumber": 205
    }
  },
  {
    "content": "[Typed Arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) present an array-like view of an underlying binary data buffer, and offer many methods that have similar semantics to the array counterparts. \"Typed array\" is an umbrella term for a range of data structures, including `Int8Array`, `Float32Array`, etc. Check the [typed array](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) page for more information. Typed arrays are often used in conjunction with {{jsxref(\"ArrayBuffer\")}} and {{jsxref(\"DataView\")}}.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Indexed collections: Arrays and typed Arrays",
      "chunkIndex": 32,
      "totalChunks": 49,
      "startLineNumber": 207,
      "endLineNumber": 207
    }
  },
  {
    "content": "### Keyed collections: Maps, Sets, WeakMaps, WeakSets\n\nThese data structures take object references as keys. {{jsxref(\"Set\")}} and {{jsxref(\"WeakSet\")}} represent a collection of unique values, while {{jsxref(\"Map\")}} and {{jsxref(\"WeakMap\")}} represent a collection of key-value associations.\n\nYou could implement `Map`s and `Set`s yourself. However, since objects cannot be compared (in the sense of `<` \"less than\", for instance), neither does the engine expose its hash function for objects, look-up performance would necessarily be linear. Native implementations of them (including `WeakMap`s) can have look-up performance that is approximately logarithmic to constant time.\n\nUsually, to bind data to a DOM node, one could set properties directly on the object, or use `data-*` attributes. This has the downside that the data is available to any script running in the same context. `Map`s and `WeakMap`s make it easy to _privately_ bind data to an object.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Keyed collections: Maps, Sets, WeakMaps, WeakSets",
      "chunkIndex": 33,
      "totalChunks": 49,
      "startLineNumber": 209,
      "endLineNumber": 215
    }
  },
  {
    "content": "`WeakMap` and `WeakSet` only allow garbage-collectable values as keys, which are either objects or [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), and the keys may be collected even when they remain in the collection. They are specifically used for [memory usage optimization](/en-US/docs/Web/JavaScript/Guide/Memory_management#data_structures_aiding_memory_management).",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Keyed collections: Maps, Sets, WeakMaps, WeakSets",
      "chunkIndex": 34,
      "totalChunks": 49,
      "startLineNumber": 217,
      "endLineNumber": 217
    }
  },
  {
    "content": "### Structured data: JSON\n\nJSON (**J**ava**S**cript **O**bject **N**otation) is a lightweight data-interchange format, derived from JavaScript, but used by many programming languages. JSON builds universal data structures that can be transferred between different environments and even across languages. See {{jsxref(\"JSON\")}} for more details.\n\n### More objects in the standard library\n\nJavaScript has a standard library of built-in objects. Read the [reference](/en-US/docs/Web/JavaScript/Reference/Global_Objects) to find out more about the built-in objects.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Structured data: JSON",
      "chunkIndex": 35,
      "totalChunks": 49,
      "startLineNumber": 219,
      "endLineNumber": 225
    }
  },
  {
    "content": "## Type coercion\n\nAs mentioned above, JavaScript is a [weakly typed](#dynamic_and_weak_typing) language. This means that you can often use a value of one type where another type is expected, and the language will convert it to the right type for you. To do so, JavaScript defines a handful of coercion rules.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Type coercion",
      "chunkIndex": 36,
      "totalChunks": 49,
      "startLineNumber": 227,
      "endLineNumber": 229
    }
  },
  {
    "content": "### Primitive coercion\n\nThe [primitive coercion](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toprimitive) process is used where a primitive value is expected, but there's no strong preference for what the actual type should be. This is usually when a [string](#string_type), a [number](#number_type), or a [BigInt](#bigint_type) are equally acceptable. For example:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 37,
      "totalChunks": 49,
      "startLineNumber": 231,
      "endLineNumber": 233
    }
  },
  {
    "content": "- The [`Date()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date) constructor, when it receives one argument that's not a `Date` instance — strings represent date strings, while numbers represent timestamps.\n- The [`+`](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) operator — if one operand is a string, string concatenation is performed; otherwise, numeric addition is performed.\n- The [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator — if one operand is a primitive while the other is an object, the object is converted to a primitive value with no preferred type.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 38,
      "totalChunks": 49,
      "startLineNumber": 235,
      "endLineNumber": 237
    }
  },
  {
    "content": "This operation does not do any conversion if the value is already a primitive. Objects are converted to primitives by calling its [`[Symbol.toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"default\"` as hint), `valueOf()`, and `toString()` methods, in that order. Note that primitive conversion calls `valueOf()` before `toString()`, which is similar to the behavior of [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) but different from [string coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 39,
      "totalChunks": 49,
      "startLineNumber": 239,
      "endLineNumber": 239
    }
  },
  {
    "content": "The `[Symbol.toPrimitive]()` method, if present, must return a primitive — returning an object results in a {{jsxref(\"TypeError\")}}. For `valueOf()` and `toString()`, if one returns an object, the return value is ignored and the other's return value is used instead; if neither is present, or neither returns a primitive, a {{jsxref(\"TypeError\")}} is thrown. For example, in the following code:\n\n```js\nconsole.log({} + []); // \"[object Object]\"\n```",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 40,
      "totalChunks": 49,
      "startLineNumber": 241,
      "endLineNumber": 245
    }
  },
  {
    "content": "```js\nconsole.log({} + []); // \"[object Object]\"\n```\n\nNeither `{}` nor `[]` have a `[Symbol.toPrimitive]()` method. Both `{}` and `[]` inherit `valueOf()` from {{jsxref(\"Object.prototype.valueOf\")}}, which returns the object itself. Since the return value is an object, it is ignored. Therefore, `toString()` is called instead. [`{}.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) returns `\"[object Object]\"`, while [`[].toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) returns `\"\"`, so the result is their concatenation: `\"[object Object]\"`.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 41,
      "totalChunks": 49,
      "startLineNumber": 243,
      "endLineNumber": 247
    }
  },
  {
    "content": "The `[Symbol.toPrimitive]()` method always takes precedence when doing conversion to any primitive type. Primitive conversion generally behaves like number conversion, because `valueOf()` is called in priority; however, objects with custom `[Symbol.toPrimitive]()` methods can choose to return any primitive. {{jsxref(\"Date\")}} and {{jsxref(\"Symbol\")}} objects are the only built-in objects that override the `[Symbol.toPrimitive]()` method. [`Date.prototype[Symbol.toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Symbol.toPrimitive) treats the `\"default\"` hint as if it's `\"string\"`, while [`Symbol.prototype[Symbol.toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol.toPrimitive) ignores the hint and always returns a symbol.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Primitive coercion",
      "chunkIndex": 42,
      "totalChunks": 49,
      "startLineNumber": 249,
      "endLineNumber": 249
    }
  },
  {
    "content": "### Numeric coercion\n\nThere are two numeric types: [Number](#number_type) and [BigInt](#bigint_type). Sometimes the language specifically expects a number or a BigInt (such as {{jsxref(\"Array.prototype.slice()\")}}, where the index must be a number); other times, it may tolerate either and perform different operations depending on the operand's type. For strict coercion processes that do not allow implicit conversion from the other type, see [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) and [BigInt coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#bigint_coercion).",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numeric coercion",
      "chunkIndex": 43,
      "totalChunks": 49,
      "startLineNumber": 251,
      "endLineNumber": 253
    }
  },
  {
    "content": "Numeric coercion is nearly the same as [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), except that BigInts are returned as-is instead of causing a {{jsxref(\"TypeError\")}}. Numeric coercion is used by all arithmetic operators, since they are overloaded for both numbers and BigInts. The only exception is [unary plus](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus), which always does number coercion.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numeric coercion",
      "chunkIndex": 44,
      "totalChunks": 49,
      "startLineNumber": 255,
      "endLineNumber": 255
    }
  },
  {
    "content": "### Other coercions\n\nAll data types, except Null, Undefined, and Symbol, have their respective coercion process. See [string coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), [boolean coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion), and [object coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion) for more details.\n\nAs you may have noticed, there are three distinct paths through which objects may be converted to primitives:",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other coercions",
      "chunkIndex": 45,
      "totalChunks": 49,
      "startLineNumber": 257,
      "endLineNumber": 261
    }
  },
  {
    "content": "As you may have noticed, there are three distinct paths through which objects may be converted to primitives:\n\n- [Primitive coercion](#primitive_coercion): `[Symbol.toPrimitive](\"default\")` → `valueOf()` → `toString()`\n- [Numeric coercion](#numeric_coercion), [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), [BigInt coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#bigint_coercion): `[Symbol.toPrimitive](\"number\")` → `valueOf()` → `toString()`\n- [String coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion): `[Symbol.toPrimitive](\"string\")` → `toString()` → `valueOf()`",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other coercions",
      "chunkIndex": 46,
      "totalChunks": 49,
      "startLineNumber": 261,
      "endLineNumber": 265
    }
  },
  {
    "content": "In all cases, `[Symbol.toPrimitive]()`, if present, must be callable and return a primitive, while `valueOf` or `toString` will be ignored if they are not callable or return an object. At the end of the process, if successful, the result is guaranteed to be a primitive. The resulting primitive is then subject to further coercions depending on the context.",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other coercions",
      "chunkIndex": 47,
      "totalChunks": 49,
      "startLineNumber": 267,
      "endLineNumber": 267
    }
  },
  {
    "content": "## See also\n\n- [JavaScript Data Structures and Algorithms](https://github.com/trekhleb/javascript-algorithms) by Oleksii Trekhleb\n- [Computer Science in JavaScript](https://github.com/humanwhocodes/computer-science-in-javascript) by Nicholas C. Zakas",
    "metadata": {
      "source": "data_structures/index.md",
      "documentSlug": "Web/JavaScript/Guide/Data_structures",
      "documentTitle": "JavaScript data types and data structures",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 48,
      "totalChunks": 49,
      "startLineNumber": 269,
      "endLineNumber": 272
    }
  },
  {
    "content": "Every property in JavaScript objects can be classified by three factors:\n\n- Enumerable or non-enumerable;\n- String or [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol);\n- Own property or inherited property from the prototype chain.\n\n_Enumerable properties_ are those properties whose internal enumerable flag is set to true, which is the default for properties created via simple assignment or via a property initializer. Properties defined via [`Object.defineProperty`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) and such are not enumerable by default. Most iteration means (such as [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops and [`Object.keys`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)) only visit enumerable keys.\n\nOwnership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 18,
      "startLineNumber": 8,
      "endLineNumber": 16
    }
  },
  {
    "content": "Ownership of properties is determined by whether the property belongs to the object directly and not to its prototype chain.\n\nAll properties, enumerable or not, string or symbol, own or inherited, can be accessed with [dot notation or bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). In this section, we will focus on the means provided by JavaScript to visit a group of object properties one-by-one.",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 18,
      "startLineNumber": 16,
      "endLineNumber": 18
    }
  },
  {
    "content": "## Querying object properties\n\nThere are four built-in ways to query a property of an object. They all support both string and symbol keys. The following table summarizes when each method returns `true`.",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Querying object properties",
      "chunkIndex": 2,
      "totalChunks": 18,
      "startLineNumber": 20,
      "endLineNumber": 22
    }
  },
  {
    "content": "|                                                                                                             | Enumerable, own | Enumerable, inherited | Non-enumerable, own | Non-enumerable, inherited |\n| ----------------------------------------------------------------------------------------------------------- | --------------- | --------------------- | ------------------- | ------------------------- |\n| [`propertyIsEnumerable()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) | `true ✅`       | `false ❌`            | `false ❌`          | `false ❌`                |\n| [`hasOwnProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)             | `true ✅`       | `false ❌`            | `true ✅`           | `false ❌`                |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Querying object properties",
      "chunkIndex": 3,
      "totalChunks": 18,
      "startLineNumber": 24,
      "endLineNumber": 27
    }
  },
  {
    "content": "| [`hasOwnProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)             | `true ✅`       | `false ❌`            | `true ✅`           | `false ❌`                |\n| [`Object.hasOwn()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)                      | `true ✅`       | `false ❌`            | `true ✅`           | `false ❌`                |\n| [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in)                                                   | `true ✅`       | `true ✅`             | `true ✅`           | `true ✅`                 |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Querying object properties",
      "chunkIndex": 4,
      "totalChunks": 18,
      "startLineNumber": 27,
      "endLineNumber": 29
    }
  },
  {
    "content": "## Traversing object properties\n\nThere are many methods in JavaScript that traverse a group of properties of an object. Sometimes, these properties are returned as an array; sometimes, they are iterated one-by-one in a loop; sometimes, they are used for constructing or mutating another object. The following table summarizes when a property may be visited.\n\nMethods that only visit string properties or only symbol properties will have an extra note. ✅ means a property of this type will be visited; ❌ means it will not.",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 5,
      "totalChunks": 18,
      "startLineNumber": 31,
      "endLineNumber": 35
    }
  },
  {
    "content": "|                                                                                                                                                                                                                                                                        | Enumerable, own   | Enumerable, inherited | Non-enumerable, own | Non-enumerable, inherited |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------- | --------------------- | ------------------- | ------------------------- |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 6,
      "totalChunks": 18,
      "startLineNumber": 37,
      "endLineNumber": 38
    }
  },
  {
    "content": "| [`Object.keys`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)<br />[`Object.values`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values)<br />[`Object.entries`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries) | ✅<br />(strings) | ❌                    | ❌                  | ❌                        |\n| [`Object.getOwnPropertyNames`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)                                                                                                                                                         | ✅<br />(strings) | ❌                    | ✅<br />(strings)   | ❌                        |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 7,
      "totalChunks": 18,
      "startLineNumber": 39,
      "endLineNumber": 40
    }
  },
  {
    "content": "| [`Object.getOwnPropertySymbols`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)                                                                                                                                                     | ✅<br />(symbols) | ❌                    | ✅<br />(symbols)   | ❌                        |\n| [`Object.getOwnPropertyDescriptors`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors)                                                                                                                                             | ✅                | ❌                    | ✅                  | ❌                        |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 8,
      "totalChunks": 18,
      "startLineNumber": 41,
      "endLineNumber": 42
    }
  },
  {
    "content": "| [`Reflect.ownKeys`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys)                                                                                                                                                                               | ✅                | ❌                    | ✅                  | ❌                        |\n| [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in)                                                                                                                                                                                                 | ✅<br />(strings) | ✅<br />(strings)     | ❌                  | ❌                        |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 9,
      "totalChunks": 18,
      "startLineNumber": 43,
      "endLineNumber": 44
    }
  },
  {
    "content": "| [`Object.assign`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)<br />(After the first parameter)                                                                                                                                                  | ✅                | ❌                    | ❌                  | ❌                        |\n| [Object spread](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)                                                                                                                                                                                          | ✅                | ❌                    | ❌                  | ❌                        |",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Traversing object properties",
      "chunkIndex": 10,
      "totalChunks": 18,
      "startLineNumber": 45,
      "endLineNumber": 46
    }
  },
  {
    "content": "## Obtaining properties by enumerability/ownership\n\nNote that this is not the most efficient algorithm for all cases, but useful for a quick demonstration.\n\n- Detection can occur by `SimplePropertyRetriever.theGetMethodYouWant(obj).includes(prop)`\n- Iteration can occur by `SimplePropertyRetriever.theGetMethodYouWant(obj).forEach((value, prop) => {});` (or use `filter()`, `map()`, etc.)",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Obtaining properties by enumerability/ownership",
      "chunkIndex": 11,
      "totalChunks": 18,
      "startLineNumber": 48,
      "endLineNumber": 53
    }
  },
  {
    "content": "```js\nconst SimplePropertyRetriever = {\n  getOwnEnumProps(obj) {\n    return this._getPropertyNames(obj, true, false, this._enumerable);\n    // Or could use for...in filtered with Object.hasOwn or just this: return Object.keys(obj);\n  },\n  getOwnNonEnumProps(obj) {\n    return this._getPropertyNames(obj, true, false, this._notEnumerable);\n  },\n  getOwnProps(obj) {\n    return this._getPropertyNames(\n      obj,\n      true,\n      false,\n      this._enumerableAndNotEnumerable,\n    );\n    // Or just use: return Object.getOwnPropertyNames(obj);\n  },\n  getPrototypeEnumProps(obj) {\n    return this._getPropertyNames(obj, false, true, this._enumerable);\n  },\n  getPrototypeNonEnumProps(obj) {\n    return this._getPropertyNames(obj, false, true, this._notEnumerable);\n  },\n  getPrototypeProps(obj) {\n    return this._getPropertyNames(\n      obj,\n      false,\n      true,\n      this._enumerableAndNotEnumerable,\n    );\n  },\n  getOwnAndPrototypeEnumProps(obj) {",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Obtaining properties by enumerability/ownership",
      "chunkIndex": 12,
      "totalChunks": 18,
      "startLineNumber": 55,
      "endLineNumber": 87
    }
  },
  {
    "content": "},\n  getPrototypeProps(obj) {\n    return this._getPropertyNames(\n      obj,\n      false,\n      true,\n      this._enumerableAndNotEnumerable,\n    );\n  },\n  getOwnAndPrototypeEnumProps(obj) {\n    return this._getPropertyNames(obj, true, true, this._enumerable);\n    // Or could use unfiltered for...in\n  },\n  getOwnAndPrototypeNonEnumProps(obj) {\n    return this._getPropertyNames(obj, true, true, this._notEnumerable);\n  },\n  getOwnAndPrototypeEnumAndNonEnumProps(obj) {\n    return this._getPropertyNames(\n      obj,\n      true,\n      true,\n      this._enumerableAndNotEnumerable,\n    );\n  },\n  // Private static property checker callbacks\n  _enumerable(obj, prop) {\n    return Object.prototype.propertyIsEnumerable.call(obj, prop);\n  },\n  _notEnumerable(obj, prop) {\n    return !Object.prototype.propertyIsEnumerable.call(obj, prop);\n  },\n  _enumerableAndNotEnumerable(obj, prop) {\n    return true;\n  },\n  // Inspired by http://stackoverflow.com/a/8024294/271577",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Obtaining properties by enumerability/ownership",
      "chunkIndex": 13,
      "totalChunks": 18,
      "startLineNumber": 78,
      "endLineNumber": 112
    }
  },
  {
    "content": "return !Object.prototype.propertyIsEnumerable.call(obj, prop);\n  },\n  _enumerableAndNotEnumerable(obj, prop) {\n    return true;\n  },\n  // Inspired by http://stackoverflow.com/a/8024294/271577\n  _getPropertyNames(obj, iterateSelf, iteratePrototype, shouldInclude) {\n    const props = [];\n    do {\n      if (iterateSelf) {\n        Object.getOwnPropertyNames(obj).forEach((prop) => {\n          if (props.indexOf(prop) === -1 && shouldInclude(obj, prop)) {\n            props.push(prop);\n          }\n        });\n      }\n      if (!iteratePrototype) {\n        break;\n      }\n      iterateSelf = true;\n      obj = Object.getPrototypeOf(obj);\n    } while (obj);\n    return props;\n  },\n};\n```",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Obtaining properties by enumerability/ownership",
      "chunkIndex": 14,
      "totalChunks": 18,
      "startLineNumber": 107,
      "endLineNumber": 132
    }
  },
  {
    "content": "## See also",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 15,
      "totalChunks": 18,
      "startLineNumber": 134,
      "endLineNumber": 134
    }
  },
  {
    "content": "- [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in)\n- [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in)\n- [`Object.prototype.hasOwnProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\n- [`Object.prototype.propertyIsEnumerable()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable)\n- [`Object.getOwnPropertyNames()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n- [`Object.getOwnPropertySymbols()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)\n- [`Object.keys()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n- [`Object.getOwnPropertyDescriptors()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors)\n- [`Object.hasOwn()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 16,
      "totalChunks": 18,
      "startLineNumber": 136,
      "endLineNumber": 144
    }
  },
  {
    "content": "- [`Object.hasOwn()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)\n- [`Reflect.ownKeys()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys)",
    "metadata": {
      "source": "enumerability_and_ownership_of_properties/index.md",
      "documentSlug": "Web/JavaScript/Guide/Enumerability_and_ownership_of_properties",
      "documentTitle": "Enumerability and ownership of properties",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 17,
      "totalChunks": 18,
      "startLineNumber": 144,
      "endLineNumber": 145
    }
  },
  {
    "content": "JavaScript provides three different value-comparison operations:\n\n- [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) — strict equality (triple equals)\n- [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) — loose equality (double equals)\n- [`Object.is()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\nWhich operation you choose depends on what sort of comparison you are looking to perform. Briefly:",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 30,
      "startLineNumber": 8,
      "endLineNumber": 14
    }
  },
  {
    "content": "Which operation you choose depends on what sort of comparison you are looking to perform. Briefly:\n\n- Double equals (`==`) will perform a type conversion when comparing two things, and will handle `NaN`, `-0`, and `+0` specially to conform to IEEE 754 (so `NaN != NaN`, and `-0 == +0`);\n- Triple equals (`===`) will do the same comparison as double equals (including the special handling for `NaN`, `-0`, and `+0`) but without type conversion; if the types differ, `false` is returned.\n- `Object.is()` does no type conversion and no special handling for `NaN`, `-0`, and `+0` (giving it the same behavior as `===` except on those special numeric values).\n\nThey correspond to three of four equality algorithms in JavaScript:",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 30,
      "startLineNumber": 14,
      "endLineNumber": 20
    }
  },
  {
    "content": "They correspond to three of four equality algorithms in JavaScript:\n\n- [IsLooselyEqual](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-islooselyequal): `==`\n- [IsStrictlyEqual](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isstrictlyequal): `===`\n- [SameValue](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevalue): `Object.is()`\n- [SameValueZero](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluezero): used by many built-in operations\n\nNote that the distinction between these all have to do with their handling of primitives; none of them compares whether the parameters are conceptually similar in structure. For any non-primitive objects `x` and `y` which have the same structure but are distinct objects themselves, all of the above forms will evaluate to `false`.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 2,
      "totalChunks": 30,
      "startLineNumber": 20,
      "endLineNumber": 27
    }
  },
  {
    "content": "## Strict equality using ===\n\nStrict equality compares two values for equality. Neither value is implicitly converted to some other value before being compared. If the values have different types, the values are considered unequal. If the values have the same type, are not numbers, and have the same value, they're considered equal. Finally, if both values are numbers, they're considered equal if they're both not `NaN` and are the same value, or if one is `+0` and one is `-0`.\n\n```js\nconst num = 0;\nconst obj = new String(\"0\");\nconst str = \"0\";\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n```",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strict equality using ===",
      "chunkIndex": 3,
      "totalChunks": 30,
      "startLineNumber": 29,
      "endLineNumber": 48
    }
  },
  {
    "content": "Strict equality is almost always the correct comparison operation to use. For all values except numbers, it uses the obvious semantics: a value is only equal to itself. For numbers it uses slightly different semantics to gloss over two different edge cases. The first is that floating point zero is either positively or negatively signed. This is useful in representing certain mathematical solutions, but as most situations don't care about the difference between `+0` and `-0`, strict equality treats them as the same value. The second is that floating point includes the concept of a not-a-number value, `NaN`, to represent the solution to certain ill-defined mathematical problems: negative infinity added to positive infinity, for example. Strict equality treats `NaN` as unequal to every other value — including itself. (The only case in which `(x !== x)` is `true` is when `x` is `NaN`.)",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strict equality using ===",
      "chunkIndex": 4,
      "totalChunks": 30,
      "startLineNumber": 50,
      "endLineNumber": 50
    }
  },
  {
    "content": "Besides `===`, strict equality is also used by array index-finding methods including [`Array.prototype.indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf), [`Array.prototype.lastIndexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf), [`TypedArray.prototype.indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf), [`TypedArray.prototype.lastIndexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf), and [`case`](/en-US/docs/Web/JavaScript/Reference/Statements/switch)-matching. This means you cannot use `indexOf(NaN)` to find the index of a `NaN` value in an array, or use `NaN` as a `case` value in a `switch` statement and make it match anything.\n\n```js\nconsole.log([NaN].indexOf(NaN)); // -1\nswitch (NaN) {\n  case NaN:\n    console.log(\"Surprise\"); // Nothing is logged\n}\n```",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strict equality using ===",
      "chunkIndex": 5,
      "totalChunks": 30,
      "startLineNumber": 52,
      "endLineNumber": 60
    }
  },
  {
    "content": "## Loose equality using ==\n\nLoose equality is _symmetric_: `A == B` always has identical semantics to `B == A` for any values of `A` and `B` (except for the order of applied conversions). The behavior for performing loose equality using `==` is as follows:",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 6,
      "totalChunks": 30,
      "startLineNumber": 62,
      "endLineNumber": 64
    }
  },
  {
    "content": "1. If the operands have the same type, they are compared as follows:\n   - Object: return `true` only if both operands reference the same object.\n   - String: return `true` only if both operands have the same characters in the same order.\n   - Number: return `true` only if both operands have the same value. `+0` and `-0` are treated as the same value. If either operand is `NaN`, return `false`; so `NaN` is never equal to `NaN`.\n   - Boolean: return `true` only if operands are both `true` or both `false`.\n   - BigInt: return `true` only if both operands have the same value.\n   - Symbol: return `true` only if both operands reference the same symbol.\n2. If one of the operands is `null` or `undefined`, the other must also be `null` or `undefined` to return `true`. Otherwise return `false`.\n3. If one of the operands is an object and the other is a primitive, [convert the object to a primitive](/en-US/docs/Web/JavaScript/Guide/Data_structures#primitive_coercion).",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 7,
      "totalChunks": 30,
      "startLineNumber": 66,
      "endLineNumber": 74
    }
  },
  {
    "content": "3. If one of the operands is an object and the other is a primitive, [convert the object to a primitive](/en-US/docs/Web/JavaScript/Guide/Data_structures#primitive_coercion).\n4. At this step, both operands are converted to primitives (one of String, Number, Boolean, Symbol, and BigInt). The rest of the conversion is done case-by-case.\n   - If they are of the same type, compare them using step 1.\n   - If one of the operands is a Symbol but the other is not, return `false`.\n   - If one of the operands is a Boolean but the other is not, [convert the boolean to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion): `true` is converted to 1, and `false` is converted to 0. Then compare the two operands loosely again.\n   - Number to String: [convert the string to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Conversion failure results in `NaN`, which will guarantee the equality to be `false`.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 8,
      "totalChunks": 30,
      "startLineNumber": 74,
      "endLineNumber": 79
    }
  },
  {
    "content": "- Number to BigInt: compare by their mathematical value. If the number is ±Infinity or `NaN`, return `false`.\n   - String to BigInt: convert the string to a BigInt using the same algorithm as the [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor. If conversion fails, return `false`.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 9,
      "totalChunks": 30,
      "startLineNumber": 80,
      "endLineNumber": 81
    }
  },
  {
    "content": "Traditionally, and according to ECMAScript, all primitives and objects are loosely unequal to `undefined` and `null`. But most browsers permit a very narrow class of objects (specifically, the `document.all` object for any page), in some contexts, to act as if they _emulate_ the value `undefined`. Loose equality is one such context: `null == A` and `undefined == A` evaluate to true if, and only if, A is an object that _emulates_ `undefined`. In all other cases an object is never loosely equal to `undefined` or `null`.\n\nIn most cases, using loose equality is discouraged. The result of a comparison using strict equality is easier to predict, and may evaluate more quickly due to the lack of type coercion.\n\nThe following example demonstrates loose equality comparisons involving the number primitive `0`, the bigint primitive `0n`, the string primitive `'0'`, and an object whose `toString()` value is `'0'`.\n\n```js\nconst num = 0;\nconst big = 0n;\nconst str = \"0\";\nconst obj = new String(\"0\");",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 10,
      "totalChunks": 30,
      "startLineNumber": 83,
      "endLineNumber": 93
    }
  },
  {
    "content": "```js\nconst num = 0;\nconst big = 0n;\nconst str = \"0\";\nconst obj = new String(\"0\");\n\nconsole.log(num == str); // true\nconsole.log(big == num); // true\nconsole.log(str == big); // true\n\nconsole.log(num == obj); // true\nconsole.log(big == obj); // true\nconsole.log(str == obj); // true\n```\n\nLoose equality is only used by the `==` operator.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loose equality using ==",
      "chunkIndex": 11,
      "totalChunks": 30,
      "startLineNumber": 89,
      "endLineNumber": 104
    }
  },
  {
    "content": "## Same-value equality using Object.is()\n\nSame-value equality determines whether two values are _functionally identical_ in all contexts. (This use case demonstrates an instance of the [Liskov substitution principle](https://en.wikipedia.org/wiki/Liskov_substitution_principle).) One instance occurs when an attempt is made to mutate an immutable property:\n\n```js\n// Add an immutable NEGATIVE_ZERO property to the Number constructor.\nObject.defineProperty(Number, \"NEGATIVE_ZERO\", {\n  value: -0,\n  writable: false,\n  configurable: false,\n  enumerable: false,\n});\n\nfunction attemptMutation(v) {\n  Object.defineProperty(Number, \"NEGATIVE_ZERO\", { value: v });\n}\n```",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Same-value equality using Object.is()",
      "chunkIndex": 12,
      "totalChunks": 30,
      "startLineNumber": 106,
      "endLineNumber": 122
    }
  },
  {
    "content": "function attemptMutation(v) {\n  Object.defineProperty(Number, \"NEGATIVE_ZERO\", { value: v });\n}\n```\n\n`Object.defineProperty` will throw an exception when attempting to change an immutable property, but it does nothing if no actual change is requested. If `v` is `-0`, no change has been requested, and no error will be thrown. Internally, when an immutable property is redefined, the newly-specified value is compared against the current value using same-value equality.\n\nSame-value equality is provided by the {{jsxref(\"Object.is\")}} method. It's used almost everywhere in the language where a value of equivalent identity is expected.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Same-value equality using Object.is()",
      "chunkIndex": 13,
      "totalChunks": 30,
      "startLineNumber": 119,
      "endLineNumber": 126
    }
  },
  {
    "content": "## Same-value-zero equality\n\nSimilar to same-value equality, but +0 and -0 are considered equal.\n\nSame-value-zero equality is not exposed as a JavaScript API, but can be implemented with custom code:\n\n```js\nfunction sameValueZero(x, y) {\n  if (typeof x === \"number\" && typeof y === \"number\") {\n    // x and y are equal (may be -0 and 0) or they are both NaN\n    return x === y || (x !== x && y !== y);\n  }\n  return x === y;\n}\n```",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Same-value-zero equality",
      "chunkIndex": 14,
      "totalChunks": 30,
      "startLineNumber": 128,
      "endLineNumber": 142
    }
  },
  {
    "content": "Same-value-zero only differs from strict equality by treating `NaN` as equivalent, and only differs from same-value equality by treating `-0` as equivalent to `0`. This makes it usually have the most sensible behavior during searching, especially when working with `NaN`. It's used by [`Array.prototype.includes()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes), [`TypedArray.prototype.includes()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes), as well as [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) methods for comparing key equality.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Same-value-zero equality",
      "chunkIndex": 15,
      "totalChunks": 30,
      "startLineNumber": 144,
      "endLineNumber": 144
    }
  },
  {
    "content": "## Comparing equality methods\n\nPeople often compare double equals and triple equals by saying one is an \"enhanced\" version of the other. For example, double equals could be said as an extended version of triple equals, because the former does everything that the latter does, but with type conversion on its operands — for example, `6 == \"6\"`. Alternatively, it can be claimed that double equals is the baseline, and triple equals is an enhanced version, because it requires the two operands to be the same type, so it adds an extra constraint.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 16,
      "totalChunks": 30,
      "startLineNumber": 146,
      "endLineNumber": 148
    }
  },
  {
    "content": "However, this way of thinking implies that the equality comparisons form a one-dimensional \"spectrum\" where \"totally strict\" lies on one end and \"totally loose\" lies on the other. This model falls short with {{jsxref(\"Object.is\")}}, because it isn't \"looser\" than double equals or \"stricter\" than triple equals, nor does it fit somewhere in between (i.e., being both stricter than double equals, but looser than triple equals). We can see from the sameness comparisons table below that this is due to the way that {{jsxref(\"Object.is\")}} handles {{jsxref(\"NaN\")}}. Notice that if `Object.is(NaN, NaN)` evaluated to `false`, we _could_ say that it fits on the loose/strict spectrum as an even stricter form of triple equals, one that distinguishes between `-0` and `+0`. The {{jsxref(\"NaN\")}} handling means this is untrue, however. Unfortunately, {{jsxref(\"Object.is\")}} has to be thought of in terms of its specific characteristics, rather than its looseness or strictness with regard to the",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 17,
      "totalChunks": 30,
      "startLineNumber": 150,
      "endLineNumber": 150
    }
  },
  {
    "content": "means this is untrue, however. Unfortunately, {{jsxref(\"Object.is\")}} has to be thought of in terms of its specific characteristics, rather than its looseness or strictness with regard to the equality operators.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 18,
      "totalChunks": 30,
      "startLineNumber": 150,
      "endLineNumber": 150
    }
  },
  {
    "content": "| x                   | y                   | `==`       | `===`      | `Object.is` | `SameValueZero` |\n| ------------------- | ------------------- | ---------- | ---------- | ----------- | --------------- |\n| `undefined`         | `undefined`         | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `null`              | `null`              | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `true`              | `true`              | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `false`             | `false`             | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `'foo'`             | `'foo'`             | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `0`                 | `0`                 | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `+0`                | `-0`                | `✅ true`  | `✅ true`  | `❌ false`  | `✅ true`       |",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 19,
      "totalChunks": 30,
      "startLineNumber": 152,
      "endLineNumber": 160
    }
  },
  {
    "content": "| `0`                 | `0`                 | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `+0`                | `-0`                | `✅ true`  | `✅ true`  | `❌ false`  | `✅ true`       |\n| `+0`                | `0`                 | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `-0`                | `0`                 | `✅ true`  | `✅ true`  | `❌ false`  | `✅ true`       |\n| `0n`                | `-0n`               | `✅ true`  | `✅ true`  | `✅ true`   | `✅ true`       |\n| `0`                 | `false`             | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `\"\"`                | `false`             | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `\"\"`                | `0`                 | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `'0'`               | `0`                 | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `'17'`              | `17`                | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 20,
      "totalChunks": 30,
      "startLineNumber": 159,
      "endLineNumber": 168
    }
  },
  {
    "content": "| `'0'`               | `0`                 | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `'17'`              | `17`                | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `[1, 2]`            | `'1,2'`             | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `new String('foo')` | `'foo'`             | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `null`              | `undefined`         | `✅ true`  | `❌ false` | `❌ false`  | `❌ false`      |\n| `null`              | `false`             | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `undefined`         | `false`             | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `{ foo: 'bar' }`    | `{ foo: 'bar' }`    | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `new String('foo')` | `new String('foo')` | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `0`                 | `null`              | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 21,
      "totalChunks": 30,
      "startLineNumber": 167,
      "endLineNumber": 176
    }
  },
  {
    "content": "| `new String('foo')` | `new String('foo')` | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `0`                 | `null`              | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `0`                 | `NaN`               | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `'foo'`             | `NaN`               | `❌ false` | `❌ false` | `❌ false`  | `❌ false`      |\n| `NaN`               | `NaN`               | `❌ false` | `❌ false` | `✅ true`   | `✅ true`       |",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing equality methods",
      "chunkIndex": 22,
      "totalChunks": 30,
      "startLineNumber": 175,
      "endLineNumber": 179
    }
  },
  {
    "content": "### When to use Object.is() versus triple equals\n\nIn general, the only time {{jsxref(\"Object.is\")}}'s special behavior towards zeros is likely to be of interest is in the pursuit of certain meta-programming schemes, especially regarding property descriptors, when it is desirable for your work to mirror some of the characteristics of {{jsxref(\"Object.defineProperty\")}}. If your use case does not require this, it is suggested to avoid {{jsxref(\"Object.is\")}} and use [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) instead. Even if your requirements involve having comparisons between two {{jsxref(\"NaN\")}} values evaluate to `true`, generally it is easier to special-case the {{jsxref(\"NaN\")}} checks (using the {{jsxref(\"isNaN\")}} method available from previous versions of ECMAScript) than it is to work out how surrounding computations might affect the sign of any zeros you encounter in your comparison.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When to use Object.is() versus triple equals",
      "chunkIndex": 23,
      "totalChunks": 30,
      "startLineNumber": 181,
      "endLineNumber": 183
    }
  },
  {
    "content": "Here's a non-exhaustive list of built-in methods and operators that might cause a distinction between `-0` and `+0` to manifest itself in your code:\n\n- [`-` (unary negation)](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)\n  - : Consider the following example:\n\n    ```js\n    const stoppingForce = obj.mass * -obj.velocity;\n    ```\n\n    If `obj.velocity` is `0` (or computes to `0`), a `-0` is introduced at that place and propagates out into `stoppingForce`.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When to use Object.is() versus triple equals",
      "chunkIndex": 24,
      "totalChunks": 30,
      "startLineNumber": 185,
      "endLineNumber": 194
    }
  },
  {
    "content": "- {{jsxref(\"Math.atan2\")}}, {{jsxref(\"Math.ceil\")}}, {{jsxref(\"Math.pow\")}}, {{jsxref(\"Math.round\")}}\n  - : In some cases, it's possible for a `-0` to be introduced into an expression as a return value of these methods even when no `-0` exists as one of the parameters. For example, using {{jsxref(\"Math.pow\")}} to raise {{jsxref(\"Infinity\", \"-Infinity\")}} to the power of any negative, odd exponent evaluates to `-0`. Refer to the documentation for the individual methods.\n- {{jsxref(\"Math.floor\")}}, {{jsxref(\"Math.max\")}}, {{jsxref(\"Math.min\")}}, {{jsxref(\"Math.sin\")}}, {{jsxref(\"Math.sqrt\")}}, {{jsxref(\"Math.tan\")}}\n  - : It's possible to get a `-0` return value out of these methods in some cases where a `-0` exists as one of the parameters. E.g., `Math.min(-0, +0)` evaluates to `-0`. Refer to the documentation for the individual methods.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When to use Object.is() versus triple equals",
      "chunkIndex": 25,
      "totalChunks": 30,
      "startLineNumber": 196,
      "endLineNumber": 199
    }
  },
  {
    "content": "- [`~`](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT), [`<<`](/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift), [`>>`](/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)\n  - : Each of these operators uses the ToInt32 algorithm internally. Since there is only one representation for 0 in the internal 32-bit integer type, `-0` will not survive a round trip after an inverse operation. E.g., both `Object.is(~~(-0), -0)` and `Object.is(-0 << 2 >> 2, -0)` evaluate to `false`.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When to use Object.is() versus triple equals",
      "chunkIndex": 26,
      "totalChunks": 30,
      "startLineNumber": 200,
      "endLineNumber": 201
    }
  },
  {
    "content": "Relying on {{jsxref(\"Object.is\")}} when the sign of zeros is not taken into account can be hazardous. Of course, when the intent is to distinguish between `-0` and `+0`, it does exactly what's desired.",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When to use Object.is() versus triple equals",
      "chunkIndex": 27,
      "totalChunks": 30,
      "startLineNumber": 203,
      "endLineNumber": 203
    }
  },
  {
    "content": "### Caveat: Object.is() and NaN\n\nThe {{jsxref(\"Object.is\")}} specification treats all instances of {{jsxref(\"NaN\")}} as the same object. However, since [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) are available, we can have distinct floating point representations of `NaN` which don't behave identically in all contexts. For example:\n\n```js\nconst f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);\nconst b2f = (x) => new Float64Array(x.buffer)[0];\n// Get a byte representation of NaN\nconst n = f2b(NaN);\n// Change the first bit, which is the sign bit and doesn't matter for NaN\nn[0] = 1;\nconst nan2 = b2f(n);\nconsole.log(nan2); // NaN\nconsole.log(Object.is(nan2, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan2)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]\n```",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Caveat: Object.is() and NaN",
      "chunkIndex": 28,
      "totalChunks": 30,
      "startLineNumber": 205,
      "endLineNumber": 221
    }
  },
  {
    "content": "## See also\n\n- [JS Comparison Table](https://dorey.github.io/JavaScript-Equality-Table/) by [dorey](https://github.com/dorey)",
    "metadata": {
      "source": "equality_comparisons_and_sameness/index.md",
      "documentSlug": "Web/JavaScript/Guide/Equality_comparisons_and_sameness",
      "documentTitle": "Equality comparisons and sameness",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 29,
      "totalChunks": 30,
      "startLineNumber": 223,
      "endLineNumber": 225
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Functions\", \"Web/JavaScript/Guide/Numbers_and_strings\")}}\n\nThis chapter describes JavaScript's expressions and operators, including assignment, comparison, arithmetic, bitwise, logical, string, ternary and more.\n\nAt a high level, an _expression_ is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely _evaluate_.\n\nThe expression `x = 7` is an example of the first type. This expression uses the `=` _operator_ to assign the value seven to the variable `x`. The expression itself evaluates to `7`.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 78,
      "startLineNumber": 8,
      "endLineNumber": 14
    }
  },
  {
    "content": "The expression `x = 7` is an example of the first type. This expression uses the `=` _operator_ to assign the value seven to the variable `x`. The expression itself evaluates to `7`.\n\nThe expression `3 + 4` is an example of the second type. This expression uses the `+` operator to add `3` and `4` together and produces a value, `7`. However, if it's not eventually part of a bigger construct (for example, a [variable declaration](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations) like `const z = 3 + 4`), its result will be immediately discarded — this is usually a programmer mistake because the evaluation doesn't produce any effects.\n\nAs the examples above also illustrate, all complex expressions are joined by _operators_, such as `=` and `+`. In this section, we will introduce the following operators:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 78,
      "startLineNumber": 14,
      "endLineNumber": 18
    }
  },
  {
    "content": "As the examples above also illustrate, all complex expressions are joined by _operators_, such as `=` and `+`. In this section, we will introduce the following operators:\n\n- [Assignment operators](#assignment_operators)\n- [Comparison operators](#comparison_operators)\n- [Arithmetic operators](#arithmetic_operators)\n- [Bitwise operators](#bitwise_operators)\n- [Logical operators](#logical_operators)\n- [BigInt operators](#bigint_operators)\n- [String operators](#string_operators)\n- [Conditional (ternary) operator](#conditional_ternary_operator)\n- [Comma operator](#comma_operator)\n- [Unary operators](#unary_operators)\n- [Relational operators](#relational_operators)\n\nThese operators join operands either formed by higher-precedence operators or one of the [basic expressions](#basic_expressions). A complete and detailed list of operators and expressions is also available in the [reference](/en-US/docs/Web/JavaScript/Reference/Operators).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 2,
      "totalChunks": 78,
      "startLineNumber": 18,
      "endLineNumber": 32
    }
  },
  {
    "content": "The _precedence_ of operators determines the order they are applied when evaluating an expression. For example:\n\n```js\nconst x = 1 + 2 * 3;\nconst y = 2 * 3 + 1;\n```\n\nDespite `*` and `+` coming in different orders, both expressions would result in `7` because `*` has precedence over `+`, so the `*`-joined expression will always be evaluated first. You can override operator precedence by using parentheses (which creates a [grouped expression](#grouping_operator) — the basic expression). To see a complete table of operator precedence as well as various caveats, see the [Operator Precedence Reference](/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table) page.\n\nJavaScript has both _binary_ and _unary_ operators, and one special ternary operator, the conditional operator.\nA binary operator requires two operands, one before the operator and one after the operator:\n\n```plain\noperand1 operator operand2\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 3,
      "totalChunks": 78,
      "startLineNumber": 34,
      "endLineNumber": 48
    }
  },
  {
    "content": "```plain\noperand1 operator operand2\n```\n\nFor example, `3 + 4` or `x * y`. This form is called an _infix_ binary operator, because the operator is placed between two operands. All binary operators in JavaScript are infix.\n\nA unary operator requires a single operand, either before or after the operator:\n\n```plain\noperator operand\noperand operator\n```\n\nFor example, `x++` or `++x`. The `operator operand` form is called a _prefix_ unary operator, and the `operand operator` form is called a _postfix_ unary operator. `++` and `--` are the only postfix operators in JavaScript — all other operators, like `!`, `typeof`, etc. are prefix.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 4,
      "totalChunks": 78,
      "startLineNumber": 46,
      "endLineNumber": 59
    }
  },
  {
    "content": "## Assignment operators\n\nAn assignment operator assigns a value to its left operand based on the value of its right operand.\nThe simple assignment operator is equal (`=`), which assigns the value of its right operand to its left operand.\nThat is, `x = f()` is an assignment expression that assigns the value of `f()` to `x`.\n\nThere are also compound assignment operators that are shorthand for the operations listed in the following table:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assignment operators",
      "chunkIndex": 5,
      "totalChunks": 78,
      "startLineNumber": 61,
      "endLineNumber": 67
    }
  },
  {
    "content": "| Name                                                                                                              | Shorthand operator | Meaning            |\n| ----------------------------------------------------------------------------------------------------------------- | ------------------ | ------------------ |\n| [Assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment)                                           | `x = f()`          | `x = f()`          |\n| [Addition assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment)                         | `x += f()`         | `x = x + f()`      |\n| [Subtraction assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment)                   | `x -= f()`         | `x = x - f()`      |\n| [Multiplication assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment)             | `x *= f()`         | `x = x * f()`      |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assignment operators",
      "chunkIndex": 6,
      "totalChunks": 78,
      "startLineNumber": 69,
      "endLineNumber": 74
    }
  },
  {
    "content": "| [Multiplication assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment)             | `x *= f()`         | `x = x * f()`      |\n| [Division assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment)                         | `x /= f()`         | `x = x / f()`      |\n| [Remainder assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment)                       | `x %= f()`         | `x = x % f()`      |\n| [Exponentiation assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment)             | `x **= f()`        | `x = x ** f()`     |\n| [Left shift assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment)                     | `x <<= f()`        | `x = x << f()`     |\n| [Right shift assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment)                   | `x >>= f()`        | `x = x >> f()`     |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assignment operators",
      "chunkIndex": 7,
      "totalChunks": 78,
      "startLineNumber": 74,
      "endLineNumber": 79
    }
  },
  {
    "content": "| [Right shift assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment)                   | `x >>= f()`        | `x = x >> f()`     |\n| [Unsigned right shift assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment) | `x >>>= f()`       | `x = x >>> f()`    |\n| [Bitwise AND assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment)                   | `x &= f()`         | `x = x & f()`      |\n| [Bitwise XOR assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment)                   | `x ^= f()`         | `x = x ^ f()`      |\n| [Bitwise OR assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment)                     | `x \\|= f()`        | `x = x \\| f()`     |\n| [Logical AND assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment)                   | `x &&= f()`        | `x && (x = f())`   |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assignment operators",
      "chunkIndex": 8,
      "totalChunks": 78,
      "startLineNumber": 79,
      "endLineNumber": 84
    }
  },
  {
    "content": "| [Logical AND assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment)                   | `x &&= f()`        | `x && (x = f())`   |\n| [Logical OR assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment)                     | `x \\|\\|= f()`      | `x \\|\\| (x = f())` |\n| [Nullish coalescing assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment)     | `x ??= f()`        | `x ?? (x = f())`   |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assignment operators",
      "chunkIndex": 9,
      "totalChunks": 78,
      "startLineNumber": 84,
      "endLineNumber": 86
    }
  },
  {
    "content": "### Assigning to properties\n\nIf an expression evaluates to an [object](/en-US/docs/Web/JavaScript/Guide/Working_with_objects), then the left-hand side of an assignment expression may make assignments to properties of that expression.\nFor example:\n\n```js\nconst obj = {};\n\nobj.x = 3;\nconsole.log(obj.x); // Prints 3.\nconsole.log(obj); // Prints { x: 3 }.\n\nconst key = \"y\";\nobj[key] = 5;\nconsole.log(obj[key]); // Prints 5.\nconsole.log(obj); // Prints { x: 3, y: 5 }.\n```\n\nFor more information about objects, read [Working with Objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects).\n\nIf an expression does not evaluate to an object, then assignments to properties of that expression do not assign:\n\n```js\nconst val = 0;\nval.x = 3;\n\nconsole.log(val.x); // Prints undefined.\nconsole.log(val); // Prints 0.\n```\n\nIn [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode#converting_mistakes_into_errors), the code above throws, because one cannot assign properties to primitives.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assigning to properties",
      "chunkIndex": 10,
      "totalChunks": 78,
      "startLineNumber": 88,
      "endLineNumber": 118
    }
  },
  {
    "content": "In [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode#converting_mistakes_into_errors), the code above throws, because one cannot assign properties to primitives.\n\nIt is an error to assign values to unmodifiable properties or to properties of an expression without properties (`null` or `undefined`).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assigning to properties",
      "chunkIndex": 11,
      "totalChunks": 78,
      "startLineNumber": 118,
      "endLineNumber": 120
    }
  },
  {
    "content": "### Destructuring\n\nFor more complex assignments, the [destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring) syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that mirrors the construction of array and\nobject literals.\n\nWithout destructuring, it takes multiple statements to extract values from arrays and objects:\n\n```js\nconst foo = [\"one\", \"two\", \"three\"];\n\nconst one = foo[0];\nconst two = foo[1];\nconst three = foo[2];\n```\n\nWith destructuring, you can extract multiple values into distinct variables using a single statement:\n\n```js\nconst [one, two, three] = foo;\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Destructuring",
      "chunkIndex": 12,
      "totalChunks": 78,
      "startLineNumber": 122,
      "endLineNumber": 141
    }
  },
  {
    "content": "### Evaluation and nesting\n\nIn general, assignments are used within a variable declaration (i.e., with [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](/en-US/docs/Web/JavaScript/Reference/Statements/var)) or as standalone statements.\n\n```js\n// Declares a variable x and initializes it to the result of f().\n// The result of the x = f() assignment expression is discarded.\nlet x = f();\n\nx = g(); // Reassigns the variable x to the result of g().\n```\n\nHowever, like other expressions, assignment expressions like `x = f()` evaluate into a result value.\nAlthough this result value is usually not used, it can then be used by another expression.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation and nesting",
      "chunkIndex": 13,
      "totalChunks": 78,
      "startLineNumber": 143,
      "endLineNumber": 156
    }
  },
  {
    "content": "However, like other expressions, assignment expressions like `x = f()` evaluate into a result value.\nAlthough this result value is usually not used, it can then be used by another expression.\n\nChaining assignments or nesting assignments in other expressions can result in surprising behavior.\nFor this reason, some JavaScript style guides [discourage chaining or nesting assignments](https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment).\nNevertheless, assignment chaining and nesting may occur sometimes, so it is important to be able to understand how they work.\n\nBy chaining or nesting an assignment expression, its result can itself be assigned to another variable.\nIt can be logged, it can be put inside an array literal or function call, and so on.\n\n```js-nolint\nlet x;\nconst y = (x = f()); // Or equivalently: const y = x = f();\nconsole.log(y); // Logs the return value of the assignment x = f().\n\nconsole.log(x = f()); // Logs the return value directly.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation and nesting",
      "chunkIndex": 14,
      "totalChunks": 78,
      "startLineNumber": 155,
      "endLineNumber": 170
    }
  },
  {
    "content": "console.log(x = f()); // Logs the return value directly.\n\n// An assignment expression can be nested in any place\n// where expressions are generally allowed,\n// such as array literals' elements or as function calls' arguments.\nconsole.log([0, x = f(), 0]);\nconsole.log(f(0, x = f(), 0));\n```\n\nThe evaluation result matches the expression to the right of the `=` sign in the\n\"Meaning\" column of the table above. That means that `x = f()` evaluates into\nwhatever `f()`'s result is, `x += f()` evaluates into the resulting sum `x + f()`,\n`x **= f()` evaluates into the resulting power `x ** f()`, and so on.\n\nIn the case of logical assignments, `x &&= f()`,\n`x ||= f()`, and `x ??= f()`, the return value is that of the\nlogical operation without the assignment, so `x && f()`,\n`x || f()`, and `x ?? f()`, respectively.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation and nesting",
      "chunkIndex": 15,
      "totalChunks": 78,
      "startLineNumber": 170,
      "endLineNumber": 187
    }
  },
  {
    "content": "When chaining these expressions without parentheses or other grouping operators\nlike array literals, the assignment expressions are **grouped right to left**\n(they are [right-associative](/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#precedence_and_associativity)), but they are **evaluated left to right**.\n\nNote that, for all assignment operators other than `=` itself,\nthe resulting values are always based on the operands' values _before_\nthe operation.\n\nFor example, assume that the following functions `f` and `g`\nand the variables `x` and `y` have been declared:\n\n```js\nfunction f() {\n  console.log(\"F!\");\n  return 2;\n}\nfunction g() {\n  console.log(\"G!\");\n  return 3;\n}\nlet x, y;\n```\n\nConsider these three examples:\n\n```js-nolint\ny = x = f();\ny = [f(), x = g()];\nx[f()] = g();\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation and nesting",
      "chunkIndex": 16,
      "totalChunks": 78,
      "startLineNumber": 189,
      "endLineNumber": 218
    }
  },
  {
    "content": "#### Evaluation example 1\n\n`y = x = f()` is equivalent to `y = (x = f())`,\nbecause the assignment operator `=` is [right-associative](/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#precedence_and_associativity).\nHowever, it evaluates from left to right:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 1",
      "chunkIndex": 17,
      "totalChunks": 78,
      "startLineNumber": 220,
      "endLineNumber": 224
    }
  },
  {
    "content": "1. The assignment expression `y = x = f()` starts to evaluate.\n   1. The `y` on this assignment's left-hand side evaluates\n      into a reference to the variable named `y`.\n   2. The assignment expression `x = f()` starts to evaluate.\n      1. The `x` on this assignment's left-hand side evaluates\n         into a reference to the variable named `x`.\n      2. The function call `f()` prints \"F!\" to the console and\n         then evaluates to the number `2`.\n      3. That `2` result from `f()` is assigned to `x`.\n   3. The assignment expression `x = f()` has now finished evaluating;\n      its result is the new value of `x`, which is `2`.\n   4. That `2` result in turn is also assigned to `y`.\n2. The assignment expression `y = x = f()` has now finished evaluating;\n   its result is the new value of `y` – which happens to be `2`.\n   `x` and `y` are assigned to `2`,\n   and the console has printed \"F!\".",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 1",
      "chunkIndex": 18,
      "totalChunks": 78,
      "startLineNumber": 226,
      "endLineNumber": 241
    }
  },
  {
    "content": "#### Evaluation example 2\n\n`y = [ f(), x = g() ]` also evaluates from left to right:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 2",
      "chunkIndex": 19,
      "totalChunks": 78,
      "startLineNumber": 243,
      "endLineNumber": 245
    }
  },
  {
    "content": "1. The assignment expression `y = [ f(), x = g() ]` starts to evaluate.\n   1. The `y` on this assignment's left-hand evaluates\n      into a reference to the variable named `y`.\n   2. The inner array literal `[ f(), x = g() ]` starts to evaluate.\n      1. The function call `f()` prints \"F!\" to the console and\n         then evaluates to the number `2`.\n      2. The assignment expression `x = g()` starts to evaluate.\n         1. The `x` on this assignment's left-hand side evaluates\n            into a reference to the variable named `x`.\n         2. The function call `g()` prints \"G!\" to the console and\n            then evaluates to the number `3`.\n         3. That `3` result from `g()` is assigned to `x`.\n      3. The assignment expression `x = g()` has now finished evaluating;\n         its result is the new value of `x`, which is `3`.\n         That `3` result becomes the next element\n         in the inner array literal (after the `2` from the `f()`).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 2",
      "chunkIndex": 20,
      "totalChunks": 78,
      "startLineNumber": 247,
      "endLineNumber": 262
    }
  },
  {
    "content": "its result is the new value of `x`, which is `3`.\n         That `3` result becomes the next element\n         in the inner array literal (after the `2` from the `f()`).\n   3. The inner array literal `[ f(), x = g() ]`\n      has now finished evaluating;\n      its result is an array with two values: `[ 2, 3 ]`.\n   4. That `[ 2, 3 ]` array is now assigned to `y`.\n2. The assignment expression `y = [ f(), x = g() ]` has\n   now finished evaluating;\n   its result is the new value of `y` – which happens to be `[ 2, 3 ]`.\n   `x` is now assigned to `3`,\n   `y` is now assigned to `[ 2, 3 ]`,\n   and the console has printed \"F!\" then \"G!\".",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 2",
      "chunkIndex": 21,
      "totalChunks": 78,
      "startLineNumber": 260,
      "endLineNumber": 272
    }
  },
  {
    "content": "#### Evaluation example 3\n\n`x[f()] = g()` also evaluates from left to right.\n(This example assumes that `x` is already assigned to some object.\nFor more information about objects, read [Working with Objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects).)",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 3",
      "chunkIndex": 22,
      "totalChunks": 78,
      "startLineNumber": 274,
      "endLineNumber": 278
    }
  },
  {
    "content": "1. The assignment expression `x[f()] = g()` starts to evaluate.\n   1. The `x[f()]` property access on this assignment's left-hand\n      starts to evaluate.\n      1. The `x` in this property access evaluates\n         into a reference to the variable named `x`.\n      2. Then the function call `f()` prints \"F!\" to the console and\n         then evaluates to the number `2`.\n   2. The `x[f()]` property access on this assignment\n      has now finished evaluating;\n      its result is a variable property reference: `x[2]`.\n   3. Then the function call `g()` prints \"G!\" to the console and\n      then evaluates to the number `3`.\n   4. That `3` is now assigned to `x[2]`.\n      (This step will succeed only if `x` is assigned to an [object](/en-US/docs/Web/JavaScript/Guide/Working_with_objects).)\n2. The assignment expression `x[f()] = g()` has now finished evaluating;\n   its result is the new value of `x[2]` – which happens to be `3`.\n   `x[2]` is now assigned to `3`,",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 3",
      "chunkIndex": 23,
      "totalChunks": 78,
      "startLineNumber": 280,
      "endLineNumber": 296
    }
  },
  {
    "content": "2. The assignment expression `x[f()] = g()` has now finished evaluating;\n   its result is the new value of `x[2]` – which happens to be `3`.\n   `x[2]` is now assigned to `3`,\n   and the console has printed \"F!\" then \"G!\".",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Evaluation example 3",
      "chunkIndex": 24,
      "totalChunks": 78,
      "startLineNumber": 294,
      "endLineNumber": 297
    }
  },
  {
    "content": "### Avoid assignment chains\n\nChaining assignments or nesting assignments in other expressions can\nresult in surprising behavior. For this reason,\n[chaining assignments in the same statement is discouraged](https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment).\n\nIn particular, putting a variable chain in a [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const), [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let), or [`var`](/en-US/docs/Web/JavaScript/Reference/Statements/var) statement often does _not_ work. Only the outermost/leftmost variable would get declared; other variables within the assignment chain are _not_ declared by the `const`/`let`/`var` statement.\nFor example:\n\n```js-nolint\nconst z = y = x = f();\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Avoid assignment chains",
      "chunkIndex": 25,
      "totalChunks": 78,
      "startLineNumber": 299,
      "endLineNumber": 310
    }
  },
  {
    "content": "```js-nolint\nconst z = y = x = f();\n```\n\nThis statement seemingly declares the variables `x`, `y`, and `z`.\nHowever, it only actually declares the variable `z`.\n`y` and `x` are either invalid references to nonexistent variables (in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode)) or, worse, would implicitly create [global variables](/en-US/docs/Glossary/Global_variable) for `x` and `y` in [sloppy mode](/en-US/docs/Glossary/Sloppy_mode).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Avoid assignment chains",
      "chunkIndex": 26,
      "totalChunks": 78,
      "startLineNumber": 308,
      "endLineNumber": 314
    }
  },
  {
    "content": "## Comparison operators\n\nA comparison operator compares its operands and returns a logical value based on whether the comparison is true.\nThe operands can be numerical, string, logical, or [object](/en-US/docs/Web/JavaScript/Guide/Working_with_objects) values.\nStrings are compared based on standard lexicographical ordering, using Unicode values.\nIn most cases, if the two operands are not of the same type, JavaScript attempts to convert them to an appropriate type for the comparison.\nThis behavior generally results in comparing the operands numerically.\nThe sole exceptions to type conversion within comparisons involve the `===` and `!==` operators, which perform strict equality and inequality comparisons.\nThese operators do not attempt to convert the operands to compatible types before checking equality.\nThe following table describes the comparison operators in terms of this sample code:\n\n```js\nconst var1 = 3;\nconst var2 = 4;\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 27,
      "totalChunks": 78,
      "startLineNumber": 316,
      "endLineNumber": 330
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <caption>\n    Comparison operators\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Operator</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Examples returning true</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">Equal</a> (<code>==</code>)\n      </td>\n      <td>Returns <code>true</code> if the operands are equal.</td>\n      <td>\n        <code>3 == var1</code>\n        <p><code>\"3\" == var1</code></p>\n        <code>3 == '3'</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">Not equal</a> (<code>!=</code>)\n      </td>\n      <td>Returns <code>true</code> if the operands are not equal.</td>\n      <td>\n        <code>var1 != 4<br />var2 != \"3\"</code>\n      </td>\n    </tr>\n    <tr>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 28,
      "totalChunks": 78,
      "startLineNumber": 332,
      "endLineNumber": 365
    }
  },
  {
    "content": "</td>\n      <td>Returns <code>true</code> if the operands are not equal.</td>\n      <td>\n        <code>var1 != 4<br />var2 != \"3\"</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equal</a> (<code>===</code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the operands are equal and of the same\n        type. See also {{jsxref(\"Object.is\")}} and\n        <a href=\"/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness\">sameness in JS</a>.\n      </td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict not equal</a> (<code>!==</code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the operands are of the same type but not equal, or are of different type.\n      </td>\n      <td>\n        <code>var1 !== \"3\"<br />3 !== '3'</code>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 29,
      "totalChunks": 78,
      "startLineNumber": 358,
      "endLineNumber": 386
    }
  },
  {
    "content": "</td>\n      <td>\n        <code>var1 !== \"3\"<br />3 !== '3'</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than</a> (<code>></code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the left operand is greater than the right operand.\n      </td>\n      <td>\n        <code>var2 > var1<br />\"12\" > 2</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal</a>\n        (<code>>=</code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the left operand is greater than or equal to the right operand.\n      </td>\n      <td>\n        <code>var2 >= var1<br />var1 >= 3</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than</a>\n        (<code>&#x3C;</code>)\n      </td>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 30,
      "totalChunks": 78,
      "startLineNumber": 381,
      "endLineNumber": 414
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than</a>\n        (<code>&#x3C;</code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the left operand is less than the right operand.\n      </td>\n      <td>\n        <code>var1 &#x3C; var2<br />\"2\" &#x3C; 12</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal</a>\n        (<code>&#x3C;=</code>)\n      </td>\n      <td>\n        Returns <code>true</code> if the left operand is less than or equal to the right operand.\n      </td>\n      <td>\n        <code>var1 &#x3C;= var2<br />var2 &#x3C;= 5</code>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 31,
      "totalChunks": 78,
      "startLineNumber": 407,
      "endLineNumber": 434
    }
  },
  {
    "content": "> [!NOTE]\n> `=>` is not a comparison operator but rather is the notation\n> for [Arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparison operators",
      "chunkIndex": 32,
      "totalChunks": 78,
      "startLineNumber": 436,
      "endLineNumber": 438
    }
  },
  {
    "content": "## Arithmetic operators\n\nAn arithmetic operator takes numerical values (either literals or variables) as their operands and returns a single numerical value.\nThe standard arithmetic operators are addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`).\nThese operators work as they do in most other programming languages when used with floating point numbers (in particular, note that division by zero produces {{jsxref(\"Infinity\")}}). For example:\n\n```js\n1 / 2; // 0.5\n1 / 2 === 1.0 / 2.0; // this is true\n```\n\nIn addition to the standard arithmetic operations (`+`, `-`, `*`, `/`), JavaScript provides the arithmetic operators listed in the following table:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arithmetic operators",
      "chunkIndex": 33,
      "totalChunks": 78,
      "startLineNumber": 440,
      "endLineNumber": 451
    }
  },
  {
    "content": "<table class=\"fullwidth-table\">\n  <caption>\n    Arithmetic operators\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Operator</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder</a> (<code>%</code>)\n      </td>\n      <td>\n        Binary operator. Returns the integer remainder of dividing the two operands.\n      </td>\n      <td>12 % 5 returns 2.</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Increment\">Increment</a> (<code>++</code>)\n      </td>\n      <td>\n        Unary operator. Adds one to its operand. If used as a prefix operator\n        (<code>++x</code>), returns the value of its operand after adding one;\n        if used as a postfix operator (<code>x++</code>), returns the value of\n        its operand before adding one.\n      </td>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arithmetic operators",
      "chunkIndex": 34,
      "totalChunks": 78,
      "startLineNumber": 453,
      "endLineNumber": 484
    }
  },
  {
    "content": "if used as a postfix operator (<code>x++</code>), returns the value of\n        its operand before adding one.\n      </td>\n      <td>\n        If <code>x</code> is 3, then <code>++x</code> sets <code>x</code> to 4\n        and returns 4, whereas <code>x++</code> returns 3 and, only then, sets <code>x</code> to 4.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement</a> (<code>--</code>)\n      </td>\n      <td>\n        Unary operator. Subtracts one from its operand.\n        The return value is analogous to that for the increment operator.\n      </td>\n      <td>\n        If <code>x</code> is 3, then <code>--x</code> sets <code>x</code> to 2\n        and returns 2, whereas <code>x--</code> returns 3 and, only then, sets <code>x</code> to 2.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation</a> (<code>-</code>)\n      </td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arithmetic operators",
      "chunkIndex": 35,
      "totalChunks": 78,
      "startLineNumber": 481,
      "endLineNumber": 505
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation</a> (<code>-</code>)\n      </td>\n      <td>Unary operator. Returns the negation of its operand.</td>\n      <td>If <code>x</code> is 3, then <code>-x</code> returns -3.</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus</a> (<code>+</code>)\n      </td>\n      <td>\n        Unary operator. Attempts to <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion\">convert the operand to a number</a>, if it is not already.\n      </td>\n      <td>\n        <p><code>+\"3\"</code> returns <code>3</code>.</p>\n        <p><code>+true</code> returns <code>1</code>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation operator</a> (<code>**</code>)\n      </td>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arithmetic operators",
      "chunkIndex": 36,
      "totalChunks": 78,
      "startLineNumber": 500,
      "endLineNumber": 525
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation operator</a> (<code>**</code>)\n      </td>\n      <td>\n        Calculates the <code>base</code> to the <code>exponent</code> power,\n        that is, <code>base^exponent</code>\n      </td>\n      <td>\n        <code>2 ** 3</code> returns <code>8</code>.<br /><code>10 ** -1</code>\n        returns <code>0.1</code>.\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arithmetic operators",
      "chunkIndex": 37,
      "totalChunks": 78,
      "startLineNumber": 519,
      "endLineNumber": 535
    }
  },
  {
    "content": "## Bitwise operators\n\nA bitwise operator treats their operands as a set of 32 bits (zeros and ones), rather\nthan as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has\na binary representation of 1001. Bitwise operators perform their operations on such\nbinary representations, but they return standard JavaScript numerical values.\n\nThe following table summarizes JavaScript's bitwise operators.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise operators",
      "chunkIndex": 38,
      "totalChunks": 78,
      "startLineNumber": 537,
      "endLineNumber": 544
    }
  },
  {
    "content": "| Operator                                                                                     | Usage     | Description                                                                                                                                                             |\n| -------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Bitwise AND](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND)                    | `a & b`   | Returns a one in each bit position for which the corresponding bits of both operands are ones.                                                                          |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise operators",
      "chunkIndex": 39,
      "totalChunks": 78,
      "startLineNumber": 546,
      "endLineNumber": 548
    }
  },
  {
    "content": "| [Bitwise OR](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR)                      | `a \\| b`  | Returns a zero in each bit position for which the corresponding bits of both operands are zeros.                                                                        |\n| [Bitwise XOR](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR)                    | `a ^ b`   | Returns a zero in each bit position for which the corresponding bits are the same. [Returns a one in each bit position for which the corresponding bits are different.] |\n| [Bitwise NOT](/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT)                    | `~ a`     | Inverts the bits of its operand.                                                                                                                                        |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise operators",
      "chunkIndex": 40,
      "totalChunks": 78,
      "startLineNumber": 549,
      "endLineNumber": 551
    }
  },
  {
    "content": "| [Left shift](/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift)                      | `a << b`  | Shifts `a` in binary representation `b` bits to the left, shifting in zeros from the right.                                                                             |\n| [Sign-propagating right shift](/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift)   | `a >> b`  | Shifts `a` in binary representation `b` bits to the right, discarding bits shifted off.                                                                                 |\n| [Zero-fill right shift](/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) | `a >>> b` | Shifts `a` in binary representation `b` bits to the right, discarding bits shifted off, and shifting in zeros from the left.                                            |",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise operators",
      "chunkIndex": 41,
      "totalChunks": 78,
      "startLineNumber": 552,
      "endLineNumber": 554
    }
  },
  {
    "content": "### Bitwise logical operators\n\nConceptually, the bitwise logical operators work as follows:\n\n- The operands are converted to thirty-two-bit integers and expressed by a series of bits (zeros and ones).\n  Numbers with more than 32 bits get their most significant bits discarded.\n  For example, the following integer with more than 32 bits will be converted to a 32-bit integer:\n\n  ```plain\n  Before: 1110 0110 1111 1010 0000 0000 0000 0110 0000 0000 0001\n  After:                 1010 0000 0000 0000 0110 0000 0000 0001\n  ```\n\n- Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on.\n- The operator is applied to each pair of bits, and the result is constructed bitwise.\n\nFor example, the binary representation of nine is 1001, and the binary representation of fifteen is 1111.\nSo, when the bitwise operators are applied to these values, the results are as follows:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise logical operators",
      "chunkIndex": 42,
      "totalChunks": 78,
      "startLineNumber": 556,
      "endLineNumber": 573
    }
  },
  {
    "content": "For example, the binary representation of nine is 1001, and the binary representation of fifteen is 1111.\nSo, when the bitwise operators are applied to these values, the results are as follows:\n\n| Expression | Result | Binary Description                                |\n| ---------- | ------ | ------------------------------------------------- |\n| `15 & 9`   | `9`    | `1111 & 1001 = 1001`                              |\n| `15 \\| 9`  | `15`   | `1111 \\| 1001 = 1111`                             |\n| `15 ^ 9`   | `6`    | `1111 ^ 1001 = 0110`                              |\n| `~15`      | `-16`  | `~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000` |\n| `~9`       | `-10`  | `~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110` |\n\nNote that all 32 bits are inverted using the Bitwise NOT operator, and that values with\nthe most significant (left-most) bit set to 1 represent negative numbers\n(two's-complement representation). `~x` evaluates to the same value that\n`-x - 1` evaluates to.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise logical operators",
      "chunkIndex": 43,
      "totalChunks": 78,
      "startLineNumber": 572,
      "endLineNumber": 586
    }
  },
  {
    "content": "### Bitwise shift operators\n\nThe bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be\nshifted.\nThe direction of the shift operation is controlled by the operator used.\n\nShift operators convert their operands to thirty-two-bit integers and return a result of either type {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}}: specifically, if the type\nof the left operand is {{jsxref(\"BigInt\")}}, they return {{jsxref(\"BigInt\")}};\notherwise, they return {{jsxref(\"Number\")}}.\n\nThe shift operators are listed in the following table.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise shift operators",
      "chunkIndex": 44,
      "totalChunks": 78,
      "startLineNumber": 588,
      "endLineNumber": 598
    }
  },
  {
    "content": "<table class=\"fullwidth-table\">\n  <caption>\n    Bitwise shift operators\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Operator</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift</a><br />(<code>&#x3C;&#x3C;</code>)\n      </td>\n      <td>\n        This operator shifts the first operand the specified number of bits to\n        the left. Excess bits shifted off to the left are discarded. Zero bits\n        are shifted in from the right.\n      </td>\n      <td>\n        <code>9&#x3C;&#x3C;2</code> yields 36, because 1001 shifted 2 bits to\n        the left becomes 100100, which is 36.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Sign-propagating right shift</a> (<code>>></code>)\n      </td>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise shift operators",
      "chunkIndex": 45,
      "totalChunks": 78,
      "startLineNumber": 600,
      "endLineNumber": 630
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">Sign-propagating right shift</a> (<code>>></code>)\n      </td>\n      <td>\n        This operator shifts the first operand the specified number of bits to\n        the right. Excess bits shifted off to the right are discarded. Copies of\n        the leftmost bit are shifted in from the left.\n      </td>\n      <td>\n        <code>9>>2</code> yields 2, because 1001 shifted 2 bits to the right\n        becomes 10, which is 2. Likewise, <code>-9>>2</code> yields -3, because the sign is preserved.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Zero-fill right shift</a> (<code>>>></code>)\n      </td>\n      <td>\n        This operator shifts the first operand the specified number of bits to\n        the right. Excess bits shifted off to the right are discarded. Zero bits",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise shift operators",
      "chunkIndex": 46,
      "totalChunks": 78,
      "startLineNumber": 624,
      "endLineNumber": 646
    }
  },
  {
    "content": "</td>\n      <td>\n        This operator shifts the first operand the specified number of bits to\n        the right. Excess bits shifted off to the right are discarded. Zero bits\n        are shifted in from the left.\n      </td>\n      <td>\n        <code>19>>>2</code> yields 4, because 10011 shifted 2 bits to the right\n        becomes 100, which is 4. For non-negative numbers, zero-fill right shift\n        and sign-propagating right shift yield the same result.\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Bitwise shift operators",
      "chunkIndex": 47,
      "totalChunks": 78,
      "startLineNumber": 643,
      "endLineNumber": 656
    }
  },
  {
    "content": "## Logical operators\n\nLogical operators are typically used with Boolean (logical) values; when they are, they return a Boolean value.\nHowever, the `&&`, `||`, and `??` operators actually return the value of one of the specified operands, so if these\noperators are used with non-Boolean values, they may return a non-Boolean value. As such, they are more adequately called \"value selection operators\".\nThe logical operators are described in the following table.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 48,
      "totalChunks": 78,
      "startLineNumber": 658,
      "endLineNumber": 663
    }
  },
  {
    "content": "<table class=\"fullwidth-table\">\n  <caption>\n    Logical operators\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Operator</th>\n      <th scope=\"col\">Usage</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND</a> (<code>&#x26;&#x26;</code>)\n      </td>\n      <td><code>expr1 &#x26;&#x26; expr2</code></td>\n      <td>\n        Returns <code>expr1</code> if it can be converted to <code>false</code>;\n        otherwise, returns <code>expr2</code>. Thus, when used with Boolean\n        values, <code>&#x26;&#x26;</code> returns <code>true</code> if both\n        operands are true; otherwise, returns <code>false</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR</a> (<code>||</code>)\n      </td>\n      <td><code>expr1 || expr2</code></td>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 49,
      "totalChunks": 78,
      "startLineNumber": 665,
      "endLineNumber": 694
    }
  },
  {
    "content": "<tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR</a> (<code>||</code>)\n      </td>\n      <td><code>expr1 || expr2</code></td>\n      <td>\n        Returns <code>expr1</code> if it can be converted to <code>true</code>;\n        otherwise, returns <code>expr2</code>. Thus, when used with Boolean\n        values, <code>||</code> returns <code>true</code> if either operand is\n        true; if both are false, returns <code>false</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\">Nullish coalescing operator</a> (<code>??</code>)\n      </td>\n      <td><code>expr1 ?? expr2</code></td>\n      <td>\n        Returns <code>expr1</code> if it is neither <code>null</code> nor\n        <code>undefined</code>; otherwise, returns <code>expr2</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 50,
      "totalChunks": 78,
      "startLineNumber": 689,
      "endLineNumber": 712
    }
  },
  {
    "content": "<td>\n        Returns <code>expr1</code> if it is neither <code>null</code> nor\n        <code>undefined</code>; otherwise, returns <code>expr2</code>.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT</a> (<code>!</code>)\n      </td>\n      <td><code>!expr</code></td>\n      <td>\n        Returns <code>false</code> if its single operand can be converted\n        to <code>true</code>; otherwise, returns <code>true</code>.\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 51,
      "totalChunks": 78,
      "startLineNumber": 706,
      "endLineNumber": 722
    }
  },
  {
    "content": "Examples of expressions that can be converted to `false` are those that evaluate to `null`, `0`, `0n`, `NaN`, the empty string (`\"\"`), or `undefined`.\n\nThe following code shows examples of the `&&` (logical AND) operator.\n\n```js\nconst a1 = true && true; // t && t returns true\nconst a2 = true && false; // t && f returns false\nconst a3 = false && true; // f && t returns false\nconst a4 = false && 3 === 4; // f && f returns false\nconst a5 = \"Cat\" && \"Dog\"; // t && t returns Dog\nconst a6 = false && \"Cat\"; // f && t returns false\nconst a7 = \"Cat\" && false; // t && f returns false\n```\n\nThe following code shows examples of the `||` (logical OR) operator.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 52,
      "totalChunks": 78,
      "startLineNumber": 724,
      "endLineNumber": 738
    }
  },
  {
    "content": "The following code shows examples of the `||` (logical OR) operator.\n\n```js\nconst o1 = true || true; // t || t returns true\nconst o2 = false || true; // f || t returns true\nconst o3 = true || false; // t || f returns true\nconst o4 = false || 3 === 4; // f || f returns false\nconst o5 = \"Cat\" || \"Dog\"; // t || t returns Cat\nconst o6 = false || \"Cat\"; // f || t returns Cat\nconst o7 = \"Cat\" || false; // t || f returns Cat\n```\n\nThe following code shows examples of the `??` (nullish coalescing) operator.\n\n```js\nconst n1 = null ?? 1; // 1\nconst n2 = undefined ?? 2; // 2\nconst n3 = false ?? 3; // false\nconst n4 = 0 ?? 4; // 0\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 53,
      "totalChunks": 78,
      "startLineNumber": 738,
      "endLineNumber": 757
    }
  },
  {
    "content": "```js\nconst n1 = null ?? 1; // 1\nconst n2 = undefined ?? 2; // 2\nconst n3 = false ?? 3; // false\nconst n4 = 0 ?? 4; // 0\n```\n\nNote how `??` works like `||`, but it only returns the second expression when the first one is \"[nullish](/en-US/docs/Glossary/Nullish)\", i.e., [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). `??` is a better alternative than `||` for setting defaults for values that might be `null` or `undefined`, in particular when values like `''` or `0` are valid values and the default should not apply.\n\nThe following code shows examples of the `!` (logical NOT) operator.\n\n```js\nconst n1 = !true; // !t returns false\nconst n2 = !false; // !f returns true\nconst n3 = !\"Cat\"; // !t returns false\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Logical operators",
      "chunkIndex": 54,
      "totalChunks": 78,
      "startLineNumber": 752,
      "endLineNumber": 767
    }
  },
  {
    "content": "### Short-circuit evaluation\n\nAs logical expressions are evaluated left to right, they are tested for possible\n\"short-circuit\" evaluation using the following rules:\n\n- `falsy && anything` is short-circuit evaluated to the falsy value.\n- `truthy || anything` is short-circuit evaluated to the truthy value.\n- `nonNullish ?? anything` is short-circuit evaluated to the non-nullish value.\n\nThe rules of logic guarantee that these evaluations are always correct. Note that the\n_anything_ part of the above expressions is not evaluated, so any side effects of\ndoing so do not take effect.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Short-circuit evaluation",
      "chunkIndex": 55,
      "totalChunks": 78,
      "startLineNumber": 769,
      "endLineNumber": 780
    }
  },
  {
    "content": "## BigInt operators\n\nMost operators that can be used between numbers can be used between [`BigInt`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) values as well.\n\n```js\n// BigInt addition\nconst a = 1n + 2n; // 3n\n// Division with BigInts round towards zero\nconst b = 1n / 2n; // 0n\n// Bitwise operations with BigInts do not truncate either side\nconst c = 40000000000000000n >> 2n; // 10000000000000000n\n```\n\nOne exception is [unsigned right shift (`>>>`)](/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift), which is not defined for BigInt values. This is because a BigInt does not have a fixed width, so technically it does not have a \"highest bit\".\n\n```js\nconst d = 8n >>> 2n; // TypeError: BigInts have no unsigned right shift, use >> instead\n```\n\nBigInts and numbers are not mutually replaceable — you cannot mix them in calculations.\n\n```js example-bad\nconst a = 1n + 2; // TypeError: Cannot mix BigInt and other types\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInt operators",
      "chunkIndex": 56,
      "totalChunks": 78,
      "startLineNumber": 782,
      "endLineNumber": 805
    }
  },
  {
    "content": "BigInts and numbers are not mutually replaceable — you cannot mix them in calculations.\n\n```js example-bad\nconst a = 1n + 2; // TypeError: Cannot mix BigInt and other types\n```\n\nThis is because BigInt is neither a subset nor a superset of numbers. BigInts have higher precision than numbers when representing large integers, but cannot represent decimals, so implicit conversion on either side might lose precision. Use explicit conversion to signal whether you wish the operation to be a number operation or a BigInt one.\n\n```js example-good\nconst a = Number(1n) + 2; // 3\nconst b = 1n + BigInt(2); // 3n\n```\n\nYou can compare BigInts with numbers.\n\n```js\nconst a = 1n > 2; // false\nconst b = 3 > 2n; // true\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInt operators",
      "chunkIndex": 57,
      "totalChunks": 78,
      "startLineNumber": 801,
      "endLineNumber": 819
    }
  },
  {
    "content": "## String operators\n\nIn addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings.\n\nFor example,\n\n```js\nconsole.log(\"my \" + \"string\"); // console logs the string \"my string\".\n```\n\nThe shorthand assignment operator `+=` can also be used to concatenate strings.\n\nFor example,\n\n```js\nlet myString = \"alpha\";\nmyString += \"bet\"; // evaluates to \"alphabet\" and assigns this value to myString.\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String operators",
      "chunkIndex": 58,
      "totalChunks": 78,
      "startLineNumber": 821,
      "endLineNumber": 838
    }
  },
  {
    "content": "## Conditional (ternary) operator\n\nThe [conditional operator](/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator)\nis the only JavaScript operator that takes three operands.\nThe operator can have one of two values based on a condition.\nThe syntax is:\n\n```js-nolint\ncondition ? val1 : val2\n```\n\nIf `condition` is true, the operator has the value of `val1`.\nOtherwise it has the value of `val2`. You can use the conditional operator anywhere you would use a standard operator.\n\nFor example,\n\n```js\nconst status = age >= 18 ? \"adult\" : \"minor\";\n```\n\nThis statement assigns the value \"adult\" to the variable `status` if\n`age` is eighteen or more. Otherwise, it assigns the value \"minor\" to\n`status`.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conditional (ternary) operator",
      "chunkIndex": 59,
      "totalChunks": 78,
      "startLineNumber": 840,
      "endLineNumber": 862
    }
  },
  {
    "content": "## Comma operator\n\nThe [comma operator](/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator) (`,`)\nevaluates both of its operands and returns the value of the last operand.\nThis operator is primarily used inside a `for` loop, to allow multiple variables to be updated each time through the loop.\nIt is regarded bad style to use it elsewhere, when it is not necessary.\nOften two separate statements can and should be used instead.\n\nFor example, if `a` is a 2-dimensional array with 10 elements on a side, the following code uses the comma operator to update two variables at once.\nThe code prints the values of the diagonal elements in the array:\n\n```js\nconst x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst a = [x, x, x, x, x];\n\nfor (let i = 0, j = 9; i <= j; i++, j--) {\n  //                              ^\n  console.log(`a[${i}][${j}]= ${a[i][j]}`);\n}\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comma operator",
      "chunkIndex": 60,
      "totalChunks": 78,
      "startLineNumber": 864,
      "endLineNumber": 883
    }
  },
  {
    "content": "## Unary operators\n\nA unary operation is an operation with only one operand.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Unary operators",
      "chunkIndex": 61,
      "totalChunks": 78,
      "startLineNumber": 885,
      "endLineNumber": 887
    }
  },
  {
    "content": "### delete\n\nThe [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator deletes an object's property.\nThe syntax is:\n\n```js\ndelete object.property;\ndelete object[propertyKey];\ndelete objectName[index];\n```\n\nwhere `object` is the name of an object, `property` is an existing property, and `propertyKey` is a string or symbol referring to an existing property.\n\nIf the `delete` operator succeeds, it removes the property from the object.\nTrying to access it afterwards will yield `undefined`.\nThe `delete` operator returns `true` if the operation is possible; it returns `false` if the operation is not possible.\n\n```js\ndelete Math.PI; // returns false (cannot delete non-configurable properties)\n\nconst myObj = { h: 4 };\ndelete myObj.h; // returns true (can delete user-defined properties)\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "delete",
      "chunkIndex": 62,
      "totalChunks": 78,
      "startLineNumber": 889,
      "endLineNumber": 911
    }
  },
  {
    "content": "#### Deleting array elements\n\nSince arrays are just objects, it's technically possible to `delete` elements from them.\nThis is, however, regarded as a bad practice — try to avoid it.\nWhen you delete an array property, the array length is not affected and other elements are not re-indexed.\nTo achieve that behavior, it is much better to just overwrite the element with the value `undefined`.\nTo actually manipulate the array, use the various array methods such as [`splice`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice).",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Deleting array elements",
      "chunkIndex": 63,
      "totalChunks": 78,
      "startLineNumber": 913,
      "endLineNumber": 919
    }
  },
  {
    "content": "### typeof\n\nThe [`typeof` operator](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) returns a string indicating the type of the unevaluated operand.\n`operand` is the string, variable, keyword, or object for which the type is to be returned.\nThe parentheses are optional.\n\nSuppose you define the following variables:\n\n```js\nconst myFun = () => 5 + 2;\nconst shape = \"round\";\nconst size = 1;\nconst foo = [\"Apple\", \"Mango\", \"Orange\"];\nconst today = new Date();\n```\n\nThe `typeof` operator returns the following results for these variables:\n\n```js\ntypeof myFun; // returns \"function\"\ntypeof shape; // returns \"string\"\ntypeof size; // returns \"number\"\ntypeof foo; // returns \"object\"\ntypeof today; // returns \"object\"\ntypeof doesntExist; // returns \"undefined\"\n```\n\nFor the keywords `true` and `null`, the `typeof`\noperator returns the following results:\n\n```js\ntypeof true; // returns \"boolean\"\ntypeof null; // returns \"object\"\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "typeof",
      "chunkIndex": 64,
      "totalChunks": 78,
      "startLineNumber": 921,
      "endLineNumber": 954
    }
  },
  {
    "content": "For the keywords `true` and `null`, the `typeof`\noperator returns the following results:\n\n```js\ntypeof true; // returns \"boolean\"\ntypeof null; // returns \"object\"\n```\n\nFor a number or string, the `typeof` operator returns the following results:\n\n```js\ntypeof 62; // returns \"number\"\ntypeof \"Hello world\"; // returns \"string\"\n```\n\nFor property values, the `typeof` operator returns the type of value the\nproperty contains:\n\n```js\ntypeof document.lastModified; // returns \"string\"\ntypeof window.length; // returns \"number\"\ntypeof Math.LN2; // returns \"number\"\n```\n\nFor methods and functions, the `typeof` operator returns results as follows:\n\n```js\ntypeof blur; // returns \"function\"\ntypeof parseInt; // returns \"function\"\ntypeof shape.split; // returns \"function\"\n```\n\nFor predefined objects, the `typeof` operator returns results as follows:",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "typeof",
      "chunkIndex": 65,
      "totalChunks": 78,
      "startLineNumber": 948,
      "endLineNumber": 980
    }
  },
  {
    "content": "For predefined objects, the `typeof` operator returns results as follows:\n\n```js\ntypeof Date; // returns \"function\"\ntypeof Function; // returns \"function\"\ntypeof Math; // returns \"object\"\ntypeof Option; // returns \"function\"\ntypeof String; // returns \"function\"\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "typeof",
      "chunkIndex": 66,
      "totalChunks": 78,
      "startLineNumber": 980,
      "endLineNumber": 988
    }
  },
  {
    "content": "### void\n\nThe [`void` operator](/en-US/docs/Web/JavaScript/Reference/Operators/void) specifies an expression to be evaluated without returning a value. `expression` is a JavaScript expression to evaluate.\nThe parentheses surrounding the expression are optional, but it is good style to use them to avoid precedence issues.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "void",
      "chunkIndex": 67,
      "totalChunks": 78,
      "startLineNumber": 990,
      "endLineNumber": 993
    }
  },
  {
    "content": "## Relational operators\n\nA relational operator compares its operands and returns a Boolean value based on whether the comparison is true.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Relational operators",
      "chunkIndex": 68,
      "totalChunks": 78,
      "startLineNumber": 995,
      "endLineNumber": 997
    }
  },
  {
    "content": "### in\n\nThe [`in` operator](/en-US/docs/Web/JavaScript/Reference/Operators/in) returns `true` if the specified property is in the specified object.\nThe syntax is:\n\n```js-nolint\npropNameOrNumber in objectName\n```\n\nwhere `propNameOrNumber` is a string, numeric, or symbol expression representing a property name or array index, and `objectName` is the name of an object.\n\nThe following examples show some uses of the `in` operator.\n\n```js\n// Arrays\nconst trees = [\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"];\n0 in trees; // returns true\n3 in trees; // returns true\n6 in trees; // returns false\n\"bay\" in trees; // returns false\n// (you must specify the index number, not the value at that index)\n\"length\" in trees; // returns true (length is an Array property)\n\n// built-in objects\n\"PI\" in Math; // returns true\nconst myString = new String(\"coral\");\n\"length\" in myString; // returns true",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "in",
      "chunkIndex": 69,
      "totalChunks": 78,
      "startLineNumber": 999,
      "endLineNumber": 1025
    }
  },
  {
    "content": "// built-in objects\n\"PI\" in Math; // returns true\nconst myString = new String(\"coral\");\n\"length\" in myString; // returns true\n\n// Custom objects\nconst myCar = { make: \"Honda\", model: \"Accord\", year: 1998 };\n\"make\" in myCar; // returns true\n\"model\" in myCar; // returns true\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "in",
      "chunkIndex": 70,
      "totalChunks": 78,
      "startLineNumber": 1022,
      "endLineNumber": 1031
    }
  },
  {
    "content": "### instanceof\n\nThe [`instanceof` operator](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) returns `true`\nif the specified object is of the specified object type. The syntax is:\n\n```js-nolint\nobject instanceof objectType\n```\n\nwhere `object` is the object to test against `objectType`, and `objectType` is a constructor representing a type, such as {{jsxref(\"Map\")}} or {{jsxref(\"Array\")}}.\n\nUse `instanceof` when you need to confirm the type of an object at runtime.\nFor example, when catching exceptions, you can branch to different exception-handling code depending on the type of exception thrown.\n\nFor example, the following code uses `instanceof` to determine whether `obj` is a `Map` object. Because `obj` is a `Map` object, the statements inside the `if` block execute.\n\n```js\nconst obj = new Map();\nif (obj instanceof Map) {\n  // statements to execute\n}\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "instanceof",
      "chunkIndex": 71,
      "totalChunks": 78,
      "startLineNumber": 1033,
      "endLineNumber": 1054
    }
  },
  {
    "content": "## Basic expressions\n\nAll operators eventually operate on one or more basic expressions. These basic expressions include [identifiers](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations) and [literals](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#literals), but there are a few other kinds as well. They are briefly introduced below, and their semantics are described in detail in their respective reference sections.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basic expressions",
      "chunkIndex": 72,
      "totalChunks": 78,
      "startLineNumber": 1056,
      "endLineNumber": 1058
    }
  },
  {
    "content": "### this\n\nThe [`this` keyword](/en-US/docs/Web/JavaScript/Reference/Operators/this) is usually used within a function. In general, when the function is attached to an object as a method, `this` refers to the object that the method is called on. It functions like a hidden parameter that is passed to the function. `this` is an expression that evaluates to the object, so you can use all the object operations we introduced.\n\n```js\nthis[\"propertyName\"];\nthis.propertyName;\ndoSomething(this);\n```\n\nFor example, suppose a function is defined as follows:\n\n```js\nfunction getFullName() {\n  return `${this.firstName} ${this.lastName}`;\n}\n```\n\nWe can now attach this function to an object, and it will use the properties of that object when called:\n\n```js\nconst person1 = {\n  firstName: \"Chris\",\n  lastName: \"Martin\",\n};\n\nconst person2 = {\n  firstName: \"Chester\",\n  lastName: \"Bennington\",\n};\n\n// Attach the same function\nperson1.getFullName = getFullName;\nperson2.getFullName = getFullName;",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "this",
      "chunkIndex": 73,
      "totalChunks": 78,
      "startLineNumber": 1060,
      "endLineNumber": 1093
    }
  },
  {
    "content": "const person2 = {\n  firstName: \"Chester\",\n  lastName: \"Bennington\",\n};\n\n// Attach the same function\nperson1.getFullName = getFullName;\nperson2.getFullName = getFullName;\n\nconsole.log(person1.getFullName()); // \"Chris Martin\"\nconsole.log(person2.getFullName()); // \"Chester Bennington\"\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "this",
      "chunkIndex": 74,
      "totalChunks": 78,
      "startLineNumber": 1086,
      "endLineNumber": 1097
    }
  },
  {
    "content": "### Grouping operator\n\nThe grouping operator `( )` controls the precedence of evaluation in\nexpressions. For example, you can override multiplication and division first, then\naddition and subtraction to evaluate addition first.\n\n```js-nolint\nconst a = 1;\nconst b = 2;\nconst c = 3;\n\n// default precedence\na + b * c; // 7\n// evaluated by default like this\na + (b * c); // 7\n\n// now overriding precedence\n// addition before multiplication\n(a + b) * c; // 9\n\n// which is equivalent to\na * c + b * c; // 9\n```\n\n### Property accessor\n\nThe [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) syntax gets property values on objects, using either dot notation or bracket notation.\n\n```js\nobject.property;\nobject[\"property\"];\n```\n\nThe [working with objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects) guide goes into more details about object properties.",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grouping operator",
      "chunkIndex": 75,
      "totalChunks": 78,
      "startLineNumber": 1099,
      "endLineNumber": 1132
    }
  },
  {
    "content": "### Optional chaining\n\nThe [optional chaining](/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) syntax (`?.`) performs the chained operation on an object if it is defined and non-`null`, and otherwise short-circuits the operation and returns `undefined`.\nThis allows you to operate on a value that may be `null` or `undefined` without causing a `TypeError`.\n\n```js\nmaybeObject?.property;\nmaybeObject?.[property];\nmaybeFunction?.();\n```\n\n### new\n\nYou can use the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) to create an instance of a user-defined object type or of one of the built-in object types. Use `new` as follows:\n\n```js\nconst objectName = new ObjectType(param1, param2, /* …, */ paramN);\n```",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Optional chaining",
      "chunkIndex": 76,
      "totalChunks": 78,
      "startLineNumber": 1134,
      "endLineNumber": 1151
    }
  },
  {
    "content": "### super\n\nThe [`super` keyword](/en-US/docs/Web/JavaScript/Reference/Operators/super) is used to call functions on an object's parent.\nIt is useful with [classes](/en-US/docs/Web/JavaScript/Reference/Classes) to call the parent constructor, for example.\n\n```js-nolint\nsuper(args); // calls the parent constructor.\nsuper.functionOnParent(args);\n```\n\n{{PreviousNext(\"Web/JavaScript/Guide/Functions\", \"Web/JavaScript/Guide/Numbers_and_strings\")}}",
    "metadata": {
      "source": "expressions_and_operators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Expressions_and_operators",
      "documentTitle": "Expressions and operators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "super",
      "chunkIndex": 77,
      "totalChunks": 78,
      "startLineNumber": 1153,
      "endLineNumber": 1163
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Loops_and_iteration\", \"Web/JavaScript/Guide/Expressions_and_operators\")}}\n\nFunctions are one of the fundamental building blocks in JavaScript. A function in JavaScript is similar to a procedure—a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.\n\nSee also the [exhaustive reference chapter about JavaScript functions](/en-US/docs/Web/JavaScript/Reference/Functions) to get to know the details.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 38,
      "startLineNumber": 8,
      "endLineNumber": 12
    }
  },
  {
    "content": "## Defining functions",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining functions",
      "chunkIndex": 1,
      "totalChunks": 38,
      "startLineNumber": 14,
      "endLineNumber": 14
    }
  },
  {
    "content": "### Function declarations\n\nA **function definition** (also called a **function declaration**, or **function statement**) consists of the [`function`](/en-US/docs/Web/JavaScript/Reference/Statements/function) keyword, followed by:\n\n- The name of the function.\n- A list of parameters to the function, enclosed in parentheses and separated by commas.\n- The JavaScript statements that define the function, enclosed in curly braces, `{ /* … */ }`.\n\nFor example, the following code defines a function named `square`:\n\n```js\nfunction square(number) {\n  return number * number;\n}\n```\n\nThe function `square` takes one parameter, called `number`. The function consists of one statement that says to return the parameter of the function (that is, `number`) multiplied by itself. The [`return`](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement specifies the value returned by the function, which is `number * number`.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function declarations",
      "chunkIndex": 2,
      "totalChunks": 38,
      "startLineNumber": 16,
      "endLineNumber": 32
    }
  },
  {
    "content": "Parameters are essentially passed to functions **by value** — so if the code within the body of a function assigns a completely new value to a parameter that was passed to the function, **the change is not reflected globally or in the code which called that function**.\n\nWhen you pass an object as a parameter, if the function changes the object's properties, that change is visible outside the function, as shown in the following example:\n\n```js\nfunction myFunc(theObject) {\n  theObject.make = \"Toyota\";\n}\n\nconst myCar = {\n  make: \"Honda\",\n  model: \"Accord\",\n  year: 1998,\n};\n\nconsole.log(myCar.make); // \"Honda\"\nmyFunc(myCar);\nconsole.log(myCar.make); // \"Toyota\"\n```\n\nWhen you pass an array as a parameter, if the function changes any of the array's values, that change is visible outside the function, as shown in the following example:\n\n```js\nfunction myFunc(theArr) {\n  theArr[0] = 30;\n}\n\nconst arr = [45];\n\nconsole.log(arr[0]); // 45\nmyFunc(arr);\nconsole.log(arr[0]); // 30\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function declarations",
      "chunkIndex": 3,
      "totalChunks": 38,
      "startLineNumber": 34,
      "endLineNumber": 66
    }
  },
  {
    "content": "```js\nfunction myFunc(theArr) {\n  theArr[0] = 30;\n}\n\nconst arr = [45];\n\nconsole.log(arr[0]); // 45\nmyFunc(arr);\nconsole.log(arr[0]); // 30\n```\n\nFunction declarations and expressions can be nested, which forms a _scope chain_. For example:\n\n```js\nfunction addSquares(a, b) {\n  function square(x) {\n    return x * x;\n  }\n  return square(a) + square(b);\n}\n```\n\nSee [function scopes and closures](#function_scopes_and_closures) for more information.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function declarations",
      "chunkIndex": 4,
      "totalChunks": 38,
      "startLineNumber": 56,
      "endLineNumber": 79
    }
  },
  {
    "content": "### Function expressions\n\nWhile the function declaration above is syntactically a statement, functions can also be created by a [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function).\n\nSuch a function can be **anonymous**; it does not have to have a name. For example, the function `square` could have been defined as:\n\n```js\nconst square = function (number) {\n  return number * number;\n};\n\nconsole.log(square(4)); // 16\n```\n\nHowever, a name _can_ be provided with a function expression. Providing a name allows the function to refer to itself, and also makes it easier to identify the function in a debugger's stack traces:\n\n```js\nconst factorial = function fac(n) {\n  return n < 2 ? 1 : n * fac(n - 1);\n};\n\nconsole.log(factorial(3)); // 6\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function expressions",
      "chunkIndex": 5,
      "totalChunks": 38,
      "startLineNumber": 81,
      "endLineNumber": 103
    }
  },
  {
    "content": "```js\nconst factorial = function fac(n) {\n  return n < 2 ? 1 : n * fac(n - 1);\n};\n\nconsole.log(factorial(3)); // 6\n```\n\nFunction expressions are convenient when passing a function as an argument to another function. The following example defines a `map` function that should receive a function as first argument and an array as second argument. Then, it is called with a function defined by a function expression:\n\n```js\nfunction map(f, a) {\n  const result = new Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = f(a[i]);\n  }\n  return result;\n}\n\nconst numbers = [0, 1, 2, 5, 10];\nconst cubedNumbers = map(function (x) {\n  return x * x * x;\n}, numbers);\nconsole.log(cubedNumbers); // [0, 1, 8, 125, 1000]\n```\n\nIn JavaScript, a function can be defined based on a condition. For example, the following function definition defines `myFunc` only if `num` equals `0`:\n\n```js\nlet myFunc;\nif (num === 0) {\n  myFunc = function (theObject) {\n    theObject.make = \"Toyota\";\n  };\n}\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function expressions",
      "chunkIndex": 6,
      "totalChunks": 38,
      "startLineNumber": 97,
      "endLineNumber": 132
    }
  },
  {
    "content": "```js\nlet myFunc;\nif (num === 0) {\n  myFunc = function (theObject) {\n    theObject.make = \"Toyota\";\n  };\n}\n```\n\nIn addition to defining functions as described here, you can also use the {{jsxref(\"Function\")}} constructor to create functions from a string at runtime, much like {{jsxref(\"Global_Objects/eval\", \"eval()\")}}.\n\nA **method** is a function that is a property of an object. Read more about objects and methods in [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects).",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function expressions",
      "chunkIndex": 7,
      "totalChunks": 38,
      "startLineNumber": 125,
      "endLineNumber": 136
    }
  },
  {
    "content": "## Calling functions\n\n_Defining_ a function does not _execute_ it. Defining it names the function and specifies what to do when the function is called.\n\n**Calling** the function actually performs the specified actions with the indicated parameters. For example, if you define the function `square`, you could call it as follows:\n\n```js\nsquare(5);\n```\n\nThe preceding statement calls the function with an argument of `5`. The function executes its statements and returns the value `25`.\n\nFunctions must be _in scope_ when they are called, but the function declaration can be [hoisted](#function_hoisting) (appear below the call in the code). The scope of a function declaration is the function in which it is declared (or the entire program, if it is declared at the top level).",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Calling functions",
      "chunkIndex": 8,
      "totalChunks": 38,
      "startLineNumber": 138,
      "endLineNumber": 150
    }
  },
  {
    "content": "The arguments of a function are not limited to strings and numbers. You can pass whole objects to a function. The `showProps()` function (defined in [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties)) is an example of a function that takes an object as an argument.\n\nA function can call itself. For example, here is a function that computes factorials recursively:\n\n```js\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n```\n\nYou could then compute the factorials of `1` through `5` as follows:\n\n```js\nconsole.log(factorial(1)); // 1\nconsole.log(factorial(2)); // 2\nconsole.log(factorial(3)); // 6\nconsole.log(factorial(4)); // 24\nconsole.log(factorial(5)); // 120\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Calling functions",
      "chunkIndex": 9,
      "totalChunks": 38,
      "startLineNumber": 152,
      "endLineNumber": 173
    }
  },
  {
    "content": "```js\nconsole.log(factorial(1)); // 1\nconsole.log(factorial(2)); // 2\nconsole.log(factorial(3)); // 6\nconsole.log(factorial(4)); // 24\nconsole.log(factorial(5)); // 120\n```\n\nThere are other ways to call functions. There are often cases where a function needs to be called dynamically, or the number of arguments to a function vary, or in which the context of the function call needs to be set to a specific object determined at runtime.\n\nIt turns out that _functions are themselves objects_ — and in turn, these objects have methods. (See the {{jsxref(\"Function\")}} object.) The [`call()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) and [`apply()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) methods can be used to achieve this goal.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Calling functions",
      "chunkIndex": 10,
      "totalChunks": 38,
      "startLineNumber": 167,
      "endLineNumber": 177
    }
  },
  {
    "content": "### Function hoisting\n\nConsider the example below:\n\n```js\nconsole.log(square(5)); // 25\n\nfunction square(n) {\n  return n * n;\n}\n```\n\nThis code runs without any error, despite the `square()` function being called before it's declared. This is because the JavaScript interpreter hoists the entire function declaration to the top of the current scope, so the code above is equivalent to:\n\n```js\n// All function declarations are effectively at the top of the scope\nfunction square(n) {\n  return n * n;\n}\n\nconsole.log(square(5)); // 25\n```\n\nFunction hoisting only works with function _declarations_ — not with function _expressions_. The following code will not work:\n\n```js example-bad\nconsole.log(square(5)); // ReferenceError: Cannot access 'square' before initialization\nconst square = function (n) {\n  return n * n;\n};\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function hoisting",
      "chunkIndex": 11,
      "totalChunks": 38,
      "startLineNumber": 179,
      "endLineNumber": 209
    }
  },
  {
    "content": "### Recursion\n\nA function can refer to and call itself. It can be referred to either by the function expression or declaration's name, or via any in-scope variable that refers to the function object. For example, consider the following function definition:\n\n```js\nconst foo = function bar() {\n  // statements go here\n};\n```\n\nWithin the function body, you can refer to the function itself either as `bar` or `foo`, and call itself using `bar()` or `foo()`.\n\nA function that calls itself is called a _recursive function_. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case).\n\nFor example, consider the following loop:\n\n```js\nlet x = 0;\n// \"x < 10\" is the loop condition\nwhile (x < 10) {\n  // do stuff\n  x++;\n}\n```\n\nIt can be converted into a recursive function declaration, followed by a call to that function:",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Recursion",
      "chunkIndex": 12,
      "totalChunks": 38,
      "startLineNumber": 211,
      "endLineNumber": 236
    }
  },
  {
    "content": "```js\nlet x = 0;\n// \"x < 10\" is the loop condition\nwhile (x < 10) {\n  // do stuff\n  x++;\n}\n```\n\nIt can be converted into a recursive function declaration, followed by a call to that function:\n\n```js\nfunction loop(x) {\n  // \"x >= 10\" is the exit condition (equivalent to \"!(x < 10)\")\n  if (x >= 10) {\n    return;\n  }\n  // do stuff\n  loop(x + 1); // the recursive call\n}\nloop(0);\n```\n\nHowever, some algorithms cannot be simple iterative loops. For example, getting all the nodes of a tree structure (such as the [DOM](/en-US/docs/Web/API/Document_Object_Model)) is easier via recursion:\n\n```js\nfunction walkTree(node) {\n  if (node === null) {\n    return;\n  }\n  // do something with node\n  for (const child of node.childNodes) {\n    walkTree(child);\n  }\n}\n```\n\nCompared to the function `loop`, each recursive call itself makes many recursive calls here.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Recursion",
      "chunkIndex": 13,
      "totalChunks": 38,
      "startLineNumber": 227,
      "endLineNumber": 264
    }
  },
  {
    "content": "Compared to the function `loop`, each recursive call itself makes many recursive calls here.\n\nIt is possible to convert any recursive algorithm to a non-recursive one, but the logic is often much more complex, and doing so requires the use of a stack.\n\nIn fact, recursion itself uses a stack: the function stack. The stack-like behavior can be seen in the following example:\n\n```js\nfunction foo(i) {\n  if (i < 0) {\n    return;\n  }\n  console.log(`begin: ${i}`);\n  foo(i - 1);\n  console.log(`end: ${i}`);\n}\nfoo(3);\n\n// Logs:\n// begin: 3\n// begin: 2\n// begin: 1\n// begin: 0\n// end: 0\n// end: 1\n// end: 2\n// end: 3\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Recursion",
      "chunkIndex": 14,
      "totalChunks": 38,
      "startLineNumber": 264,
      "endLineNumber": 290
    }
  },
  {
    "content": "### Immediately Invoked Function Expressions (IIFE)\n\nAn [Immediately Invoked Function Expression (IIFE)](/en-US/docs/Glossary/IIFE) is a code pattern that directly calls a function defined as an expression. It looks like this:\n\n```js\n(function () {\n  // Do something\n})();\n\nconst value = (function () {\n  // Do something\n  return someValue;\n})();\n```\n\nInstead of saving the function in a variable, the function is immediately invoked. This is almost equivalent to just writing the function body, but there are a few unique benefits:\n\n- It creates an extra [scope](#function_scopes_and_closures) of variables, which helps to confine variables to the place where they are useful.\n- It is now an _expression_ instead of a sequence of _statements_. This allows you to write complex computation logic when initializing variables.\n\nFor more information, see the [IIFE](/en-US/docs/Glossary/IIFE) glossary entry.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Immediately Invoked Function Expressions (IIFE)",
      "chunkIndex": 15,
      "totalChunks": 38,
      "startLineNumber": 292,
      "endLineNumber": 312
    }
  },
  {
    "content": "## Function scopes and closures\n\nFunctions form a [scope](/en-US/docs/Glossary/Scope) for variables—this means variables defined inside a function cannot be accessed from anywhere outside the function. The function scope inherits from all the upper scopes. For example, a function defined in the global scope can access all variables defined in the global scope. A function defined inside another function can also access all variables defined in its parent function, and any other variables to which the parent function has access. On the other hand, the parent function (and any other parent scope) does _not_ have access to the variables and functions defined inside the inner function. This provides a sort of encapsulation for the variables in the inner function.\n\n```js\n// The following variables are defined in the global scope\nconst num1 = 20;\nconst num2 = 3;\nconst name = \"Chamakh\";\n\n// This function is defined in the global scope\nfunction multiply() {\n  return num1 * num2;\n}",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function scopes and closures",
      "chunkIndex": 16,
      "totalChunks": 38,
      "startLineNumber": 314,
      "endLineNumber": 327
    }
  },
  {
    "content": "// This function is defined in the global scope\nfunction multiply() {\n  return num1 * num2;\n}\n\nconsole.log(multiply()); // 60\n\n// A nested function example\nfunction getScore() {\n  const num1 = 2;\n  const num2 = 3;\n\n  function add() {\n    return `${name} scored ${num1 + num2}`;\n  }\n\n  return add();\n}\n\nconsole.log(getScore()); // \"Chamakh scored 5\"\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function scopes and closures",
      "chunkIndex": 17,
      "totalChunks": 38,
      "startLineNumber": 324,
      "endLineNumber": 344
    }
  },
  {
    "content": "### Closures\n\nWe also refer to the function body as a _closure_. A closure is any piece of source code (most commonly, a function) that refers to some variables, and the closure \"remembers\" these variables even when the scope in which these variables were declared has exited.\n\nClosures are usually illustrated with nested functions to show that they remember variables beyond the lifetime of its parent scope; but in fact, nested functions are unnecessary. Technically speaking, all functions in JavaScript form closures—some just don't capture anything, and closures don't even have to be functions. The key ingredients for a _useful_ closure are the following:",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closures",
      "chunkIndex": 18,
      "totalChunks": 38,
      "startLineNumber": 346,
      "endLineNumber": 350
    }
  },
  {
    "content": "- A parent scope that defines some variables or functions. It should have a clear lifetime, which means it should finish execution at some point. Any scope that's not the global scope satisfies this requirement; this includes blocks, functions, modules, and more.\n- An inner scope defined within the parent scope, which refers to some variables or functions defined in the parent scope.\n- The inner scope manages to survive beyond the lifetime of the parent scope. For example, it is saved to a variable that's defined outside the parent scope, or it's returned from the parent scope (if the parent scope is a function).\n- Then, when you call the function outside of the parent scope, you can still access the variables or functions that were defined in the parent scope, even though the parent scope has finished execution.\n\nThe following is a typical example of a closure:",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closures",
      "chunkIndex": 19,
      "totalChunks": 38,
      "startLineNumber": 352,
      "endLineNumber": 357
    }
  },
  {
    "content": "The following is a typical example of a closure:\n\n```js\n// The outer function defines a variable called \"name\"\nconst pet = function (name) {\n  const getName = function () {\n    // The inner function has access to the \"name\" variable of the outer function\n    return name;\n  };\n  return getName; // Return the inner function, thereby exposing it to outer scopes\n};\nconst myPet = pet(\"Vivie\");\n\nconsole.log(myPet()); // \"Vivie\"\n```\n\nIt can be much more complex than the code above. An object containing methods for manipulating the inner variables of the outer function can be returned.\n\n```js\nconst createPet = function (name) {\n  let sex;\n\n  const pet = {\n    // setName(newName) is equivalent to setName: function (newName)\n    // in this context\n    setName(newName) {\n      name = newName;\n    },\n\n    getName() {\n      return name;\n    },\n\n    getSex() {\n      return sex;\n    },",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closures",
      "chunkIndex": 20,
      "totalChunks": 38,
      "startLineNumber": 357,
      "endLineNumber": 392
    }
  },
  {
    "content": "getName() {\n      return name;\n    },\n\n    getSex() {\n      return sex;\n    },\n\n    setSex(newSex) {\n      if (\n        typeof newSex === \"string\" &&\n        (newSex.toLowerCase() === \"male\" || newSex.toLowerCase() === \"female\")\n      ) {\n        sex = newSex;\n      }\n    },\n  };\n\n  return pet;\n};\n\nconst pet = createPet(\"Vivie\");\nconsole.log(pet.getName()); // Vivie\n\npet.setName(\"Oliver\");\npet.setSex(\"male\");\nconsole.log(pet.getSex()); // male\nconsole.log(pet.getName()); // Oliver\n```\n\nIn the code above, the `name` variable of the outer function is accessible to the inner functions, and there is no other way to access the inner variables except through the inner functions. The inner variables of the inner functions act as safe stores for the outer arguments and variables. They hold \"persistent\" and \"encapsulated\" data for the inner functions to work with. The functions do not even have to be assigned to a variable, or have a name.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closures",
      "chunkIndex": 21,
      "totalChunks": 38,
      "startLineNumber": 386,
      "endLineNumber": 416
    }
  },
  {
    "content": "```js\nconst getCode = (function () {\n  const apiCode = \"0]Eal(eh&2\"; // A code we do not want outsiders to be able to modify…\n\n  return function () {\n    return apiCode;\n  };\n})();\n\nconsole.log(getCode()); // \"0]Eal(eh&2\"\n```\n\nIn the code above, we use the [IIFE](#immediately_invoked_function_expressions_iife) pattern. Within this IIFE scope, two values exist: a variable `apiCode` and an unnamed function that gets returned and gets assigned to the variable `getCode`. `apiCode` is in the scope of the returned unnamed function but not in the scope of any other part of the program, so there is no way for reading the value of `apiCode` apart from via the `getCode` function.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Closures",
      "chunkIndex": 22,
      "totalChunks": 38,
      "startLineNumber": 418,
      "endLineNumber": 430
    }
  },
  {
    "content": "### Multiply-nested functions\n\nFunctions can be multiply-nested. For example:\n\n- A function (`A`) contains a function (`B`), which itself contains a function (`C`).\n- Both functions `B` and `C` form closures here. So, `B` can access `A`, and `C` can access `B`.\n- In addition, since `C` can access `B` which can access `A`, `C` can also access `A`.\n\nThus, the closures can contain multiple scopes; they recursively contain the scope of the functions containing it. This is called _scope chaining_. Consider the following example:\n\n```js\nfunction A(x) {\n  function B(y) {\n    function C(z) {\n      console.log(x + y + z);\n    }\n    C(3);\n  }\n  B(2);\n}\nA(1); // Logs 6 (which is 1 + 2 + 3)\n```\n\nIn this example, `C` accesses `B`'s `y` and `A`'s `x`. This can be done because:",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multiply-nested functions",
      "chunkIndex": 23,
      "totalChunks": 38,
      "startLineNumber": 432,
      "endLineNumber": 455
    }
  },
  {
    "content": "In this example, `C` accesses `B`'s `y` and `A`'s `x`. This can be done because:\n\n1. `B` forms a closure including `A` (i.e., `B` can access `A`'s arguments and variables).\n2. `C` forms a closure including `B`.\n3. Because `C`'s closure includes `B` and `B`'s closure includes `A`, then `C`'s closure also includes `A`. This means `C` can access _both_ `B` _and_ `A`'s arguments and variables. In other words, `C` _chains_ the scopes of `B` and `A`, _in that order_.\n\nThe reverse, however, is not true. `A` cannot access `C`, because `A` cannot access any argument or variable of `B`, which `C` is a variable of. Thus, `C` remains private to only `B`.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multiply-nested functions",
      "chunkIndex": 24,
      "totalChunks": 38,
      "startLineNumber": 455,
      "endLineNumber": 461
    }
  },
  {
    "content": "### Name conflicts\n\nWhen two arguments or variables in the scopes of a closure have the same name, there is a _name conflict_. More nested scopes take precedence. So, the innermost scope takes the highest precedence, while the outermost scope takes the lowest. This is the scope chain. The first on the chain is the innermost scope, and the last is the outermost scope. Consider the following:\n\n```js\nfunction outside() {\n  const x = 5;\n  function inside(x) {\n    return x * 2;\n  }\n  return inside;\n}\n\nconsole.log(outside()(10)); // 20 (instead of 10)\n```\n\nThe name conflict happens at the statement `return x * 2` and is between `inside`'s parameter `x` and `outside`'s variable `x`. The scope chain here is `inside` => `outside` => global object. Therefore, `inside`'s `x` takes precedences over `outside`'s `x`, and `20` (`inside`'s `x`) is returned instead of `10` (`outside`'s `x`).",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Name conflicts",
      "chunkIndex": 25,
      "totalChunks": 38,
      "startLineNumber": 463,
      "endLineNumber": 479
    }
  },
  {
    "content": "## Using the arguments object\n\nThe arguments of a function are maintained in an array-like object. Within a function, you can address the arguments passed to it as follows:\n\n```js\narguments[i];\n```\n\nwhere `i` is the ordinal number of the argument, starting at `0`. So, the first argument passed to a function would be `arguments[0]`. The total number of arguments is indicated by `arguments.length`.\n\nUsing the `arguments` object, you can call a function with more arguments than it is formally declared to accept. This is often useful if you don't know in advance how many arguments will be passed to the function. You can use `arguments.length` to determine the number of arguments actually passed to the function, and then access each argument using the `arguments` object.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using the arguments object",
      "chunkIndex": 26,
      "totalChunks": 38,
      "startLineNumber": 481,
      "endLineNumber": 491
    }
  },
  {
    "content": "For example, consider a function that concatenates several strings. The only formal argument for the function is a string that specifies the characters that separate the items to concatenate. The function is defined as follows:\n\n```js\nfunction myConcat(separator) {\n  let result = \"\"; // initialize list\n  // iterate through arguments\n  for (let i = 1; i < arguments.length; i++) {\n    result += arguments[i] + separator;\n  }\n  return result;\n}\n```\n\nYou can pass any number of arguments to this function, and it concatenates each argument into a string \"list\":\n\n```js\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n// \"red, orange, blue, \"\n\nconsole.log(myConcat(\"; \", \"elephant\", \"giraffe\", \"lion\", \"cheetah\"));\n// \"elephant; giraffe; lion; cheetah; \"\n\nconsole.log(myConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\"));\n// \"sage. basil. oregano. pepper. parsley. \"\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using the arguments object",
      "chunkIndex": 27,
      "totalChunks": 38,
      "startLineNumber": 493,
      "endLineNumber": 517
    }
  },
  {
    "content": "console.log(myConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\"));\n// \"sage. basil. oregano. pepper. parsley. \"\n```\n\n> [!NOTE]\n> The `arguments` variable is \"array-like\", but not an array. It is array-like in that it has a numbered index and a `length` property. However, it does _not_ possess all of the array-manipulation methods.\n\nSee the {{jsxref(\"Function\")}} object in the JavaScript reference for more information.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using the arguments object",
      "chunkIndex": 28,
      "totalChunks": 38,
      "startLineNumber": 515,
      "endLineNumber": 522
    }
  },
  {
    "content": "## Function parameters\n\nThere are two special kinds of parameter syntax: _default parameters_ and _rest parameters_.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Function parameters",
      "chunkIndex": 29,
      "totalChunks": 38,
      "startLineNumber": 524,
      "endLineNumber": 526
    }
  },
  {
    "content": "### Default parameters\n\nIn JavaScript, parameters of functions default to `undefined`. However, in some situations it might be useful to set a different default value. This is exactly what default parameters do.\n\nIn the past, the general strategy for setting defaults was to test parameter values in the body of the function and assign a value if they are `undefined`.\n\nIn the following example, if no value is provided for `b`, its value would be `undefined` when evaluating `a*b`, and a call to `multiply` would normally have returned `NaN`. However, this is prevented by the second line in this example:\n\n```js\nfunction multiply(a, b) {\n  b = typeof b !== \"undefined\" ? b : 1;\n  return a * b;\n}\n\nconsole.log(multiply(5)); // 5\n```\n\nWith _default parameters_, a manual check in the function body is no longer necessary. You can put `1` as the default value for `b` in the function head:\n\n```js\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nconsole.log(multiply(5)); // 5\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Default parameters",
      "chunkIndex": 30,
      "totalChunks": 38,
      "startLineNumber": 528,
      "endLineNumber": 553
    }
  },
  {
    "content": "```js\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nconsole.log(multiply(5)); // 5\n```\n\nFor more details, see [default parameters](/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) in the reference.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Default parameters",
      "chunkIndex": 31,
      "totalChunks": 38,
      "startLineNumber": 547,
      "endLineNumber": 555
    }
  },
  {
    "content": "### Rest parameters\n\nThe [rest parameter](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) syntax allows us to represent an indefinite number of arguments as an array.\n\nIn the following example, the function `multiply` uses _rest parameters_ to collect arguments from the second one to the end. The function then multiplies these by the first argument.\n\n```js\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map((x) => multiplier * x);\n}\n\nconst arr = multiply(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Rest parameters",
      "chunkIndex": 32,
      "totalChunks": 38,
      "startLineNumber": 557,
      "endLineNumber": 570
    }
  },
  {
    "content": "## Arrow functions\n\nAn [arrow function expression](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) (also called a _fat arrow_ to distinguish from a hypothetical `->` syntax in future JavaScript) has a shorter syntax compared to function expressions and does not have its own [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), [`arguments`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments), [`super`](/en-US/docs/Web/JavaScript/Reference/Operators/super), or [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target). Arrow functions are always anonymous.\n\nTwo factors influenced the introduction of arrow functions: _shorter functions_ and _non-binding_ of `this`.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arrow functions",
      "chunkIndex": 33,
      "totalChunks": 38,
      "startLineNumber": 572,
      "endLineNumber": 576
    }
  },
  {
    "content": "### Shorter functions\n\nIn some functional patterns, shorter functions are welcome. Compare:\n\n```js\nconst a = [\"Hydrogen\", \"Helium\", \"Lithium\", \"Beryllium\"];\n\nconst a2 = a.map(function (s) {\n  return s.length;\n});\n\nconsole.log(a2); // [8, 6, 7, 9]\n\nconst a3 = a.map((s) => s.length);\n\nconsole.log(a3); // [8, 6, 7, 9]\n```",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Shorter functions",
      "chunkIndex": 34,
      "totalChunks": 38,
      "startLineNumber": 578,
      "endLineNumber": 594
    }
  },
  {
    "content": "### No separate this\n\nUntil arrow functions, every new function defined its own [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) value (a new object in the case of a constructor, undefined in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) function calls, the base object if the function is called as an \"object method\", etc.). This proved to be less than ideal with an object-oriented style of programming.\n\n```js\nfunction Person() {\n  // The Person() constructor defines `this` as itself.\n  this.age = 0;\n\n  setInterval(function growUp() {\n    // In nonstrict mode, the growUp() function defines `this`\n    // as the global object, which is different from the `this`\n    // defined by the Person() constructor.\n    this.age++;\n  }, 1000);\n}\n\nconst p = new Person();\n```\n\nIn ECMAScript 3/5, this issue was fixed by assigning the value in `this` to a variable that could be closed over.",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "No separate this",
      "chunkIndex": 35,
      "totalChunks": 38,
      "startLineNumber": 596,
      "endLineNumber": 616
    }
  },
  {
    "content": "const p = new Person();\n```\n\nIn ECMAScript 3/5, this issue was fixed by assigning the value in `this` to a variable that could be closed over.\n\n```js\nfunction Person() {\n  // Some choose `that` instead of `self`.\n  // Choose one and be consistent.\n  const self = this;\n  self.age = 0;\n\n  setInterval(function growUp() {\n    // The callback refers to the `self` variable of which\n    // the value is the expected object.\n    self.age++;\n  }, 1000);\n}\n```\n\nAlternatively, a [bound function](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) could be created so that the proper `this` value would be passed to the `growUp()` function.\n\nAn arrow function does not have its own `this`; the `this` value of the enclosing execution context is used. Thus, in the following code, the `this` within the function that is passed to `setInterval` has the same value as `this` in the enclosing function:\n\n```js\nfunction Person() {\n  this.age = 0;",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "No separate this",
      "chunkIndex": 36,
      "totalChunks": 38,
      "startLineNumber": 613,
      "endLineNumber": 639
    }
  },
  {
    "content": "```js\nfunction Person() {\n  this.age = 0;\n\n  setInterval(() => {\n    this.age++; // `this` properly refers to the person object\n  }, 1000);\n}\n\nconst p = new Person();\n```\n\n{{PreviousNext(\"Web/JavaScript/Guide/Loops_and_iteration\", \"Web/JavaScript/Guide/Expressions_and_operators\")}}",
    "metadata": {
      "source": "functions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Functions",
      "documentTitle": "Functions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "No separate this",
      "chunkIndex": 37,
      "totalChunks": 38,
      "startLineNumber": 637,
      "endLineNumber": 649
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Introduction\", \"Web/JavaScript/Guide/Control_flow_and_error_handling\")}}\n\nThis chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 54,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Basics\n\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\n\nJavaScript is **case-sensitive** and uses the **Unicode** character set. For example, the word Früh (which means \"early\" in German) could be used as a variable name.\n\n```js\nconst Früh = \"foobar\";\n```\n\nBut, the variable `früh` is not the same as `Früh` because JavaScript is case sensitive.\n\nIn JavaScript, instructions are called {{Glossary(\"Statement\", \"statements\")}} and are separated by semicolons (;).\n\nA semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they _must_ be separated by semicolons.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basics",
      "chunkIndex": 1,
      "totalChunks": 54,
      "startLineNumber": 12,
      "endLineNumber": 26
    }
  },
  {
    "content": "A semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they _must_ be separated by semicolons.\n\n> [!NOTE]\n> ECMAScript also has rules for automatic insertion of semicolons ([ASI](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion)) to end statements. (For more information, see the detailed reference about JavaScript's [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar).)\n\nIt is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code.\n\nThe source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are _tokens_, _control characters_, _line terminators_, _comments_, or {{Glossary(\"whitespace\")}}. (Spaces, tabs, and newline characters are considered whitespace.)",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basics",
      "chunkIndex": 2,
      "totalChunks": 54,
      "startLineNumber": 26,
      "endLineNumber": 33
    }
  },
  {
    "content": "## Comments\n\nThe syntax of **comments** is the same as in C++ and in many other languages:\n\n```js\n// a one line comment\n\n/* this is a longer,\n * multi-line comment\n */\n```\n\nYou can't nest block comments. This often happens when you accidentally include a `*/` sequence in your comment, which will terminate the comment.\n\n```js-nolint example-bad\n/* You can't, however, /* nest comments */ SyntaxError */\n```\n\nIn this case, you need to break up the `*/` pattern. For example, by inserting a backslash:\n\n```js\n/* You can /* nest comments *\\/ by escaping slashes */\n```\n\nComments behave like whitespace, and are discarded during script execution.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comments",
      "chunkIndex": 3,
      "totalChunks": 54,
      "startLineNumber": 35,
      "endLineNumber": 59
    }
  },
  {
    "content": "```js\n/* You can /* nest comments *\\/ by escaping slashes */\n```\n\nComments behave like whitespace, and are discarded during script execution.\n\n> [!NOTE]\n> You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: `#!/usr/bin/env node`.\n>\n> This is called **hashbang comment** syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See [Hashbang comments](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#hashbang_comments) for more details.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comments",
      "chunkIndex": 4,
      "totalChunks": 54,
      "startLineNumber": 55,
      "endLineNumber": 64
    }
  },
  {
    "content": "## Declarations\n\nJavaScript has three kinds of variable declarations.\n\n- {{jsxref(\"Statements/var\", \"var\")}}\n  - : Declares a variable, optionally initializing it to a value.\n- {{jsxref(\"Statements/let\", \"let\")}}\n  - : Declares a block-scoped, local variable, optionally initializing it to a value.\n- {{jsxref(\"Statements/const\", \"const\")}}\n  - : Declares a block-scoped, read-only named constant.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declarations",
      "chunkIndex": 5,
      "totalChunks": 54,
      "startLineNumber": 66,
      "endLineNumber": 75
    }
  },
  {
    "content": "### Variables\n\nYou use variables as symbolic names for values in your application. The names of variables, called {{Glossary(\"Identifier\", \"identifiers\")}}, conform to certain rules.\n\nA JavaScript identifier usually starts with a letter, underscore (`_`), or dollar sign (`$`). Subsequent characters can also be digits (`0` – `9`). Because JavaScript is case sensitive, letters include the characters `A` through `Z` (uppercase) as well as `a` through `z` (lowercase).\n\nYou can use most Unicode letters such as `å` and `ü` in identifiers. (For more details, see the [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) reference.) You can also use [Unicode escape sequences](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals) to represent characters in identifiers.\n\nSome examples of legal names are `Number_hits`, `temp99`, `$credit`, and `_name`.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variables",
      "chunkIndex": 6,
      "totalChunks": 54,
      "startLineNumber": 77,
      "endLineNumber": 85
    }
  },
  {
    "content": "### Declaring variables\n\nYou can declare a variable in two ways:\n\n- With the keyword {{jsxref(\"Statements/var\", \"var\")}}. For example, `var x = 42`. This syntax can be used to declare both **local** and **global** variables, depending on the _execution context_.\n- With the keyword {{jsxref(\"Statements/const\", \"const\")}} or {{jsxref(\"Statements/let\", \"let\")}}. For example, `let y = 13`. This syntax can be used to declare a block-scope local variable. (See [Variable scope](#variable_scope) below.)\n\nYou can declare variables to unpack values using the [destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring) syntax. For example, `const { bar } = foo`. This will create a variable named `bar` and assign to it the value corresponding to the key of the same name from our object `foo`.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declaring variables",
      "chunkIndex": 7,
      "totalChunks": 54,
      "startLineNumber": 87,
      "endLineNumber": 94
    }
  },
  {
    "content": "Variables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an **[undeclared global](/en-US/docs/Web/JavaScript/Reference/Statements/var#description)** variable. This is an error in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode#assigning_to_undeclared_variables) and should be avoided altogether.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declaring variables",
      "chunkIndex": 8,
      "totalChunks": 54,
      "startLineNumber": 96,
      "endLineNumber": 96
    }
  },
  {
    "content": "### Declaration and initialization\n\nIn a statement like `let x = 42`, the `let x` part is called a _declaration_, and the `= 42` part is called an _initializer_. The declaration allows the variable to be accessed later in code without throwing a {{jsxref(\"ReferenceError\")}}, while the initializer assigns a value to the variable. In `var` and `let` declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n\n```js\nlet x;\nconsole.log(x); // logs \"undefined\"\n```\n\nIn essence, `let x = 42` is equivalent to `let x; x = 42`.\n\n`const` declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with `undefined` is likely a programmer mistake.\n\n```js-nolint example-bad\nconst x; // SyntaxError: Missing initializer in const declaration\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declaration and initialization",
      "chunkIndex": 9,
      "totalChunks": 54,
      "startLineNumber": 98,
      "endLineNumber": 113
    }
  },
  {
    "content": "### Variable scope\n\nA variable may belong to one of the following [scopes](/en-US/docs/Glossary/Scope):\n\n- Global scope: The default scope for all code running in script mode.\n- Module scope: The scope for code running in module mode.\n- Function scope: The scope created with a {{Glossary(\"function\")}}.\n\nIn addition, variables declared with [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) or [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const) can belong to an additional scope:\n\n- Block scope: The scope created with a pair of curly braces (a [block](/en-US/docs/Web/JavaScript/Reference/Statements/block)).\n\nWhen you declare a variable outside of any function, it is called a _global_ variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a _local_ variable, because it is available only within that function.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variable scope",
      "chunkIndex": 10,
      "totalChunks": 54,
      "startLineNumber": 115,
      "endLineNumber": 127
    }
  },
  {
    "content": "`let` and `const` declarations can also be scoped to the [block statement](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement) that they are declared in.\n\n```js\nif (Math.random() > 0.5) {\n  const y = 5;\n}\nconsole.log(y); // ReferenceError: y is not defined\n```\n\nHowever, variables created with `var` are not block-scoped, but only local to the _function (or global scope)_ that the block resides within.\n\nFor example, the following code will log `5`, because the scope of `x` is the global context (or the function context if the code is part of a function). The scope of `x` is not limited to the immediate `if` statement block.\n\n```js\nif (true) {\n  var x = 5;\n}\nconsole.log(x); // x is 5\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variable scope",
      "chunkIndex": 11,
      "totalChunks": 54,
      "startLineNumber": 129,
      "endLineNumber": 147
    }
  },
  {
    "content": "### Variable hoisting\n\n`var`-declared variables are [hoisted](/en-US/docs/Glossary/Hoisting), meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see `var` declarations as being \"lifted\" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always `undefined`, because only its _declaration_ and _default initialization (with `undefined`)_ is hoisted, but not its _value assignment_.\n\n```js\nconsole.log(x === undefined); // true\nvar x = 3;\n\n(function () {\n  console.log(x); // undefined\n  var x = \"local value\";\n})();\n```\n\nThe above examples will be interpreted the same as:\n\n```js\nvar x;\nconsole.log(x === undefined); // true\nx = 3;\n\n(function () {\n  var x;\n  console.log(x); // undefined\n  x = \"local value\";\n})();\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variable hoisting",
      "chunkIndex": 12,
      "totalChunks": 54,
      "startLineNumber": 149,
      "endLineNumber": 175
    }
  },
  {
    "content": "The above examples will be interpreted the same as:\n\n```js\nvar x;\nconsole.log(x === undefined); // true\nx = 3;\n\n(function () {\n  var x;\n  console.log(x); // undefined\n  x = \"local value\";\n})();\n```\n\nBecause of hoisting, all `var` statements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code.\n\nWhether `let` and `const` are hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a {{jsxref(\"ReferenceError\")}}, because the variable is in a \"[temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz)\" from the start of the block until the declaration is processed.\n\n```js\nconsole.log(x); // ReferenceError\nconst x = 3;\n\nconsole.log(y); // ReferenceError\nlet y = 3;\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variable hoisting",
      "chunkIndex": 13,
      "totalChunks": 54,
      "startLineNumber": 163,
      "endLineNumber": 187
    }
  },
  {
    "content": "```js\nconsole.log(x); // ReferenceError\nconst x = 3;\n\nconsole.log(y); // ReferenceError\nlet y = 3;\n```\n\nUnlike `var` declarations, which only hoist the declaration but not its value, [function declarations](/en-US/docs/Web/JavaScript/Guide/Functions#function_hoisting) are hoisted entirely — you can safely call the function anywhere in its scope. See the [hoisting](/en-US/docs/Glossary/Hoisting) glossary entry for more discussion.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variable hoisting",
      "chunkIndex": 14,
      "totalChunks": 54,
      "startLineNumber": 181,
      "endLineNumber": 189
    }
  },
  {
    "content": "### Global variables\n\nGlobal variables are in fact properties of the _global object_.\n\nIn web pages, the global object is {{domxref(\"window\")}}, so you can read and set global variables using the `window.variable` syntax. In all environments, the [`globalThis`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) variable (which itself is a global variable) may be used to read and set global variables. This is to provide a consistent interface among various JavaScript runtimes.\n\nConsequently, you can access global variables declared in one window or frame from another window or frame by specifying the `window` or `frame` name. For example, if a variable called `phoneNumber` is declared in a document, you can refer to this variable from an `iframe` as `parent.phoneNumber`.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Global variables",
      "chunkIndex": 15,
      "totalChunks": 54,
      "startLineNumber": 191,
      "endLineNumber": 197
    }
  },
  {
    "content": "### Constants\n\nYou can create a read-only, named constant with the {{jsxref(\"Statements/const\", \"const\")}} keyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign (`$`), and can contain alphabetic, numeric, or underscore characters.\n\n```js\nconst PI = 3.14;\n```\n\nA constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for `let` block-scope variables.\n\nYou cannot declare a constant with the same name as a function or variable in the same scope. For example:\n\n```js-nolint example-bad\n// THIS WILL CAUSE AN ERROR\nfunction f() {}\nconst f = 5;\n\n// THIS WILL CAUSE AN ERROR TOO\nfunction f() {\n  const g = 5;\n  var g;\n}\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constants",
      "chunkIndex": 16,
      "totalChunks": 54,
      "startLineNumber": 199,
      "endLineNumber": 221
    }
  },
  {
    "content": "```js-nolint example-bad\n// THIS WILL CAUSE AN ERROR\nfunction f() {}\nconst f = 5;\n\n// THIS WILL CAUSE AN ERROR TOO\nfunction f() {\n  const g = 5;\n  var g;\n}\n```\n\nHowever, `const` only prevents _re-assignments_, but doesn't prevent _mutations_. The properties of objects assigned to constants are not protected, so the following statement is executed without problems.\n\n```js\nconst MY_OBJECT = { key: \"value\" };\nMY_OBJECT.key = \"otherValue\";\n```\n\nAlso, the contents of an array are not protected, so the following statement is executed without problems.\n\n```js\nconst MY_ARRAY = [\"HTML\", \"CSS\"];\nMY_ARRAY.push(\"JAVASCRIPT\");\nconsole.log(MY_ARRAY); // ['HTML', 'CSS', 'JAVASCRIPT'];\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constants",
      "chunkIndex": 17,
      "totalChunks": 54,
      "startLineNumber": 211,
      "endLineNumber": 236
    }
  },
  {
    "content": "## Data structures and types",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data structures and types",
      "chunkIndex": 18,
      "totalChunks": 54,
      "startLineNumber": 238,
      "endLineNumber": 238
    }
  },
  {
    "content": "### Data types\n\nThe latest ECMAScript standard defines eight data types:\n\n- Seven data types that are {{Glossary(\"Primitive\", \"primitives\")}}:\n  1. {{Glossary(\"Boolean\")}}. `true` and `false`.\n  2. {{Glossary(\"null\")}}. A special keyword denoting a null value. (Because JavaScript is case-sensitive, `null` is not the same as `Null`, `NULL`, or any other variant.)\n  3. {{Glossary(\"undefined\")}}. A top-level property whose value is not defined.\n  4. {{Glossary(\"Number\")}}. An integer or floating point number. For example: `42` or `3.14159`.\n  5. {{Glossary(\"BigInt\")}}. An integer with arbitrary precision. For example: `9007199254740992n`.\n  6. {{Glossary(\"String\")}}. A sequence of characters that represent a text value. For example: `\"Howdy\"`.\n  7. [Symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). A data type whose instances are unique and immutable.\n\n- and {{Glossary(\"Object\")}}",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data types",
      "chunkIndex": 19,
      "totalChunks": 54,
      "startLineNumber": 240,
      "endLineNumber": 253
    }
  },
  {
    "content": "- and {{Glossary(\"Object\")}}\n\nAlthough these data types are relatively few, they enable you to perform useful operations with your applications. [Functions](/en-US/docs/Web/JavaScript/Guide/Functions) are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data types",
      "chunkIndex": 20,
      "totalChunks": 54,
      "startLineNumber": 253,
      "endLineNumber": 255
    }
  },
  {
    "content": "### Data type conversion\n\nJavaScript is a _dynamically typed_ language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution.\n\nSo, for example, you could define a variable as follows:\n\n```js\nlet answer = 42;\n```\n\nAnd later, you could assign the same variable a string value, for example:\n\n```js\nanswer = \"Thanks for all the fish!\";\n```\n\nBecause JavaScript is dynamically typed, this assignment does not cause an error message.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data type conversion",
      "chunkIndex": 21,
      "totalChunks": 54,
      "startLineNumber": 257,
      "endLineNumber": 273
    }
  },
  {
    "content": "### Numbers and the '+' operator\n\nIn expressions involving numeric and string values with the `+` operator, JavaScript converts numeric values to strings. For example, consider the following statements:\n\n```js\nx = \"The answer is \" + 42; // \"The answer is 42\"\ny = 42 + \" is the answer\"; // \"42 is the answer\"\nz = \"37\" + 7; // \"377\"\n```\n\nWith all other operators, JavaScript does _not_ convert numeric values to strings. For example:\n\n```js\n\"37\" - 7; // 30\n\"37\" * 7; // 259\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers and the '+' operator",
      "chunkIndex": 22,
      "totalChunks": 54,
      "startLineNumber": 275,
      "endLineNumber": 290
    }
  },
  {
    "content": "### Converting strings to numbers\n\nIn the case that a value representing a number is in memory as a string, there are methods for conversion.\n\n- {{jsxref(\"parseInt()\")}}\n- {{jsxref(\"parseFloat()\")}}\n- {{jsxref(\"Number()\")}}\n\n`parseInt` only returns whole numbers, so its use is diminished for decimals.\n\n> [!NOTE]\n> Additionally, a best practice for `parseInt` is to always include the _radix_ parameter. The radix parameter is used to specify which numerical system is to be used.\n\n```js\nparseInt(\"101\", 2); // 5\n```\n\nAn alternative method of retrieving a number from a string is with the `+` (unary plus) operator. This implicitly performs [number conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), which is the same process as the {{jsxref(\"Number()\")}} function.\n\n```js-nolint\n\"1.1\" + \"1.1\"; // '1.11.1'\n(+\"1.1\") + (+\"1.1\"); // 2.2\n// Note: the parentheses are added for clarity, not required.\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Converting strings to numbers",
      "chunkIndex": 23,
      "totalChunks": 54,
      "startLineNumber": 292,
      "endLineNumber": 315
    }
  },
  {
    "content": "## Literals\n\n_Literals_ represent values in JavaScript. These are fixed values—not variables—that you _literally_ provide in your script. This section describes the following types of literals:\n\n- [Array literals](#array_literals)\n- [Boolean literals](#boolean_literals)\n- [Numeric literals](#numeric_literals)\n- [Object literals](#object_literals)\n- [RegExp literals](#regexp_literals)\n- [String literals](#string_literals)",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Literals",
      "chunkIndex": 24,
      "totalChunks": 54,
      "startLineNumber": 317,
      "endLineNumber": 326
    }
  },
  {
    "content": "### Array literals\n\nAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets (`[]`). When you create an array using an array literal, it is initialized with the specified values as its elements, and its `length` is set to the number of arguments specified.\n\nThe following example creates the `coffees` array with three elements and a `length` of three:\n\n```js\nconst coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\n```\n\nAn array literal creates a new array object every time the literal is evaluated. For example, an array defined with a literal in the global scope is created once when the script loads. However, if the array literal is inside a function, a new array is instantiated every time that function is called.\n\n> [!NOTE]\n> Array literals create `Array` objects. See {{jsxref(\"Array\")}} and [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) for details on `Array` objects.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array literals",
      "chunkIndex": 25,
      "totalChunks": 54,
      "startLineNumber": 328,
      "endLineNumber": 341
    }
  },
  {
    "content": "#### Extra commas in array literals\n\nIf you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the `fish` array:\n\n```js\nconst fish = [\"Lion\", , \"Angel\"];\n```\n\nWhen you log this array, you will see:\n\n```js\nconsole.log(fish);\n// [ 'Lion', <1 empty item>, 'Angel' ]\n```\n\nNote that the second item is \"empty\", which is not exactly the same as the actual `undefined` value. When using array-traversing methods like [`Array.prototype.map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), empty slots are skipped. However, index-accessing `fish[1]` still returns `undefined`.\n\nIf you include a trailing comma at the end of the list of elements, the comma is ignored.\n\nIn the following example, the `length` of the array is three. There is no `myList[3]` and `myList[1]` is empty. All other commas in the list indicate a new element.\n\n```js\nconst myList = [\"home\", , \"school\"];\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extra commas in array literals",
      "chunkIndex": 26,
      "totalChunks": 54,
      "startLineNumber": 343,
      "endLineNumber": 366
    }
  },
  {
    "content": "```js\nconst myList = [\"home\", , \"school\"];\n```\n\nIn the following example, the `length` of the array is four, and `myList[0]` and `myList[2]` are missing.\n\n```js\nconst myList = [, \"home\", , \"school\"];\n```\n\nIn the following example, the `length` of the array is four, and `myList[1]` and `myList[3]` are missing. **Only the last comma is ignored.**\n\n```js\nconst myList = [\"home\", , \"school\", ,];\n```\n\n> [!NOTE]\n> [Trailing commas](/en-US/docs/Web/JavaScript/Reference/Trailing_commas) help keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line.\n>\n> ```diff\n> const myList = [\n>   \"home\",\n>   \"school\",\n> + \"hospital\",\n> ];\n> ```\n\nUnderstanding the behavior of extra commas is important to understanding JavaScript as a language.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extra commas in array literals",
      "chunkIndex": 27,
      "totalChunks": 54,
      "startLineNumber": 364,
      "endLineNumber": 391
    }
  },
  {
    "content": "Understanding the behavior of extra commas is important to understanding JavaScript as a language.\n\nHowever, when writing your own code, you should explicitly declare the missing elements as `undefined`, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability.\n\n```js-nolint\nconst myList = [\"home\", /* empty */, \"school\", /* empty */, ];\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extra commas in array literals",
      "chunkIndex": 28,
      "totalChunks": 54,
      "startLineNumber": 391,
      "endLineNumber": 397
    }
  },
  {
    "content": "### Boolean literals\n\nThe Boolean type has two literal values: `true` and `false`.\n\n> [!NOTE]\n> Do not confuse the primitive Boolean values `true` and `false` with the true and false values of the {{jsxref(\"Boolean\")}} object.\n>\n> The Boolean object is a wrapper around the primitive Boolean data type. See {{jsxref(\"Boolean\")}} for more information.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boolean literals",
      "chunkIndex": 29,
      "totalChunks": 54,
      "startLineNumber": 399,
      "endLineNumber": 406
    }
  },
  {
    "content": "### Numeric literals\n\nJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10.\n\nNote that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like `-123.4` are fine, being interpreted as a unary `-` operator applied to the numeric literal `123.4`.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numeric literals",
      "chunkIndex": 30,
      "totalChunks": 54,
      "startLineNumber": 408,
      "endLineNumber": 412
    }
  },
  {
    "content": "#### Integer literals\n\nInteger and {{jsxref(\"BigInt\")}} literals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2).",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Integer literals",
      "chunkIndex": 31,
      "totalChunks": 54,
      "startLineNumber": 414,
      "endLineNumber": 416
    }
  },
  {
    "content": "- A _decimal_ integer literal is a sequence of digits without a leading `0` (zero).\n- A leading `0` (zero) on an integer literal, or a leading `0o` (or `0O`) indicates it is in _octal_. Octal integer literals can include only the digits `0` – `7`.\n- A leading `0x` (or `0X`) indicates a _hexadecimal_ integer literal. Hexadecimal integers can include digits (`0` – `9`) and the letters `a` – `f` and `A` – `F`. (The case of a character does not change its value. Therefore: `0xa` = `0xA` = `10` and `0xf` = `0xF` = `15`.)\n- A leading `0b` (or `0B`) indicates a _binary_ integer literal. Binary integer literals can only include the digits `0` and `1`.\n- A trailing `n` suffix on an integer literal indicates a {{jsxref(\"BigInt\")}} literal. The {{jsxref(\"BigInt\")}} literal can use any of the above bases. Note that leading-zero octal syntax like `0123n` is not allowed, but `0o123n` is fine.\n\nSome examples of integer literals are:",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Integer literals",
      "chunkIndex": 32,
      "totalChunks": 54,
      "startLineNumber": 418,
      "endLineNumber": 424
    }
  },
  {
    "content": "Some examples of integer literals are:\n\n```plain\n0, 117, 123456789123456789n             (decimal, base 10)\n015, 0001, 0o777777777777n              (octal, base 8)\n0x1123, 0x00111, 0x123456789ABCDEFn     (hexadecimal, \"hex\" or base 16)\n0b11, 0b0011, 0b11101001010101010101n   (binary, base 2)\n```\n\nFor more information, see [Numeric literals in the Lexical grammar reference](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals).",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Integer literals",
      "chunkIndex": 33,
      "totalChunks": 54,
      "startLineNumber": 424,
      "endLineNumber": 433
    }
  },
  {
    "content": "#### Floating-point literals\n\nA floating-point literal can have the following parts:\n\n- An unsigned decimal integer,\n- A decimal point (`.`),\n- A fraction (another decimal number),\n- An exponent.\n\nThe exponent part is an `e` or `E` followed by an integer, which can be signed (preceded by `+` or `-`). A floating-point literal must have at least one digit, and either a decimal point or `e` (or `E`).\n\nMore succinctly, the syntax is:\n\n```plain\n[digits].[digits][(E|e)[(+|-)]digits]\n```\n\nFor example:\n\n```js-nolint\n3.1415926\n.123456789\n3.1E+12\n.1e-23\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Floating-point literals",
      "chunkIndex": 34,
      "totalChunks": 54,
      "startLineNumber": 435,
      "endLineNumber": 459
    }
  },
  {
    "content": "### Object literals\n\nAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (`{}`).\n\n> [!WARNING]\n> Do not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the `{` will be interpreted as the beginning of a block.\n\nThe following is an example of an object literal. The first element of the `car` object defines a property, `myCar`, and assigns to it a new string, `\"Saturn\"`; the second element, the `getCar` property, is immediately assigned the result of invoking the function `(carTypes(\"Honda\"))`; the third element, the `special` property, uses an existing variable (`sales`).\n\n```js\nconst sales = \"Toyota\";\n\nfunction carTypes(name) {\n  return name === \"Honda\" ? name : `Sorry, we don't sell ${name}.`;\n}\n\nconst car = { myCar: \"Saturn\", getCar: carTypes(\"Honda\"), special: sales };",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Object literals",
      "chunkIndex": 35,
      "totalChunks": 54,
      "startLineNumber": 461,
      "endLineNumber": 477
    }
  },
  {
    "content": "function carTypes(name) {\n  return name === \"Honda\" ? name : `Sorry, we don't sell ${name}.`;\n}\n\nconst car = { myCar: \"Saturn\", getCar: carTypes(\"Honda\"), special: sales };\n\nconsole.log(car.myCar); // Saturn\nconsole.log(car.getCar); // Honda\nconsole.log(car.special); // Toyota\n```\n\nAdditionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options.\n\n```js\nconst car = { manyCars: { a: \"Saab\", b: \"Jeep\" }, 7: \"Mazda\" };\n\nconsole.log(car.manyCars.b); // Jeep\nconsole.log(car[7]); // Mazda\n```\n\nObject property names can be any string, including the empty string. If the property name would not be a valid JavaScript {{Glossary(\"Identifier\", \"identifier\")}} or number, it must be enclosed in quotes.\n\nProperty names that are not valid identifiers cannot be accessed as a dot (`.`) property.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Object literals",
      "chunkIndex": 36,
      "totalChunks": 54,
      "startLineNumber": 473,
      "endLineNumber": 495
    }
  },
  {
    "content": "Property names that are not valid identifiers cannot be accessed as a dot (`.`) property.\n\n```js-nolint example-bad\nconst unusualPropertyNames = {\n  \"\": \"An empty string\",\n  \"!\": \"Bang!\",\n};\nconsole.log(unusualPropertyNames.\"\"); // SyntaxError: Unexpected string\nconsole.log(unusualPropertyNames.!); // SyntaxError: Unexpected token !\n```\n\nInstead, they must be accessed with the bracket notation (`[]`).\n\n```js example-good\nconsole.log(unusualPropertyNames[\"\"]); // An empty string\nconsole.log(unusualPropertyNames[\"!\"]); // Bang!\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Object literals",
      "chunkIndex": 37,
      "totalChunks": 54,
      "startLineNumber": 495,
      "endLineNumber": 511
    }
  },
  {
    "content": "#### Enhanced Object literals\n\nObject literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for `foo: foo` assignments, defining methods, making `super` calls, and computing property names with expressions.\n\nTogether, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences.\n\n```js\nconst obj = {\n  // __proto__\n  __proto__: theProtoObj,\n  // Shorthand for 'handler: handler'\n  handler,\n  // Methods\n  toString() {\n    // Super calls\n    return `d ${super.toString()}`;\n  },\n  // Computed (dynamic) property names\n  [\"prop_\" + (() => 42)()]: 42,\n};\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Enhanced Object literals",
      "chunkIndex": 38,
      "totalChunks": 54,
      "startLineNumber": 513,
      "endLineNumber": 533
    }
  },
  {
    "content": "### RegExp literals\n\nA regex literal (which is defined in detail [later](/en-US/docs/Web/JavaScript/Guide/Regular_expressions)) is a pattern enclosed between slashes. The following is an example of a regex literal.\n\n```js\nconst re = /ab+c/;\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "RegExp literals",
      "chunkIndex": 39,
      "totalChunks": 54,
      "startLineNumber": 535,
      "endLineNumber": 541
    }
  },
  {
    "content": "### String literals\n\nA string literal is zero or more characters enclosed in double (`\"`) or single (`'`) quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks).\n\nThe following are examples of string literals:\n\n```js-nolint\n'foo'\n\"bar\"\n'1234'\n'one line \\n another line'\n\"Joyo's cat\"\n```\n\nYou should use string literals unless you specifically need to use a `String` object. See {{jsxref(\"String\")}} for details on `String` objects.\n\nYou can call any of the {{jsxref(\"String\")}} object's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the `length` property with a string literal:\n\n```js\n// Will print the number of symbols in the string including whitespace.\nconsole.log(\"Joyo's cat\".length); // In this case, 10.\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 40,
      "totalChunks": 54,
      "startLineNumber": 543,
      "endLineNumber": 564
    }
  },
  {
    "content": "```js\n// Will print the number of symbols in the string including whitespace.\nconsole.log(\"Joyo's cat\".length); // In this case, 10.\n```\n\n[Template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals) are also available. Template literals are enclosed by the back-tick (`` ` ``) ([grave accent](https://en.wikipedia.org/wiki/Grave_accent)) character instead of double or single quotes.\n\nTemplate literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.)\n\n```js\n// Basic literal string creation\n`In JavaScript '\\n' is a line-feed.`;\n\n// Multiline strings\n`In JavaScript, template strings can run\n over multiple lines, but double and single\n quoted strings cannot.`;\n\n// String interpolation\nconst name = \"Lev\",\n  time = \"today\";\n`Hello ${name}, how are you ${time}?`;\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 41,
      "totalChunks": 54,
      "startLineNumber": 561,
      "endLineNumber": 583
    }
  },
  {
    "content": "// String interpolation\nconst name = \"Lev\",\n  time = \"today\";\n`Hello ${name}, how are you ${time}?`;\n```\n\n[Tagged templates](/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) are a compact syntax for specifying a template literal along with a call to a \"tag\" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal — as in the following example, where the template tag function is named `print`. The `print` function will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky `[object Object]`.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 42,
      "totalChunks": 54,
      "startLineNumber": 579,
      "endLineNumber": 585
    }
  },
  {
    "content": "```js\nconst formatArg = (arg) => {\n  if (Array.isArray(arg)) {\n    // Print a bulleted list\n    return arg.map((part) => `- ${part}`).join(\"\\n\");\n  }\n  if (arg.toString === Object.prototype.toString) {\n    // This object will be serialized to \"[object Object]\".\n    // Let's print something nicer.\n    return JSON.stringify(arg);\n  }\n  return arg;\n};\n\nconst print = (segments, ...args) => {\n  // For any well-formed template literal, there will always be N args and\n  // (N+1) string segments.\n  let message = segments[0];\n  segments.slice(1).forEach((segment, index) => {\n    message += formatArg(args[index]) + segment;\n  });\n  console.log(message);\n};\n\nconst todos = [\n  \"Learn JavaScript\",\n  \"Learn Web APIs\",\n  \"Set up my website\",\n  \"Profit!\",\n];\n\nconst progress = { javascript: 20, html: 50, css: 10 };\n\nprint`I need to do:\n${todos}\nMy current progress is: ${progress}\n`;",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 43,
      "totalChunks": 54,
      "startLineNumber": 587,
      "endLineNumber": 623
    }
  },
  {
    "content": "const progress = { javascript: 20, html: 50, css: 10 };\n\nprint`I need to do:\n${todos}\nMy current progress is: ${progress}\n`;\n\n// I need to do:\n// - Learn JavaScript\n// - Learn Web APIs\n// - Set up my website\n// - Profit!\n// My current progress is: {\"javascript\":20,\"html\":50,\"css\":10}\n```\n\nSince tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call:\n\n```js\nprint([\"I need to do:\\n\", \"\\nMy current progress is: \", \"\\n\"], todos, progress);\n```\n\nThis may be reminiscent of the `console.log`-style interpolation:\n\n```js\nconsole.log(\"I need to do:\\n%o\\nMy current progress is: %o\\n\", todos, progress);\n```\n\nYou can see how the tagged template reads more naturally than a traditional \"formatter\" function, where the variables and the template itself have to be declared separately.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 44,
      "totalChunks": 54,
      "startLineNumber": 618,
      "endLineNumber": 645
    }
  },
  {
    "content": "#### Using special characters in strings\n\nIn addition to ordinary characters, you can also include special characters in strings, as shown in the following example.\n\n```js\n\"one line \\n another line\";\n```\n\nThe following table lists the special characters that you can use in JavaScript strings.",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 45,
      "totalChunks": 54,
      "startLineNumber": 647,
      "endLineNumber": 655
    }
  },
  {
    "content": "| Character   | Meaning                                                                                                                                                                                                                                              |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `\\0`        | Null Byte                                                                                                                                                                                                                                            |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 46,
      "totalChunks": 54,
      "startLineNumber": 657,
      "endLineNumber": 659
    }
  },
  {
    "content": "| `\\b`        | Backspace                                                                                                                                                                                                                                            |\n| `\\f`        | Form Feed                                                                                                                                                                                                                                            |\n| `\\n`        | New Line                                                                                                                                                                                                                                             |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 47,
      "totalChunks": 54,
      "startLineNumber": 660,
      "endLineNumber": 662
    }
  },
  {
    "content": "| `\\r`        | Carriage Return                                                                                                                                                                                                                                      |\n| `\\t`        | Tab                                                                                                                                                                                                                                                  |\n| `\\v`        | Vertical tab                                                                                                                                                                                                                                         |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 48,
      "totalChunks": 54,
      "startLineNumber": 663,
      "endLineNumber": 665
    }
  },
  {
    "content": "| `\\'`        | Apostrophe or single quote                                                                                                                                                                                                                           |\n| `\\\"`        | Double quote                                                                                                                                                                                                                                         |\n| `\\\\`        | Backslash character                                                                                                                                                                                                                                  |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 49,
      "totalChunks": 54,
      "startLineNumber": 666,
      "endLineNumber": 668
    }
  },
  {
    "content": "| `\\XXX`      | The character with the Latin-1 encoding specified by up to three octal digits `XXX` between `0` and `377`. For example, `\\251` is the octal sequence for the copyright symbol.                                                                       |\n| `\\xXX`      | The character with the Latin-1 encoding specified by the two hexadecimal digits `XX` between `00` and `FF`. For example, `\\xA9` is the hexadecimal sequence for the copyright symbol.                                                                |\n| `\\uXXXX`    | The Unicode character specified by the four hexadecimal digits `XXXX`. For example, `\\u00A9` is the Unicode sequence for the copyright symbol. See [Unicode escape sequences](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals). |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 50,
      "totalChunks": 54,
      "startLineNumber": 669,
      "endLineNumber": 671
    }
  },
  {
    "content": "| `\\u{XXXXX}` | Unicode code point escapes. For example, `\\u{2F804}` is the same as the Unicode escapes `\\uD87E\\uDC04`.                                                                                                                                              |",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters in strings",
      "chunkIndex": 51,
      "totalChunks": 54,
      "startLineNumber": 672,
      "endLineNumber": 672
    }
  },
  {
    "content": "#### Escaping characters\n\nFor characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided.\n\nYou can insert a quotation mark inside a string by preceding it with a backslash. This is known as _escaping_ the quotation mark. For example:\n\n```js-nolint\nconst quote = \"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\";\nconsole.log(quote);\n```\n\nThe result of this would be:\n\n```plain\nHe read \"The Cremation of Sam McGee\" by R.W. Service.\n```\n\nTo include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path `c:\\temp` to a string, use the following:\n\n```js\nconst home = \"c:\\\\temp\";\n```\n\nYou can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string.\n\n```js\nconst str =\n  \"this string \\\nis broken \\\nacross multiple \\\nlines.\";\nconsole.log(str); // this string is broken across multiple lines.\n```",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Escaping characters",
      "chunkIndex": 52,
      "totalChunks": 54,
      "startLineNumber": 674,
      "endLineNumber": 706
    }
  },
  {
    "content": "## More information\n\nThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide:\n\n- [Control flow and error handling](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling) guide\n- [Loops and iteration](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n- [Functions](/en-US/docs/Web/JavaScript/Guide/Functions)\n- [Expressions and operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators) guide\n\nIn the next chapter, we will have a look at control flow constructs and error handling.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Introduction\", \"Web/JavaScript/Guide/Control_flow_and_error_handling\")}}",
    "metadata": {
      "source": "grammar_and_types/index.md",
      "documentSlug": "Web/JavaScript/Guide/Grammar_and_types",
      "documentTitle": "Grammar and types",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "More information",
      "chunkIndex": 53,
      "totalChunks": 54,
      "startLineNumber": 708,
      "endLineNumber": 719
    }
  },
  {
    "content": "The JavaScript Guide shows you how to use [JavaScript](/en-US/docs/Web/JavaScript) and gives an overview of the language. If you need exhaustive information about a language feature, have a look at the [JavaScript reference](/en-US/docs/Web/JavaScript/Reference).\n\nThis Guide is divided into the following chapters.\n\n## Introduction\n\nOverview: [Introduction](/en-US/docs/Web/JavaScript/Guide/Introduction)\n\n- [About this guide](/en-US/docs/Web/JavaScript/Guide/Introduction#where_to_find_javascript_information)\n- [About JavaScript](/en-US/docs/Web/JavaScript/Guide/Introduction#what_is_javascript)\n- [JavaScript and Java](/en-US/docs/Web/JavaScript/Guide/Introduction#javascript_and_java)\n- [ECMAScript](/en-US/docs/Web/JavaScript/Guide/Introduction#javascript_and_the_ecmascript_specification)\n- [Tools](/en-US/docs/Web/JavaScript/Guide/Introduction#getting_started_with_javascript)\n- [What's next](/en-US/docs/Web/JavaScript/Guide/Introduction#whats_next)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 14,
      "startLineNumber": 8,
      "endLineNumber": 21
    }
  },
  {
    "content": "## Grammar and types\n\nOverview: [Grammar and types](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types)\n\n- [Basic syntax & comments](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#basics)\n- [Declarations](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declarations)\n- [Variable scope](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_scope)\n- [Variable hoisting](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_hoisting)\n- [Data structures and types](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#data_structures_and_types)\n- [Literals](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#literals)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grammar and types",
      "chunkIndex": 1,
      "totalChunks": 14,
      "startLineNumber": 23,
      "endLineNumber": 32
    }
  },
  {
    "content": "## Control flow and error handling\n\nOverview: [Control flow and error handling](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling)\n\n- [`if...else`](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#if...else_statement)\n- [`switch`](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#switch_statement)\n- [`try`/`catch`/`throw`](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements)\n- [Error objects](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#utilizing_error_objects)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control flow and error handling",
      "chunkIndex": 2,
      "totalChunks": 14,
      "startLineNumber": 34,
      "endLineNumber": 41
    }
  },
  {
    "content": "## Loops and iteration\n\nOverview: [Loops and iteration](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\n\n- [`for`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for_statement)\n- [`while`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#while_statement)\n- [`do...while`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#do...while_statement)\n- [`continue`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#continue_statement)\n- [`break`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#break_statement)\n- [`for...in`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_statement)\n- [`for...of`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loops and iteration",
      "chunkIndex": 3,
      "totalChunks": 14,
      "startLineNumber": 43,
      "endLineNumber": 53
    }
  },
  {
    "content": "## Functions\n\nOverview: [Functions](/en-US/docs/Web/JavaScript/Guide/Functions)\n\n- [Defining functions](/en-US/docs/Web/JavaScript/Guide/Functions#defining_functions)\n- [Calling functions](/en-US/docs/Web/JavaScript/Guide/Functions#calling_functions)\n- [Function scopes and closures](/en-US/docs/Web/JavaScript/Guide/Functions#function_scopes_and_closures)\n- [Arguments](/en-US/docs/Web/JavaScript/Guide/Functions#using_the_arguments_object) & [parameters](/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters)\n- [Arrow functions](/en-US/docs/Web/JavaScript/Guide/Functions#arrow_functions)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions",
      "chunkIndex": 4,
      "totalChunks": 14,
      "startLineNumber": 55,
      "endLineNumber": 63
    }
  },
  {
    "content": "## Expressions and operators\n\nOverview: [Expressions and operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators)\n\n- [Assignment](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#assignment_operators) & [Comparisons](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#comparison_operators)\n- [Arithmetic operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#arithmetic_operators)\n- [Bitwise](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators) & [logical operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#logical_operators)\n- [Conditional (ternary) operator](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#conditional_ternary_operator)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Expressions and operators",
      "chunkIndex": 5,
      "totalChunks": 14,
      "startLineNumber": 65,
      "endLineNumber": 72
    }
  },
  {
    "content": "## Numbers and strings\n\nOverview: [Numbers and strings](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings)\n\n- [Numbers](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#numbers)\n- [`Number` object](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#number_object)\n- [`Math` object](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#math_object)\n- [Strings](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#strings)\n- [`String` object](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#string_object)\n- [Template literals](/en-US/docs/Web/JavaScript/Guide/Numbers_and_strings#template_literals)\n\n## Representing dates & times\n\nOverview: [Representing dates & times](/en-US/docs/Web/JavaScript/Guide/Representing_dates_times)\n\n- [`Date` object](/en-US/docs/Web/JavaScript/Guide/Representing_dates_times#date_object)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers and strings",
      "chunkIndex": 6,
      "totalChunks": 14,
      "startLineNumber": 74,
      "endLineNumber": 89
    }
  },
  {
    "content": "## Regular expressions\n\nOverview: [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n\n- [Creating a regular expression](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#creating_a_regular_expression)\n- [Writing a regular expression pattern](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#writing_a_regular_expression_pattern)\n  - [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions)\n  - [Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes)\n  - [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences)\n  - [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)\n\n## Indexed collections\n\nOverview: [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Regular expressions",
      "chunkIndex": 7,
      "totalChunks": 14,
      "startLineNumber": 91,
      "endLineNumber": 104
    }
  },
  {
    "content": "## Indexed collections\n\nOverview: [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections)\n\n## Keyed collections\n\nOverview: [Keyed collections](/en-US/docs/Web/JavaScript/Guide/Keyed_collections)\n\n- [`Map`](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#map_object)\n- [`WeakMap`](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object)\n- [`Set`](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#set_object)\n- [`WeakSet`](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakset_object)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Indexed collections",
      "chunkIndex": 8,
      "totalChunks": 14,
      "startLineNumber": 102,
      "endLineNumber": 113
    }
  },
  {
    "content": "## Working with objects\n\nOverview: [Working with objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects)\n\n- [Objects and properties](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties)\n- [Creating objects](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#creating_new_objects)\n- [Defining methods](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_methods)\n- [Getter and setter](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters)\n\n## Using classes\n\nOverview: [Using classes](/en-US/docs/Web/JavaScript/Guide/Using_classes)\n\n- [Declaring a class](/en-US/docs/Web/JavaScript/Guide/Using_classes#declaring_a_class)\n- [Various class features](/en-US/docs/Web/JavaScript/Guide/Using_classes#constructor)\n- [Extends and inheritance](/en-US/docs/Web/JavaScript/Guide/Using_classes#extends_and_inheritance)\n- [Why classes?](/en-US/docs/Web/JavaScript/Guide/Using_classes#why_classes)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Working with objects",
      "chunkIndex": 9,
      "totalChunks": 14,
      "startLineNumber": 115,
      "endLineNumber": 131
    }
  },
  {
    "content": "## Promises\n\nOverview: [Promises](/en-US/docs/Web/JavaScript/Guide/Using_promises)\n\n- [Guarantees](/en-US/docs/Web/JavaScript/Guide/Using_promises#guarantees)\n- [Chaining](/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining)\n- [Error handling](/en-US/docs/Web/JavaScript/Guide/Using_promises#error_handling)\n- [Composition](/en-US/docs/Web/JavaScript/Guide/Using_promises#composition)\n- [Timing](/en-US/docs/Web/JavaScript/Guide/Using_promises#timing)\n\n## Typed arrays\n\nOverview: [Typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays)\n\n## Iterators and generators\n\nOverview: [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)\n\n- [Iterators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#iterators)\n- [Iterables](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#iterables)\n- [Generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators#generator_functions)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Promises",
      "chunkIndex": 10,
      "totalChunks": 14,
      "startLineNumber": 133,
      "endLineNumber": 153
    }
  },
  {
    "content": "## Internationalization\n\nOverview: [Internationalization](/en-US/docs/Web/JavaScript/Guide/Internationalization)\n\n- [Date and time formatting](/en-US/docs/Web/JavaScript/Guide/Internationalization#date_and_time_formatting)\n- [Number formatting](/en-US/docs/Web/JavaScript/Guide/Internationalization#number_formatting)\n- [Collation](/en-US/docs/Web/JavaScript/Guide/Internationalization#collation)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Internationalization",
      "chunkIndex": 11,
      "totalChunks": 14,
      "startLineNumber": 155,
      "endLineNumber": 161
    }
  },
  {
    "content": "## JavaScript modules\n\nOverview: [JavaScript modules](/en-US/docs/Web/JavaScript/Guide/Modules)\n\n- [Exporting](/en-US/docs/Web/JavaScript/Guide/Modules#exporting_module_features)\n- [Importing](/en-US/docs/Web/JavaScript/Guide/Modules#importing_features_into_your_script)\n- [Default exports](/en-US/docs/Web/JavaScript/Guide/Modules#default_exports_versus_named_exports)\n- [Renaming features](/en-US/docs/Web/JavaScript/Guide/Modules#renaming_imports_and_exports)\n- [Aggregating modules](/en-US/docs/Web/JavaScript/Guide/Modules#aggregating_modules)\n- [Dynamic module loading](/en-US/docs/Web/JavaScript/Guide/Modules#dynamic_module_loading)",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript modules",
      "chunkIndex": 12,
      "totalChunks": 14,
      "startLineNumber": 163,
      "endLineNumber": 172
    }
  },
  {
    "content": "## Advanced topics\n\nAfter you have learned all fundamental features of JavaScript, you can explore some more niche features, or dive deeper into the language's mechanisms and concepts.\n\n- [Language overview](/en-US/docs/Web/JavaScript/Guide/Language_overview)\n- [Data structures](/en-US/docs/Web/JavaScript/Guide/Data_structures)\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties)\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain)\n- [Equality comparisons and sameness](/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness)\n- [Closures](/en-US/docs/Web/JavaScript/Guide/Closures)\n- [Meta programming](/en-US/docs/Web/JavaScript/Guide/Meta_programming)\n- [Memory management](/en-US/docs/Web/JavaScript/Guide/Memory_management)\n\n{{Next(\"Web/JavaScript/Guide/Introduction\")}}",
    "metadata": {
      "source": "index.md",
      "documentSlug": "Web/JavaScript/Guide",
      "documentTitle": "JavaScript Guide",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced topics",
      "chunkIndex": 13,
      "totalChunks": 14,
      "startLineNumber": 174,
      "endLineNumber": 187
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Regular_expressions\", \"Web/JavaScript/Guide/Keyed_collections\")}}\n\nThis chapter introduces collections of data which are ordered by an index value. This includes arrays and array-like constructs such as {{jsxref(\"Array\")}} objects and {{jsxref(\"TypedArray\")}} objects.\n\nAn _array_ is an ordered list of values that you refer to with a name and an index.\n\nFor example, consider an array called `emp`, which contains employees' names indexed by their numerical employee number. So `emp[0]` would be employee number zero, `emp[1]` employee number one, and so on.\n\nJavaScript does not have an explicit array data type. However, you can use the predefined `Array` object and its methods to work with arrays in your applications. The `Array` object has methods for manipulating arrays in various ways, such as joining, reversing, and sorting them. It has a property for determining the array length and other properties for use with regular expressions.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 39,
      "startLineNumber": 8,
      "endLineNumber": 16
    }
  },
  {
    "content": "We will be focusing on arrays in this article, but many of the same concepts apply to typed arrays as well, since arrays and typed arrays share many similar methods. For more information on typed arrays, see the [typed array guide](/en-US/docs/Web/JavaScript/Guide/Typed_arrays).",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 39,
      "startLineNumber": 18,
      "endLineNumber": 18
    }
  },
  {
    "content": "## Creating an array\n\nThe following statements create equivalent arrays:\n\n```js\nconst arr1 = new Array(element0, element1, /* …, */ elementN);\nconst arr2 = Array(element0, element1, /* …, */ elementN);\nconst arr3 = [element0, element1, /* …, */ elementN];\n```\n\n`element0, element1, …, elementN` is a list of values for the array's elements. When these values are specified, the array is initialized with them as the array's elements. The array's `length` property is set to the number of arguments.\n\nThe bracket syntax is called an \"array literal\" or \"array initializer.\" It's shorter than other forms of array creation, and so is generally preferred. See [Array literals](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) for details.\n\nTo create an array with non-zero length, but without any items, either of the following can be used:\n\n```js\n// This...\nconst arr1 = new Array(arrayLength);\n\n// … results in the same array as this\nconst arr2 = Array(arrayLength);",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating an array",
      "chunkIndex": 2,
      "totalChunks": 39,
      "startLineNumber": 20,
      "endLineNumber": 41
    }
  },
  {
    "content": "```js\n// This...\nconst arr1 = new Array(arrayLength);\n\n// … results in the same array as this\nconst arr2 = Array(arrayLength);\n\n// This has exactly the same effect\nconst arr3 = [];\narr3.length = arrayLength;\n```\n\n> [!NOTE]\n> In the above code, `arrayLength` must be a `Number`. Otherwise, an array with a single element (the provided value) will be created. Calling `arr.length` will return `arrayLength`, but the array doesn't contain any elements. A {{jsxref(\"Statements/for...in\", \"for...in\")}} loop will not find any property on the array.\n\nIn addition to a newly defined variable as shown above, arrays can also be assigned as a property of a new or an existing object:\n\n```js\nconst obj = {};\n// …\nobj.prop = [element0, element1, /* …, */ elementN];\n\n// OR\nconst obj = { prop: [element0, element1, /* …, */ elementN] };\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating an array",
      "chunkIndex": 3,
      "totalChunks": 39,
      "startLineNumber": 36,
      "endLineNumber": 60
    }
  },
  {
    "content": "```js\nconst obj = {};\n// …\nobj.prop = [element0, element1, /* …, */ elementN];\n\n// OR\nconst obj = { prop: [element0, element1, /* …, */ elementN] };\n```\n\nIf you wish to initialize an array with a single element, and the element happens to be a `Number`, you must use the bracket syntax. When a single `Number` value is passed to the `Array()` constructor or function, it is interpreted as an `arrayLength`, not as a single element.\n\nThis creates an array with only one element: the number 42.\n\n```js\nconst arr = [42];\n```\n\nThis creates an array with no elements and `arr.length` set to 42.\n\n```js\nconst arr = Array(42);\n```\n\nThis is equivalent to:\n\n```js\nconst arr = [];\narr.length = 42;\n```\n\nCalling `Array(N)` results in a `RangeError`, if `N` is a non-whole number whose fractional portion is non-zero. The following example illustrates this behavior.\n\n```js\nconst arr = Array(9.3); // RangeError: Invalid array length\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating an array",
      "chunkIndex": 4,
      "totalChunks": 39,
      "startLineNumber": 53,
      "endLineNumber": 87
    }
  },
  {
    "content": "```js\nconst arr = Array(9.3); // RangeError: Invalid array length\n```\n\nIf your code needs to create arrays with single elements of an arbitrary data type, it is safer to use array literals. Alternatively, create an empty array first before adding the single element to it.\n\nYou can also use the {{jsxref(\"Array.of\")}} static method to create arrays with single element.\n\n```js\nconst arr = Array.of(9.3); // arr contains only one element 9.3\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating an array",
      "chunkIndex": 5,
      "totalChunks": 39,
      "startLineNumber": 85,
      "endLineNumber": 95
    }
  },
  {
    "content": "## Referring to array elements\n\nBecause elements are also properties, you can access them using [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). Suppose you define the following array:\n\n```js\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\n```\n\nYou can refer to the first element of the array as `myArray[0]`, the second element of the array as `myArray[1]`, etc… The index of the elements begins with zero.\n\n> [!NOTE]\n> You can also use [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to access other properties of the array, like with an object.\n>\n> ```js\n> const arr = [\"one\", \"two\", \"three\"];\n> arr[2]; // three\n> arr[\"length\"]; // 3\n> ```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Referring to array elements",
      "chunkIndex": 6,
      "totalChunks": 39,
      "startLineNumber": 97,
      "endLineNumber": 114
    }
  },
  {
    "content": "## Populating an array\n\nYou can populate an array by assigning values to its elements. For example:\n\n```js\nconst emp = [];\nemp[0] = \"Casey Jones\";\nemp[1] = \"Phil Lesh\";\nemp[2] = \"August West\";\n```\n\n> [!NOTE]\n> If you supply a non-integer value to the array operator in the code above, a property will be created in the object representing the array, instead of an array element.\n>\n> ```js\n> const arr = [];\n> arr[3.4] = \"Oranges\";\n> console.log(arr.length); // 0\n> console.log(Object.hasOwn(arr, 3.4)); // true\n> ```\n\nYou can also populate an array when you create it:\n\n```js\nconst myArray = new Array(\"Hello\", myVar, 3.14159);\n// OR\nconst myArray = [\"Mango\", \"Apple\", \"Orange\"];\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Populating an array",
      "chunkIndex": 7,
      "totalChunks": 39,
      "startLineNumber": 116,
      "endLineNumber": 143
    }
  },
  {
    "content": "### Understanding length\n\nAt the implementation level, JavaScript's arrays actually store their elements as standard object properties, using the array index as the property name.\n\nThe `length` property is special. Its value is always a positive integer greater than the index of the last element if one exists. (In the example below, `'Dusty'` is indexed at `30`, so `cats.length` returns `30 + 1`).\n\nRemember, JavaScript Array indexes are 0-based: they start at `0`, not `1`. This means that the `length` property will be one more than the highest index stored in the array:\n\n```js\nconst cats = [];\ncats[30] = [\"Dusty\"];\nconsole.log(cats.length); // 31\n```\n\nYou can also assign to the `length` property.\n\nWriting a value that is shorter than the number of stored items truncates the array. Writing `0` empties it entirely:\n\n```js\nconst cats = [\"Dusty\", \"Misty\", \"Twiggy\"];\nconsole.log(cats.length); // 3\n\ncats.length = 2;\nconsole.log(cats); // [ 'Dusty', 'Misty' ] - Twiggy has been removed",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding length",
      "chunkIndex": 8,
      "totalChunks": 39,
      "startLineNumber": 145,
      "endLineNumber": 168
    }
  },
  {
    "content": "```js\nconst cats = [\"Dusty\", \"Misty\", \"Twiggy\"];\nconsole.log(cats.length); // 3\n\ncats.length = 2;\nconsole.log(cats); // [ 'Dusty', 'Misty' ] - Twiggy has been removed\n\ncats.length = 0;\nconsole.log(cats); // []; the cats array is empty\n\ncats.length = 3;\nconsole.log(cats); // [ <3 empty items> ]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding length",
      "chunkIndex": 9,
      "totalChunks": 39,
      "startLineNumber": 163,
      "endLineNumber": 175
    }
  },
  {
    "content": "### Iterating over arrays\n\nA common operation is to iterate over the values of an array, processing each one in some way, as follows:\n\n```js\nconst colors = [\"red\", \"green\", \"blue\"];\nfor (let i = 0; i < colors.length; i++) {\n  console.log(colors[i]);\n}\n```\n\nIf you know that none of the elements in your array evaluate to `false` in a boolean context—if your array consists only of [DOM](/en-US/docs/Web/API/Document_Object_Model) nodes, for example—you can use a more efficient idiom:\n\n```js\nconst divs = document.getElementsByTagName(\"div\");\nfor (let i = 0, div; (div = divs[i]); i++) {\n  /* Process div in some way */\n}\n```\n\nThis avoids the overhead of checking the length of the array, and ensures that the `div` variable is reassigned to the current item each time around the loop for added convenience.\n\nThe [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method provides another way of iterating over an array:",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterating over arrays",
      "chunkIndex": 10,
      "totalChunks": 39,
      "startLineNumber": 177,
      "endLineNumber": 199
    }
  },
  {
    "content": "The [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method provides another way of iterating over an array:\n\n```js\nconst colors = [\"red\", \"green\", \"blue\"];\ncolors.forEach((color) => console.log(color));\n// red\n// green\n// blue\n```\n\nThe function passed to `forEach` is executed once for every item in the array, with the array item passed as the argument to the function. Unassigned values are not iterated in a `forEach` loop.\n\nNote that the elements of an array that are omitted when the array is defined are not listed when iterating by `forEach`, but _are_ listed when `undefined` has been manually assigned to the element:\n\n```js\nconst sparseArray = [\"first\", \"second\", , \"fourth\"];\n\nsparseArray.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// first\n// second\n// fourth\n\nif (sparseArray[2] === undefined) {\n  console.log(\"sparseArray[2] is undefined\"); // true\n}\n\nconst nonsparseArray = [\"first\", \"second\", undefined, \"fourth\"];",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterating over arrays",
      "chunkIndex": 11,
      "totalChunks": 39,
      "startLineNumber": 199,
      "endLineNumber": 228
    }
  },
  {
    "content": "if (sparseArray[2] === undefined) {\n  console.log(\"sparseArray[2] is undefined\"); // true\n}\n\nconst nonsparseArray = [\"first\", \"second\", undefined, \"fourth\"];\n\nnonsparseArray.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// first\n// second\n// undefined\n// fourth\n```\n\nSince JavaScript array elements are saved as standard object properties, it is not advisable to iterate through JavaScript arrays using {{jsxref(\"Statements/for...in\", \"for...in\")}} loops, because normal elements and all enumerable properties will be listed.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterating over arrays",
      "chunkIndex": 12,
      "totalChunks": 39,
      "startLineNumber": 224,
      "endLineNumber": 240
    }
  },
  {
    "content": "### Array methods\n\nThe {{jsxref(\"Array\")}} object has the following methods:\n\nThe [`concat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method joins two or more arrays and returns a new array.\n\n```js\nlet myArray = [\"1\", \"2\", \"3\"];\nmyArray = myArray.concat(\"a\", \"b\", \"c\");\n// myArray is now [\"1\", \"2\", \"3\", \"a\", \"b\", \"c\"]\n```\n\nThe [`join()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) method joins all elements of an array into a string.\n\n```js\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\nconst list = myArray.join(\" - \"); // list is \"Wind - Rain - Fire\"\n```\n\nThe [`push()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method adds one or more elements to the end of an array and returns the resulting `length` of the array.\n\n```js\nconst myArray = [\"1\", \"2\"];\nmyArray.push(\"3\"); // myArray is now [\"1\", \"2\", \"3\"]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 13,
      "totalChunks": 39,
      "startLineNumber": 242,
      "endLineNumber": 266
    }
  },
  {
    "content": "```js\nconst myArray = [\"1\", \"2\"];\nmyArray.push(\"3\"); // myArray is now [\"1\", \"2\", \"3\"]\n```\n\nThe [`pop()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) method removes the last element from an array and returns that element.\n\n```js\nconst myArray = [\"1\", \"2\", \"3\"];\nconst last = myArray.pop();\n// myArray is now [\"1\", \"2\"], last = \"3\"\n```\n\nThe [`shift()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) method removes the first element from an array and returns that element.\n\n```js\nconst myArray = [\"1\", \"2\", \"3\"];\nconst first = myArray.shift();\n// myArray is now [\"2\", \"3\"], first is \"1\"\n```\n\nThe [`unshift()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) method adds one or more elements to the front of an array and returns the new length of the array.\n\n```js\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.unshift(\"4\", \"5\");\n// myArray becomes [\"4\", \"5\", \"1\", \"2\", \"3\"]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 14,
      "totalChunks": 39,
      "startLineNumber": 263,
      "endLineNumber": 290
    }
  },
  {
    "content": "```js\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.unshift(\"4\", \"5\");\n// myArray becomes [\"4\", \"5\", \"1\", \"2\", \"3\"]\n```\n\nThe [`slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) method extracts a section of an array and returns a new array.\n\n```js\nlet myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nmyArray = myArray.slice(1, 4); // [ \"b\", \"c\", \"d\"]\n// starts at index 1 and extracts all elements\n// until index 3\n```\n\nThe [`at()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at) method returns the element at the specified index in the array, or `undefined` if the index is out of range. It's notably used for negative indices that access elements from the end of the array.\n\n```js\nconst myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nmyArray.at(-2); // \"d\", the second-last element of myArray\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 15,
      "totalChunks": 39,
      "startLineNumber": 286,
      "endLineNumber": 306
    }
  },
  {
    "content": "```js\nconst myArray = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nmyArray.at(-2); // \"d\", the second-last element of myArray\n```\n\nThe [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method removes elements from an array and (optionally) replaces them. It returns the items which were removed from the array.\n\n```js\nconst myArray = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nmyArray.splice(1, 3, \"a\", \"b\", \"c\", \"d\");\n// myArray is now [\"1\", \"a\", \"b\", \"c\", \"d\", \"5\"]\n// This code started at index one (or where the \"2\" was),\n// removed 3 elements there, and then inserted all consecutive\n// elements in its place.\n```\n\nThe [`reverse()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) method transposes the elements of an array, in place: the first array element becomes the last and the last becomes the first. It returns a reference to the array.\n\n```js\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.reverse();\n// transposes the array so that myArray = [\"3\", \"2\", \"1\"]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 16,
      "totalChunks": 39,
      "startLineNumber": 303,
      "endLineNumber": 325
    }
  },
  {
    "content": "```js\nconst myArray = [\"1\", \"2\", \"3\"];\nmyArray.reverse();\n// transposes the array so that myArray = [\"3\", \"2\", \"1\"]\n```\n\nThe [`flat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) method returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n\n```js\nlet myArray = [1, 2, [3, 4]];\nmyArray = myArray.flat();\n// myArray is now [1, 2, 3, 4], since the [3, 4] subarray is flattened\n```\n\nThe [`sort()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method sorts the elements of an array in place, and returns a reference to the array.\n\n```js\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\nmyArray.sort();\n// sorts the array so that myArray = [\"Fire\", \"Rain\", \"Wind\"]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 17,
      "totalChunks": 39,
      "startLineNumber": 321,
      "endLineNumber": 341
    }
  },
  {
    "content": "```js\nconst myArray = [\"Wind\", \"Rain\", \"Fire\"];\nmyArray.sort();\n// sorts the array so that myArray = [\"Fire\", \"Rain\", \"Wind\"]\n```\n\n`sort()` can also take a callback function to determine how array elements are compared. The callback function is called with two arguments, which are two values from the array. The function compares these two values and returns a positive number, negative number, or zero, indicating the order of the two values. For instance, the following will sort the array by the last letter of a string:\n\n```js\nconst sortFn = (a, b) => {\n  if (a[a.length - 1] < b[b.length - 1]) {\n    return -1; // Negative number => a < b, a comes before b\n  } else if (a[a.length - 1] > b[b.length - 1]) {\n    return 1; // Positive number => a > b, a comes after b\n  }\n  return 0; // Zero => a = b, a and b keep their original order\n};\nmyArray.sort(sortFn);\n// sorts the array so that myArray = [\"Wind\",\"Fire\",\"Rain\"]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 18,
      "totalChunks": 39,
      "startLineNumber": 337,
      "endLineNumber": 356
    }
  },
  {
    "content": "- if `a` is less than `b` by the sorting system, return `-1` (or any negative number)\n- if `a` is greater than `b` by the sorting system, return `1` (or any positive number)\n- if `a` and `b` are considered equivalent, return `0`.\n\nThe [`indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method searches the array for `searchElement` and returns the index of the first match.\n\n```js\nconst a = [\"a\", \"b\", \"a\", \"b\", \"a\"];\nconsole.log(a.indexOf(\"b\")); // 1\n\n// Now try again, starting from after the last match\nconsole.log(a.indexOf(\"b\", 2)); // 3\nconsole.log(a.indexOf(\"z\")); // -1, because 'z' was not found\n```\n\nThe [`lastIndexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) method works like `indexOf`, but starts at the end and searches backwards.\n\n```js\nconst a = [\"a\", \"b\", \"c\", \"d\", \"a\", \"b\"];\nconsole.log(a.lastIndexOf(\"b\")); // 5",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 19,
      "totalChunks": 39,
      "startLineNumber": 358,
      "endLineNumber": 377
    }
  },
  {
    "content": "```js\nconst a = [\"a\", \"b\", \"c\", \"d\", \"a\", \"b\"];\nconsole.log(a.lastIndexOf(\"b\")); // 5\n\n// Now try again, starting from before the last match\nconsole.log(a.lastIndexOf(\"b\", 4)); // 1\nconsole.log(a.lastIndexOf(\"z\")); // -1\n```\n\nThe [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method executes `callback` on every array item and returns `undefined`.\n\n```js\nconst a = [\"a\", \"b\", \"c\"];\na.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// a\n// b\n// c\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 20,
      "totalChunks": 39,
      "startLineNumber": 375,
      "endLineNumber": 395
    }
  },
  {
    "content": "```js\nconst a = [\"a\", \"b\", \"c\"];\na.forEach((element) => {\n  console.log(element);\n});\n// Logs:\n// a\n// b\n// c\n```\n\nThe `forEach` method (and others below) that take a callback are known as _iterative methods_, because they iterate over the entire array in some fashion. Each one takes an optional second argument called `thisArg`. If provided, `thisArg` becomes the value of the `this` keyword inside the body of the callback function. If not provided, as with other cases where a function is invoked outside of an explicit object context, `this` will refer to the global object ([`window`](/en-US/docs/Web/API/Window), [`globalThis`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis), etc.) when the function is [not strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode), or `undefined` when the function is strict.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 21,
      "totalChunks": 39,
      "startLineNumber": 386,
      "endLineNumber": 397
    }
  },
  {
    "content": "> [!NOTE]\n> The `sort()` method introduced above is not an iterative method, because its callback function is only used for comparison and may not be called in any particular order based on element order. `sort()` does not accept the `thisArg` parameter either.\n\nThe [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) method returns a new array of the return value from executing `callback` on every array item.\n\n```js\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = a1.map((item) => item.toUpperCase());\nconsole.log(a2); // ['A', 'B', 'C']\n```\n\nThe [`flatMap()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) method runs `map()` followed by a `flat()` of depth 1.\n\n```js\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = a1.flatMap((item) => [item.toUpperCase(), item.toLowerCase()]);\nconsole.log(a2); // ['A', 'a', 'B', 'b', 'C', 'c']\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 22,
      "totalChunks": 39,
      "startLineNumber": 399,
      "endLineNumber": 416
    }
  },
  {
    "content": "```js\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = a1.flatMap((item) => [item.toUpperCase(), item.toLowerCase()]);\nconsole.log(a2); // ['A', 'a', 'B', 'b', 'C', 'c']\n```\n\nThe [`filter()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method returns a new array containing the items for which `callback` returned `true`.\n\n```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst a2 = a1.filter((item) => typeof item === \"number\");\nconsole.log(a2); // [10, 20, 30]\n```\n\nThe [`find()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method returns the first item for which `callback` returned `true`.\n\n```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.find((item) => typeof item === \"number\");\nconsole.log(i); // 10\n```\n\nThe [`findLast()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) method returns the last item for which `callback` returned `true`.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 23,
      "totalChunks": 39,
      "startLineNumber": 412,
      "endLineNumber": 434
    }
  },
  {
    "content": "The [`findLast()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) method returns the last item for which `callback` returned `true`.\n\n```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findLast((item) => typeof item === \"number\");\nconsole.log(i); // 30\n```\n\nThe [`findIndex()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) method returns the index of the first item for which `callback` returned `true`.\n\n```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findIndex((item) => typeof item === \"number\");\nconsole.log(i); // 1\n```\n\nThe [`findLastIndex()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) method returns the index of the last item for which `callback` returned `true`.\n\n```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findLastIndex((item) => typeof item === \"number\");\nconsole.log(i); // 5\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 24,
      "totalChunks": 39,
      "startLineNumber": 434,
      "endLineNumber": 456
    }
  },
  {
    "content": "```js\nconst a1 = [\"a\", 10, \"b\", 20, \"c\", 30];\nconst i = a1.findLastIndex((item) => typeof item === \"number\");\nconsole.log(i); // 5\n```\n\nThe [`every()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) method returns `true` if `callback` returns `true` for every item in the array.\n\n```js\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nconst a1 = [1, 2, 3];\nconsole.log(a1.every(isNumber)); // true\nconst a2 = [1, \"2\", 3];\nconsole.log(a2.every(isNumber)); // false\n```\n\nThe [`some()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) method returns `true` if `callback` returns `true` for at least one item in the array.\n\n```js\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nconst a1 = [1, 2, 3];\nconsole.log(a1.some(isNumber)); // true\nconst a2 = [1, \"2\", 3];\nconsole.log(a2.some(isNumber)); // true\nconst a3 = [\"1\", \"2\", \"3\"];\nconsole.log(a3.some(isNumber)); // false\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 25,
      "totalChunks": 39,
      "startLineNumber": 452,
      "endLineNumber": 482
    }
  },
  {
    "content": "The [`reduce()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) method applies `callback(accumulator, currentValue, currentIndex, array)` for each value in the array for the purpose of reducing the list of items down to a single value. The `reduce` function returns the final value returned by `callback` function.\n\nIf `initialValue` is specified, then `callback` is called with `initialValue` as the first parameter value and the value of the first item in the array as the second parameter value.\n\nIf `initialValue` is _not_ specified, then `callback`'s first two parameter values will be the first and second elements of the array. On _every_ subsequent call, the first parameter's value will be whatever `callback` returned on the previous call, and the second parameter's value will be the next value in the array.\n\nIf `callback` needs access to the index of the item being processed, or access to the entire array, they are available as optional parameters.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 26,
      "totalChunks": 39,
      "startLineNumber": 484,
      "endLineNumber": 490
    }
  },
  {
    "content": "If `callback` needs access to the index of the item being processed, or access to the entire array, they are available as optional parameters.\n\n```js\nconst a = [10, 20, 30];\nconst total = a.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  0,\n);\nconsole.log(total); // 60\n```\n\nThe [`reduceRight()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) method works like `reduce()`, but starts with the last element.\n\n`reduce` and `reduceRight` are the least obvious of the iterative array methods. They should be used for algorithms that combine two values recursively in order to reduce a sequence down to a single value.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array methods",
      "chunkIndex": 27,
      "totalChunks": 39,
      "startLineNumber": 490,
      "endLineNumber": 503
    }
  },
  {
    "content": "## Array transformations\n\nYou can transform back and forth between arrays and other data structures.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array transformations",
      "chunkIndex": 28,
      "totalChunks": 39,
      "startLineNumber": 505,
      "endLineNumber": 507
    }
  },
  {
    "content": "### Grouping the elements of an array\n\nThe {{jsxref(\"Object.groupBy()\")}} method can be used to group the elements of an array, using a test function that returns a string indicating the group of the current element.\n\nHere we have an inventory array that contains \"food\" objects that have a `name` and a `type`.\n\n```js\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\" },\n  { name: \"bananas\", type: \"fruit\" },\n  { name: \"goat\", type: \"meat\" },\n  { name: \"cherries\", type: \"fruit\" },\n  { name: \"fish\", type: \"meat\" },\n];\n```\n\nTo use `Object.groupBy()`, you supply a callback function that is called with the current element, and optionally the current index and array, and returns a string indicating the group of the element.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grouping the elements of an array",
      "chunkIndex": 29,
      "totalChunks": 39,
      "startLineNumber": 509,
      "endLineNumber": 525
    }
  },
  {
    "content": "The code below uses an arrow function to return the `type` of each array element (this uses [object destructuring syntax for function arguments](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring#unpacking_properties_from_objects_passed_as_a_function_parameter) to unpack the `type` element from the passed object). The result is an object that has properties named after the unique strings returned by the callback. Each property is assigned an array containing the elements in the group.\n\n```js\nconst result = Object.groupBy(inventory, ({ type }) => type);\nconsole.log(result);\n// Logs\n// {\n//   vegetables: [{ name: 'asparagus', type: 'vegetables' }],\n//   fruit: [\n//     { name: 'bananas', type: 'fruit' },\n//     { name: 'cherries', type: 'fruit' }\n//   ],\n//   meat: [\n//     { name: 'goat', type: 'meat' },\n//     { name: 'fish', type: 'meat' }\n//   ]\n// }\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grouping the elements of an array",
      "chunkIndex": 30,
      "totalChunks": 39,
      "startLineNumber": 527,
      "endLineNumber": 544
    }
  },
  {
    "content": "Note that the returned object references the _same_ elements as the original array (not {{Glossary(\"deep copy\", \"deep copies\")}}). Changing the internal structure of these elements will be reflected in both the original array and the returned object.\n\nIf you can't use a string as the key, for example, if the information to group is associated with an object that might change, then you can instead use {{jsxref(\"Map.groupBy()\")}}. This is very similar to `Object.groupBy()` except that it groups the elements of the array into a {{jsxref(\"Map\")}} that can use an arbitrary value ({{Glossary(\"object\")}} or {{Glossary(\"primitive\")}}) as a key.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grouping the elements of an array",
      "chunkIndex": 31,
      "totalChunks": 39,
      "startLineNumber": 546,
      "endLineNumber": 548
    }
  },
  {
    "content": "## Sparse arrays\n\nArrays can contain \"empty slots\", which are not the same as slots filled with the value `undefined`. Empty slots can be created in one of the following ways:\n\n```js\n// Array constructor:\nconst a = Array(5); // [ <5 empty items> ]\n\n// Consecutive commas in array literal:\nconst b = [1, 2, , , 5]; // [ 1, 2, <2 empty items>, 5 ]\n\n// Directly setting a slot with index greater than array.length:\nconst c = [1, 2];\nc[4] = 5; // [ 1, 2, <2 empty items>, 5 ]\n\n// Elongating an array by directly setting .length:\nconst d = [1, 2];\nd.length = 5; // [ 1, 2, <3 empty items> ]\n\n// Deleting an element:\nconst e = [1, 2, 3, 4, 5];\ndelete e[2]; // [ 1, 2, <1 empty item>, 4, 5 ]\n```\n\nIn some operations, empty slots behave as if they are filled with `undefined`.\n\n```js\nconst arr = [1, 2, , , 5]; // Create a sparse array\n\n// Indexed access\nconsole.log(arr[2]); // undefined\n\n// For...of\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 1 2 undefined undefined 5",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Sparse arrays",
      "chunkIndex": 32,
      "totalChunks": 39,
      "startLineNumber": 550,
      "endLineNumber": 586
    }
  },
  {
    "content": "// Indexed access\nconsole.log(arr[2]); // undefined\n\n// For...of\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 1 2 undefined undefined 5\n\n// Spreading\nconst another = [...arr]; // \"another\" is [ 1, 2, undefined, undefined, 5 ]\n```\n\nBut in others (most notably array iteration methods), empty slots are skipped.\n\n```js\nconst mapped = arr.map((i) => i + 1); // [ 2, 3, <2 empty items>, 6 ]\narr.forEach((i) => console.log(i)); // 1 2 5\nconst filtered = arr.filter(() => true); // [ 1, 2, 5 ]\nconst hasFalsy = arr.some((k) => !k); // false\n\n// Property enumeration\nconst keys = Object.keys(arr); // [ '0', '1', '4' ]\nfor (const key in arr) {\n  console.log(key);\n}\n// Logs: '0' '1' '4'\n// Spreading into an object uses property enumeration, not the array's iterator\nconst objectSpread = { ...arr }; // { '0': 1, '1': 2, '4': 5 }\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Sparse arrays",
      "chunkIndex": 33,
      "totalChunks": 39,
      "startLineNumber": 579,
      "endLineNumber": 608
    }
  },
  {
    "content": "For a complete list of how array methods behave with sparse arrays, see [the `Array` reference page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots).",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Sparse arrays",
      "chunkIndex": 34,
      "totalChunks": 39,
      "startLineNumber": 610,
      "endLineNumber": 610
    }
  },
  {
    "content": "## Multi-dimensional arrays\n\nArrays can be nested, meaning that an array can contain another array as an element. Using this characteristic of JavaScript arrays, multi-dimensional arrays can be created.\n\nThe following code creates a two-dimensional array.\n\n```js\nconst a = new Array(4);\nfor (let i = 0; i < 4; i++) {\n  a[i] = new Array(4);\n  for (let j = 0; j < 4; j++) {\n    a[i][j] = `[${i}, ${j}]`;\n  }\n}\n```\n\nThis example creates an array with the following rows:\n\n```plain\nRow 0: [0, 0] [0, 1] [0, 2] [0, 3]\nRow 1: [1, 0] [1, 1] [1, 2] [1, 3]\nRow 2: [2, 0] [2, 1] [2, 2] [2, 3]\nRow 3: [3, 0] [3, 1] [3, 2] [3, 3]\n```",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multi-dimensional arrays",
      "chunkIndex": 35,
      "totalChunks": 39,
      "startLineNumber": 612,
      "endLineNumber": 635
    }
  },
  {
    "content": "## Using arrays to store other properties\n\nArrays can also be used like objects, to store related information.\n\n```js\nconst arr = [1, 2, 3];\narr.property = \"value\";\nconsole.log(arr.property); // \"value\"\n```\n\nFor example, when an array is the result of a match between a regular expression and a string, the array returns properties and elements that provide information about the match. An array is the return value of [`RegExp.prototype.exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), [`String.prototype.match()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match), and [`String.prototype.split()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split). For information on using arrays with regular expressions, see [Regular Expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions).",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using arrays to store other properties",
      "chunkIndex": 36,
      "totalChunks": 39,
      "startLineNumber": 637,
      "endLineNumber": 647
    }
  },
  {
    "content": "## Working with array-like objects\n\nSome JavaScript objects, such as the [`NodeList`](/en-US/docs/Web/API/NodeList) returned by [`document.getElementsByTagName()`](/en-US/docs/Web/API/Document/getElementsByTagName) or the {{jsxref(\"Functions/arguments\", \"arguments\")}} object made available within the body of a function, look and behave like arrays on the surface but do not share all of their methods. The `arguments` object provides a {{jsxref(\"Function/length\", \"length\")}} attribute but does not implement array methods like [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n\nArray methods cannot be called directly on array-like objects.\n\n```js example-bad\nfunction printArguments() {\n  arguments.forEach((item) => {\n    console.log(item);\n  }); // TypeError: arguments.forEach is not a function\n}\n```\n\nBut you can call them indirectly using {{jsxref(\"Function.prototype.call()\")}}.",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Working with array-like objects",
      "chunkIndex": 37,
      "totalChunks": 39,
      "startLineNumber": 649,
      "endLineNumber": 663
    }
  },
  {
    "content": "But you can call them indirectly using {{jsxref(\"Function.prototype.call()\")}}.\n\n```js example-good\nfunction printArguments() {\n  Array.prototype.forEach.call(arguments, (item) => {\n    console.log(item);\n  });\n}\n```\n\nArray prototype methods can be used on strings as well, since they provide sequential access to their characters in a similar way to arrays:\n\n```js\nArray.prototype.forEach.call(\"a string\", (chr) => {\n  console.log(chr);\n});\n```\n\n{{PreviousNext(\"Web/JavaScript/Guide/Regular_expressions\", \"Web/JavaScript/Guide/Keyed_collections\")}}",
    "metadata": {
      "source": "indexed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Indexed_collections",
      "documentTitle": "Indexed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Working with array-like objects",
      "chunkIndex": 38,
      "totalChunks": 39,
      "startLineNumber": 663,
      "endLineNumber": 681
    }
  },
  {
    "content": "In programming, _inheritance_ refers to passing down characteristics from a parent to a child so that a new piece of code can reuse and build upon the features of an existing one. JavaScript implements inheritance by using [objects](/en-US/docs/Web/JavaScript/Guide/Data_structures#objects). Each object has an internal link to another object called its _prototype_. That prototype object has a prototype of its own, and so on until an object is reached with `null` as its prototype. By definition, `null` has no prototype and acts as the final link in this **prototype chain**. It is possible to mutate any member of the prototype chain or even swap out the prototype at runtime, so concepts like [static dispatching](https://en.wikipedia.org/wiki/Static_dispatch) do not exist in JavaScript.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 48,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is [dynamic](/en-US/docs/Web/JavaScript/Guide/Data_structures#dynamic_and_weak_typing) and does not have static types. While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model — which is how [classes](/en-US/docs/Web/JavaScript/Reference/Classes) are implemented.\n\nAlthough classes are now widely adopted and have become a new paradigm in JavaScript, classes do not bring a new inheritance pattern. While classes abstract most of the prototypal mechanism away, understanding how prototypes work under the hood is still useful.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 48,
      "startLineNumber": 10,
      "endLineNumber": 12
    }
  },
  {
    "content": "## Inheritance with the prototype chain",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheritance with the prototype chain",
      "chunkIndex": 2,
      "totalChunks": 48,
      "startLineNumber": 14,
      "endLineNumber": 14
    }
  },
  {
    "content": "### Inheriting properties\n\nJavaScript objects are dynamic \"bags\" of properties (referred to as **own properties**). JavaScript objects have a link to a prototype object. When trying to access a property of an object, the property will not only be sought on the object but on the prototype of the object, the prototype of the prototype, and so on until either a property with a matching name is found or the end of the prototype chain is reached.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 3,
      "totalChunks": 48,
      "startLineNumber": 16,
      "endLineNumber": 18
    }
  },
  {
    "content": "> [!NOTE]\n> Following the ECMAScript standard, the notation `someObject.[[Prototype]]` is used to designate the prototype of `someObject`. The `[[Prototype]]` internal slot can be accessed and modified with the {{jsxref(\"Object.getPrototypeOf()\")}} and {{jsxref(\"Object.setPrototypeOf()\")}} functions respectively. This is equivalent to the JavaScript accessor [`__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) which is non-standard but de-facto implemented by many JavaScript engines. To prevent confusion while keeping it succinct, in our notation we will avoid using `obj.__proto__` but use `obj.[[Prototype]]` instead. This corresponds to `Object.getPrototypeOf(obj)`.\n>",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 4,
      "totalChunks": 48,
      "startLineNumber": 20,
      "endLineNumber": 22
    }
  },
  {
    "content": ">\n> It should not be confused with the `func.prototype` property of functions, which instead specifies the `[[Prototype]]` to be assigned to all _instances_ of objects created by the given function when used as a constructor. We will discuss the `prototype` property of constructor functions in [a later section](#constructors).",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 5,
      "totalChunks": 48,
      "startLineNumber": 22,
      "endLineNumber": 23
    }
  },
  {
    "content": "There are several ways to specify the `[[Prototype]]` of an object, which are listed in [a later section](#different_ways_of_creating_and_mutating_prototype_chains). For now, we will use the [`__proto__` syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) for illustration. It's worth noting that the `{ __proto__: ... }` syntax is different from the `obj.__proto__` accessor: the former is standard and not deprecated.\n\nIn an object literal like `{ a: 1, b: 2, __proto__: c }`, the value `c` (which has to be either `null` or another object) will become the `[[Prototype]]` of the object represented by the literal, while the other keys like `a` and `b` will become the _own properties_ of the object. This syntax reads very naturally, since `[[Prototype]]` is just an \"internal property\" of the object.\n\nHere is what happens when trying to access a property:",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 6,
      "totalChunks": 48,
      "startLineNumber": 25,
      "endLineNumber": 29
    }
  },
  {
    "content": "Here is what happens when trying to access a property:\n\n```js\nconst o = {\n  a: 1,\n  b: 2,\n  // __proto__ sets the [[Prototype]]. It's specified here\n  // as another object literal.\n  __proto__: {\n    b: 3,\n    c: 4,\n  },\n};\n\n// o.[[Prototype]] has properties b and c.\n// o.[[Prototype]].[[Prototype]] is Object.prototype (we will explain\n// what that means later).\n// Finally, o.[[Prototype]].[[Prototype]].[[Prototype]] is null.\n// This is the end of the prototype chain, as null,\n// by definition, has no [[Prototype]].\n// Thus, the full prototype chain looks like:\n// { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> Object.prototype ---> null\n\nconsole.log(o.a); // 1\n// Is there an 'a' own property on o? Yes, and its value is 1.\n\nconsole.log(o.b); // 2\n// Is there a 'b' own property on o? Yes, and its value is 2.\n// The prototype also has a 'b' property, but it's not visited.\n// This is called Property Shadowing",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 7,
      "totalChunks": 48,
      "startLineNumber": 29,
      "endLineNumber": 58
    }
  },
  {
    "content": "console.log(o.b); // 2\n// Is there a 'b' own property on o? Yes, and its value is 2.\n// The prototype also has a 'b' property, but it's not visited.\n// This is called Property Shadowing\n\nconsole.log(o.c); // 4\n// Is there a 'c' own property on o? No, check its prototype.\n// Is there a 'c' own property on o.[[Prototype]]? Yes, its value is 4.\n\nconsole.log(o.d); // undefined\n// Is there a 'd' own property on o? No, check its prototype.\n// Is there a 'd' own property on o.[[Prototype]]? No, check its prototype.\n// o.[[Prototype]].[[Prototype]] is Object.prototype and\n// there is no 'd' property by default, check its prototype.\n// o.[[Prototype]].[[Prototype]].[[Prototype]] is null, stop searching,\n// no property found, return undefined.\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 8,
      "totalChunks": 48,
      "startLineNumber": 55,
      "endLineNumber": 71
    }
  },
  {
    "content": "Setting a property to an object creates an own property. The only exception to the getting and setting behavior rules is when it's intercepted by a [getter or setter](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters).\n\nSimilarly, you can create longer prototype chains, and a property will be sought on all of them.\n\n```js\nconst o = {\n  a: 1,\n  b: 2,\n  // __proto__ sets the [[Prototype]]. It's specified here\n  // as another object literal.\n  __proto__: {\n    b: 3,\n    c: 4,\n    __proto__: {\n      d: 5,\n    },\n  },\n};\n\n// { a: 1, b: 2 } ---> { b: 3, c: 4 } ---> { d: 5 } ---> Object.prototype ---> null\n\nconsole.log(o.d); // 5\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting properties",
      "chunkIndex": 9,
      "totalChunks": 48,
      "startLineNumber": 73,
      "endLineNumber": 95
    }
  },
  {
    "content": "### Inheriting \"methods\"\n\nJavaScript does not have \"[methods](/en-US/docs/Glossary/Method)\" in the form that class-based languages define them. In JavaScript, any function can be added to an object in the form of a property. An inherited function acts just as any other property, including property shadowing as shown above (in this case, a form of _method overriding_).\n\nWhen an inherited function is executed, the value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) points to the inheriting object, not to the prototype object where the function is an own property.\n\n```js\nconst parent = {\n  value: 2,\n  method() {\n    return this.value + 1;\n  },\n};\n\nconsole.log(parent.method()); // 3\n// When calling parent.method in this case, 'this' refers to parent",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting \"methods\"",
      "chunkIndex": 10,
      "totalChunks": 48,
      "startLineNumber": 97,
      "endLineNumber": 112
    }
  },
  {
    "content": "```js\nconst parent = {\n  value: 2,\n  method() {\n    return this.value + 1;\n  },\n};\n\nconsole.log(parent.method()); // 3\n// When calling parent.method in this case, 'this' refers to parent\n\n// child is an object that inherits from parent\nconst child = {\n  __proto__: parent,\n};\nconsole.log(child.method()); // 3\n// When child.method is called, 'this' refers to child.\n// So when child inherits the method of parent,\n// The property 'value' is sought on child. However, since child\n// doesn't have an own property called 'value', the property is\n// found on the [[Prototype]], which is parent.value.\n\nchild.value = 4; // assign the value 4 to the property 'value' on child.\n// This shadows the 'value' property on parent.\n// The child object now looks like:\n// { value: 4, __proto__: { value: 2, method: [Function] } }\nconsole.log(child.method()); // 5\n// Since child now has the 'value' property, 'this.value' means\n// child.value instead\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheriting \"methods\"",
      "chunkIndex": 11,
      "totalChunks": 48,
      "startLineNumber": 103,
      "endLineNumber": 132
    }
  },
  {
    "content": "## Constructors\n\nThe power of prototypes is that we can reuse a set of properties if they should be present on every instance — especially for methods. Suppose we are to create a series of boxes, where each box is an object that contains a value which can be accessed through a `getValue` function. A naive implementation would be:\n\n```js-nolint\nconst boxes = [\n  { value: 1, getValue() { return this.value; } },\n  { value: 2, getValue() { return this.value; } },\n  { value: 3, getValue() { return this.value; } },\n];\n```\n\nThis is subpar, because each instance has its own function property that does the same thing, which is redundant and unnecessary. Instead, we can move `getValue` to the `[[Prototype]]` of all boxes:\n\n```js\nconst boxPrototype = {\n  getValue() {\n    return this.value;\n  },\n};\n\nconst boxes = [\n  { value: 1, __proto__: boxPrototype },\n  { value: 2, __proto__: boxPrototype },\n  { value: 3, __proto__: boxPrototype },\n];\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 12,
      "totalChunks": 48,
      "startLineNumber": 134,
      "endLineNumber": 160
    }
  },
  {
    "content": "const boxes = [\n  { value: 1, __proto__: boxPrototype },\n  { value: 2, __proto__: boxPrototype },\n  { value: 3, __proto__: boxPrototype },\n];\n```\n\nThis way, all boxes' `getValue` method will refer to the same function, lowering memory usage. However, manually binding the `__proto__` for every object creation is still very inconvenient. This is when we would use a _constructor_ function, which automatically sets the `[[Prototype]]` for every object manufactured. Constructors are functions called with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new).\n\n```js\n// A constructor function\nfunction Box(value) {\n  this.value = value;\n}\n\n// Properties all boxes created from the Box() constructor\n// will have\nBox.prototype.getValue = function () {\n  return this.value;\n};\n\nconst boxes = [new Box(1), new Box(2), new Box(3)];\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 13,
      "totalChunks": 48,
      "startLineNumber": 155,
      "endLineNumber": 177
    }
  },
  {
    "content": "// Properties all boxes created from the Box() constructor\n// will have\nBox.prototype.getValue = function () {\n  return this.value;\n};\n\nconst boxes = [new Box(1), new Box(2), new Box(3)];\n```\n\nWe say that `new Box(1)` is an _instance_ created from the `Box` constructor function. `Box.prototype` is not much different from the `boxPrototype` object we created previously — it's just a plain object. Every instance created from a constructor function will automatically have the constructor's [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property as its `[[Prototype]]` — that is, `Object.getPrototypeOf(new Box()) === Box.prototype`. `Constructor.prototype` by default has one own property: [`constructor`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor), which references the constructor function itself — that is, `Box.prototype.constructor === Box`. This allows one to access the original constructor from any instance.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 14,
      "totalChunks": 48,
      "startLineNumber": 170,
      "endLineNumber": 179
    }
  },
  {
    "content": "> [!NOTE]\n> If a non-primitive is returned from the constructor function, that value will become the result of the `new` expression. In this case the `[[Prototype]]` may not be correctly bound — but this should not happen much in practice.\n\nThe above constructor function can be rewritten in [classes](/en-US/docs/Web/JavaScript/Reference/Classes) as:\n\n```js\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  // Methods are created on Box.prototype\n  getValue() {\n    return this.value;\n  }\n}\n```\n\nClasses are syntax sugar over constructor functions, which means you can still manipulate `Box.prototype` to change the behavior of all instances. However, because classes are designed to be an abstraction over the underlying prototype mechanism, we will use the more-lightweight constructor function syntax for this tutorial to fully demonstrate how prototypes work.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 15,
      "totalChunks": 48,
      "startLineNumber": 181,
      "endLineNumber": 199
    }
  },
  {
    "content": "Because `Box.prototype` references the same object as the `[[Prototype]]` of all instances, we can change the behavior of all instances by mutating `Box.prototype`.\n\n```js\nfunction Box(value) {\n  this.value = value;\n}\nBox.prototype.getValue = function () {\n  return this.value;\n};\nconst box = new Box(1);\n\n// Mutate Box.prototype after an instance has already been created\nBox.prototype.getValue = function () {\n  return this.value + 1;\n};\nbox.getValue(); // 2\n```\n\nA corollary is, _re-assigning_ `Constructor.prototype` (`Constructor.prototype = ...`) is a bad idea for two reasons:",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 16,
      "totalChunks": 48,
      "startLineNumber": 201,
      "endLineNumber": 219
    }
  },
  {
    "content": "A corollary is, _re-assigning_ `Constructor.prototype` (`Constructor.prototype = ...`) is a bad idea for two reasons:\n\n- The `[[Prototype]]` of instances created before the reassignment is now referencing a different object from the `[[Prototype]]` of instances created after the reassignment — mutating one's `[[Prototype]]` no longer mutates the other.\n- Unless you manually re-set the `constructor` property, the constructor function can no longer be traced from `instance.constructor`, which may break user expectation. Some built-in operations will read the `constructor` property as well, and if it is not set, they may not work as expected.\n\n`Constructor.prototype` is only useful when constructing instances. It has nothing to do with `Constructor.[[Prototype]]`, which is the constructor function's _own_ prototype, which is `Function.prototype` — that is, `Object.getPrototypeOf(Constructor) === Function.prototype`.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructors",
      "chunkIndex": 17,
      "totalChunks": 48,
      "startLineNumber": 219,
      "endLineNumber": 224
    }
  },
  {
    "content": "### Implicit constructors of literals\n\nSome literal syntaxes in JavaScript create instances that implicitly set the `[[Prototype]]`. For example:\n\n```js\n// Object literals (without the `__proto__` key) automatically\n// have `Object.prototype` as their `[[Prototype]]`\nconst object = { a: 1 };\nObject.getPrototypeOf(object) === Object.prototype; // true\n\n// Array literals automatically have `Array.prototype` as their `[[Prototype]]`\nconst array = [1, 2, 3];\nObject.getPrototypeOf(array) === Array.prototype; // true\n\n// RegExp literals automatically have `RegExp.prototype` as their `[[Prototype]]`\nconst regexp = /abc/;\nObject.getPrototypeOf(regexp) === RegExp.prototype; // true\n```\n\nWe can \"de-sugar\" them into their constructor form.\n\n```js\nconst array = new Array(1, 2, 3);\nconst regexp = new RegExp(\"abc\");\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Implicit constructors of literals",
      "chunkIndex": 18,
      "totalChunks": 48,
      "startLineNumber": 226,
      "endLineNumber": 250
    }
  },
  {
    "content": "We can \"de-sugar\" them into their constructor form.\n\n```js\nconst array = new Array(1, 2, 3);\nconst regexp = new RegExp(\"abc\");\n```\n\nFor example, \"array methods\" like [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) are simply methods defined on `Array.prototype`, which is why they are automatically available on all array instances.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Implicit constructors of literals",
      "chunkIndex": 19,
      "totalChunks": 48,
      "startLineNumber": 245,
      "endLineNumber": 252
    }
  },
  {
    "content": "> [!WARNING]\n> There is one misfeature that used to be prevalent — extending `Object.prototype` or one of the other built-in prototypes. An example of this misfeature is, defining `Array.prototype.myMethod = function () {...}` and then using `myMethod` on all array instances.\n>\n> This misfeature is called _monkey patching_. Doing monkey patching risks forward compatibility, because if the language adds this method in the future but with a different signature, your code will break. It has led to incidents like the [SmooshGate](https://developer.chrome.com/blog/smooshgate/), and can be a great nuisance for the language to advance since JavaScript tries to \"not break the web\".\n>\n> The **only** good reason for extending a built-in prototype is to backport the features of newer JavaScript engines, like `Array.prototype.forEach`.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Implicit constructors of literals",
      "chunkIndex": 20,
      "totalChunks": 48,
      "startLineNumber": 254,
      "endLineNumber": 259
    }
  },
  {
    "content": "It may be interesting to note that due to historical reasons, some built-in constructors' `prototype` property are instances themselves. For example, `Number.prototype` is a number 0, `Array.prototype` is an empty array, and `RegExp.prototype` is `/(?:)/`.\n\n```js\nNumber.prototype + 1; // 1\nArray.prototype.map((x) => x + 1); // []\nString.prototype + \"a\"; // \"a\"\nRegExp.prototype.source; // \"(?:)\"\nFunction.prototype(); // Function.prototype is a no-op function by itself\n```\n\nHowever, this is not the case for user-defined constructors, nor for modern constructors like `Map`.\n\n```js\nMap.prototype.get(1);\n// Uncaught TypeError: get method called on incompatible Map.prototype\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Implicit constructors of literals",
      "chunkIndex": 21,
      "totalChunks": 48,
      "startLineNumber": 261,
      "endLineNumber": 276
    }
  },
  {
    "content": "### Building longer inheritance chains\n\nThe `Constructor.prototype` property will become the `[[Prototype]]` of the constructor's instances, as-is — including `Constructor.prototype`'s own `[[Prototype]]`. By default, `Constructor.prototype` is a _plain object_ — that is, `Object.getPrototypeOf(Constructor.prototype) === Object.prototype`. The only exception is `Object.prototype` itself, whose `[[Prototype]]` is `null` — that is, `Object.getPrototypeOf(Object.prototype) === null`. Therefore, a typical constructor will build the following prototype chain:\n\n```js\nfunction Constructor() {}\n\nconst obj = new Constructor();\n// obj ---> Constructor.prototype ---> Object.prototype ---> null\n```\n\nTo build longer prototype chains, we can set the `[[Prototype]]` of `Constructor.prototype` via the [`Object.setPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) function.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Building longer inheritance chains",
      "chunkIndex": 22,
      "totalChunks": 48,
      "startLineNumber": 278,
      "endLineNumber": 289
    }
  },
  {
    "content": "```js\nfunction Base() {}\nfunction Derived() {}\n// Set the `[[Prototype]]` of `Derived.prototype`\n// to `Base.prototype`\nObject.setPrototypeOf(Derived.prototype, Base.prototype);\n\nconst obj = new Derived();\n// obj ---> Derived.prototype ---> Base.prototype ---> Object.prototype ---> null\n```\n\nIn class terms, this is equivalent to using the [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) syntax.\n\n```js\nclass Base {}\nclass Derived extends Base {}\n\nconst obj = new Derived();\n// obj ---> Derived.prototype ---> Base.prototype ---> Object.prototype ---> null\n```\n\nYou may also see some legacy code using {{jsxref(\"Object.create()\")}} to build the inheritance chain. However, because this reassigns the `prototype` property and removes the [`constructor`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property, it can be more error-prone, while performance gains may not be apparent if the constructors haven't created any instances yet.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Building longer inheritance chains",
      "chunkIndex": 23,
      "totalChunks": 48,
      "startLineNumber": 291,
      "endLineNumber": 312
    }
  },
  {
    "content": "```js example-bad\nfunction Base() {}\nfunction Derived() {}\n// Re-assigns `Derived.prototype` to a new object\n// with `Base.prototype` as its `[[Prototype]]`\n// DON'T DO THIS — use Object.setPrototypeOf to mutate it instead\nDerived.prototype = Object.create(Base.prototype);\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Building longer inheritance chains",
      "chunkIndex": 24,
      "totalChunks": 48,
      "startLineNumber": 314,
      "endLineNumber": 321
    }
  },
  {
    "content": "## Inspecting prototypes: a deeper dive\n\nLet's look at what happens behind the scenes in a bit more detail.\n\nIn JavaScript, as mentioned above, functions are able to have properties. All functions have a special property named `prototype`. Please note that the code below is free-standing (it is safe to assume there is no other JavaScript on the webpage other than the below code). For the best learning experience, it is highly recommended that you open a console, navigate to the \"console\" tab, copy-and-paste in the below JavaScript code, and run it by pressing the Enter/Return key. (The console is included in most web browser's Developer Tools. More information is available for [Firefox Developer Tools](https://firefox-source-docs.mozilla.org/devtools-user/index.html), [Chrome DevTools](https://developer.chrome.com/docs/devtools/), and [Edge DevTools](https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/).)",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 25,
      "totalChunks": 48,
      "startLineNumber": 323,
      "endLineNumber": 327
    }
  },
  {
    "content": "```js\nfunction doSomething() {}\nconsole.log(doSomething.prototype);\n// It does not matter how you declare the function; a\n// function in JavaScript will always have a default\n// prototype property — with one exception: an arrow\n// function doesn't have a default prototype property:\nconst doSomethingFromArrowFunction = () => {};\nconsole.log(doSomethingFromArrowFunction.prototype);\n```\n\nAs seen above, `doSomething()` has a default `prototype` property, as demonstrated by the console. After running this code, the console should have displayed an object that looks similar to this.\n\n```plain\n{\n  constructor: ƒ doSomething(),\n  [[Prototype]]: {\n    constructor: ƒ Object(),\n    hasOwnProperty: ƒ hasOwnProperty(),\n    isPrototypeOf: ƒ isPrototypeOf(),\n    propertyIsEnumerable: ƒ propertyIsEnumerable(),\n    toLocaleString: ƒ toLocaleString(),\n    toString: ƒ toString(),\n    valueOf: ƒ valueOf()\n  }\n}\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 26,
      "totalChunks": 48,
      "startLineNumber": 329,
      "endLineNumber": 355
    }
  },
  {
    "content": "> [!NOTE]\n> The Chrome console uses `[[Prototype]]` to denote the object's prototype, following the spec's terms; Firefox uses `<prototype>`. For consistency we will use `[[Prototype]]`.\n\nWe can add properties to the prototype of `doSomething()`, as shown below.\n\n```js\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\";\nconsole.log(doSomething.prototype);\n```\n\nThis results in:\n\n```plain\n{\n  foo: \"bar\",\n  constructor: ƒ doSomething(),\n  [[Prototype]]: {\n    constructor: ƒ Object(),\n    hasOwnProperty: ƒ hasOwnProperty(),\n    isPrototypeOf: ƒ isPrototypeOf(),\n    propertyIsEnumerable: ƒ propertyIsEnumerable(),\n    toLocaleString: ƒ toLocaleString(),\n    toString: ƒ toString(),\n    valueOf: ƒ valueOf()\n  }\n}\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 27,
      "totalChunks": 48,
      "startLineNumber": 357,
      "endLineNumber": 384
    }
  },
  {
    "content": "We can now use the `new` operator to create an instance of `doSomething()` based on this prototype. To use the new operator, call the function normally except prefix it with `new`. Calling a function with the `new` operator returns an object that is an instance of the function. Properties can then be added onto this object.\n\nTry the following code:\n\n```js\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\"; // add a property onto the prototype\nconst doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\"; // add a property onto the object\nconsole.log(doSomeInstancing);\n```\n\nThis results in an output similar to the following:",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 28,
      "totalChunks": 48,
      "startLineNumber": 386,
      "endLineNumber": 398
    }
  },
  {
    "content": "This results in an output similar to the following:\n\n```plain\n{\n  prop: \"some value\",\n  [[Prototype]]: {\n    foo: \"bar\",\n    constructor: ƒ doSomething(),\n    [[Prototype]]: {\n      constructor: ƒ Object(),\n      hasOwnProperty: ƒ hasOwnProperty(),\n      isPrototypeOf: ƒ isPrototypeOf(),\n      propertyIsEnumerable: ƒ propertyIsEnumerable(),\n      toLocaleString: ƒ toLocaleString(),\n      toString: ƒ toString(),\n      valueOf: ƒ valueOf()\n    }\n  }\n}\n```\n\nAs seen above, the `[[Prototype]]` of `doSomeInstancing` is `doSomething.prototype`. But, what does this do? When you access a property of `doSomeInstancing`, the runtime first looks to see if `doSomeInstancing` has that property.\n\nIf `doSomeInstancing` does not have the property, then the runtime looks for the property in `doSomeInstancing.[[Prototype]]` (a.k.a. `doSomething.prototype`). If `doSomeInstancing.[[Prototype]]` has the property being looked for, then that property on `doSomeInstancing.[[Prototype]]` is used.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 29,
      "totalChunks": 48,
      "startLineNumber": 398,
      "endLineNumber": 421
    }
  },
  {
    "content": "Otherwise, if `doSomeInstancing.[[Prototype]]` does not have the property, then `doSomeInstancing.[[Prototype]].[[Prototype]]` is checked for the property. By default, the `[[Prototype]]` of any function's `prototype` property is `Object.prototype`. So, `doSomeInstancing.[[Prototype]].[[Prototype]]` (a.k.a. `doSomething.prototype.[[Prototype]]` (a.k.a. `Object.prototype`)) is then looked through for the property being searched for.\n\nIf the property is not found in `doSomeInstancing.[[Prototype]].[[Prototype]]`, then `doSomeInstancing.[[Prototype]].[[Prototype]].[[Prototype]]` is looked through. However, there is a problem: `doSomeInstancing.[[Prototype]].[[Prototype]].[[Prototype]]` does not exist, because `Object.prototype.[[Prototype]]` is `null`. Then, and only then, after the entire prototype chain of `[[Prototype]]`'s is looked through, the runtime asserts that the property does not exist and conclude that the value at the property is `undefined`.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 30,
      "totalChunks": 48,
      "startLineNumber": 423,
      "endLineNumber": 425
    }
  },
  {
    "content": "Let's try entering some more code into the console:\n\n```js\nfunction doSomething() {}\ndoSomething.prototype.foo = \"bar\";\nconst doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\";\nconsole.log(\"doSomeInstancing.prop:     \", doSomeInstancing.prop);\nconsole.log(\"doSomeInstancing.foo:      \", doSomeInstancing.foo);\nconsole.log(\"doSomething.prop:          \", doSomething.prop);\nconsole.log(\"doSomething.foo:           \", doSomething.foo);\nconsole.log(\"doSomething.prototype.prop:\", doSomething.prototype.prop);\nconsole.log(\"doSomething.prototype.foo: \", doSomething.prototype.foo);\n```\n\nThis results in the following:\n\n```plain\ndoSomeInstancing.prop:      some value\ndoSomeInstancing.foo:       bar\ndoSomething.prop:           undefined\ndoSomething.foo:            undefined\ndoSomething.prototype.prop: undefined\ndoSomething.prototype.foo:  bar\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inspecting prototypes: a deeper dive",
      "chunkIndex": 31,
      "totalChunks": 48,
      "startLineNumber": 427,
      "endLineNumber": 451
    }
  },
  {
    "content": "## Different ways of creating and mutating prototype chains\n\nWe have encountered many ways to create objects and change their prototype chains. We will systematically summarize the different ways, comparing each approach's pros and cons.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Different ways of creating and mutating prototype chains",
      "chunkIndex": 32,
      "totalChunks": 48,
      "startLineNumber": 453,
      "endLineNumber": 455
    }
  },
  {
    "content": "### Objects created with syntax constructs\n\n```js\nconst o = { a: 1 };\n// The newly created object o has Object.prototype as its [[Prototype]]\n// Object.prototype has null as its [[Prototype]].\n// o ---> Object.prototype ---> null\n\nconst b = [\"yo\", \"sup\", \"?\"];\n// Arrays inherit from Array.prototype\n// (which has methods indexOf, forEach, etc.)\n// The prototype chain looks like:\n// b ---> Array.prototype ---> Object.prototype ---> null\n\nfunction f() {\n  return 2;\n}\n// Functions inherit from Function.prototype\n// (which has methods call, bind, etc.)\n// f ---> Function.prototype ---> Object.prototype ---> null\n\nconst p = { b: 2, __proto__: o };\n// It is possible to point the newly created object's [[Prototype]] to\n// another object via the __proto__ literal property. (Not to be confused\n// with Object.prototype.__proto__ accessors)\n// p ---> o ---> Object.prototype ---> null\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects created with syntax constructs",
      "chunkIndex": 33,
      "totalChunks": 48,
      "startLineNumber": 457,
      "endLineNumber": 483
    }
  },
  {
    "content": "When using the `__proto__` key in [object initializers](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer), pointing the `__proto__` key to something that is not an object only fails silently without throwing an exception. Contrary to the [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) setter, `__proto__` in object literal initializers is standardized and optimized, and can even be more performant than {{jsxref(\"Object.create\")}}. Declaring extra own properties on the object at creation is more ergonomic than {{jsxref(\"Object.create\")}}.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects created with syntax constructs",
      "chunkIndex": 34,
      "totalChunks": 48,
      "startLineNumber": 485,
      "endLineNumber": 485
    }
  },
  {
    "content": "### With constructor functions\n\n```js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype.addVertex = function (v) {\n  this.vertices.push(v);\n};\n\nconst g = new Graph();\n// g is an object with own properties 'vertices' and 'edges'.\n// g.[[Prototype]] is the value of Graph.prototype when new Graph() is executed.\n```\n\nConstructor functions have been available since very early JavaScript. Therefore, it is very fast, very standard, and very JIT-optimizable. However, it's also hard to \"do properly\" because methods added this way are enumerable by default, which is inconsistent with the class syntax or how built-in methods behave. Doing longer inheritance chains is also error-prone, as previously demonstrated.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With constructor functions",
      "chunkIndex": 35,
      "totalChunks": 48,
      "startLineNumber": 487,
      "endLineNumber": 504
    }
  },
  {
    "content": "### With Object.create()\n\nCalling {{jsxref(\"Object.create()\")}} creates a new object. The `[[Prototype]]` of this object is the first argument of the function:\n\n```js\nconst a = { a: 1 };\n// a ---> Object.prototype ---> null\n\nconst b = Object.create(a);\n// b ---> a ---> Object.prototype ---> null\nconsole.log(b.a); // 1 (inherited)\n\nconst c = Object.create(b);\n// c ---> b ---> a ---> Object.prototype ---> null\n\nconst d = Object.create(null);\n// d ---> null (d is an object that has null directly as its prototype)\nconsole.log(d.hasOwnProperty);\n// undefined, because d doesn't inherit from Object.prototype\n```",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With Object.create()",
      "chunkIndex": 36,
      "totalChunks": 48,
      "startLineNumber": 506,
      "endLineNumber": 525
    }
  },
  {
    "content": "Similar to the `__proto__` key in object initializers, `Object.create()` allows directly setting the prototype of an object at creation time, which permits the runtime to further optimize the object. It also allows the creation of objects with `null` prototype, using `Object.create(null)`. The second parameter of `Object.create()` allows you to precisely specify the attributes of each property in the new object, which can be a double-edged sword:\n\n- It allows you to create non-enumerable properties, etc., during object creation, which is not possible with object literals.\n- It is much more verbose and error-prone than object literals.\n- It may be slower than object literals, especially when creating many properties.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With Object.create()",
      "chunkIndex": 37,
      "totalChunks": 48,
      "startLineNumber": 527,
      "endLineNumber": 531
    }
  },
  {
    "content": "### With classes\n\n```js\nclass Rectangle {\n  constructor(height, width) {\n    this.name = \"Rectangle\";\n    this.height = height;\n    this.width = width;\n  }\n}\n\nclass FilledRectangle extends Rectangle {\n  constructor(height, width, color) {\n    super(height, width);\n    this.name = \"Filled rectangle\";\n    this.color = color;\n  }\n}\n\nconst filledRectangle = new FilledRectangle(5, 10, \"blue\");\n// filledRectangle ---> FilledRectangle.prototype ---> Rectangle.prototype ---> Object.prototype ---> null\n```\n\nClasses offer the highest readability and maintainability when defining complex inheritance structures. [Private elements](/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements) are a feature with no trivial replacement in prototypal inheritance. However, classes are less optimized than traditional constructor functions and are not supported in older environments.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With classes",
      "chunkIndex": 38,
      "totalChunks": 48,
      "startLineNumber": 533,
      "endLineNumber": 556
    }
  },
  {
    "content": "### With Object.setPrototypeOf()\n\nWhile all methods above will set the prototype chain at object creation time, [`Object.setPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) allows mutating the `[[Prototype]]` internal property of an existing object. It can even force a prototype on a prototype-less object created with `Object.create(null)` or remove the prototype of an object by setting it to `null`.\n\n```js\nconst obj = { a: 1 };\nconst anotherObj = { b: 2 };\nObject.setPrototypeOf(obj, anotherObj);\n// obj ---> anotherObj ---> Object.prototype ---> null\n```\n\nHowever, you should set the prototype during creation if possible, because setting the prototype dynamically disrupts all optimizations that engines have made to the prototype chain. It might cause some engines to recompile your code for de-optimization, to make it work according to the specs.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With Object.setPrototypeOf()",
      "chunkIndex": 39,
      "totalChunks": 48,
      "startLineNumber": 558,
      "endLineNumber": 569
    }
  },
  {
    "content": "### With the \\_\\_proto\\_\\_ accessor\n\nAll objects inherit the [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) setter, which can be used to set the `[[Prototype]]` of an existing object (if the `__proto__` key is not overridden on the object).\n\n> [!WARNING]\n> `Object.prototype.__proto__` accessors are **non-standard** and deprecated. You should almost always use `Object.setPrototypeOf` instead.\n\n```js\nconst obj = {};\n// DON'T USE THIS: for example only.\nobj.__proto__ = { barProp: \"bar val\" };\nobj.__proto__.__proto__ = { fooProp: \"foo val\" };\nconsole.log(obj.fooProp);\nconsole.log(obj.barProp);\n```\n\nCompared to `Object.setPrototypeOf`, setting `__proto__` to something that is not an object fails silently without throwing an exception. It also has slightly better browser support. However, it is non-standard and deprecated. You should almost always use `Object.setPrototypeOf` instead.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "With the \\_\\_proto\\_\\_ accessor",
      "chunkIndex": 40,
      "totalChunks": 48,
      "startLineNumber": 571,
      "endLineNumber": 587
    }
  },
  {
    "content": "## Performance\n\nThe lookup time for properties that are high up on the prototype chain can have a negative impact on the performance, and this may be significant in the code where performance is critical. Additionally, trying to access nonexistent properties will always traverse the full prototype chain.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance",
      "chunkIndex": 41,
      "totalChunks": 48,
      "startLineNumber": 589,
      "endLineNumber": 591
    }
  },
  {
    "content": "Also, when iterating over the properties of an object, **every** enumerable property that is on the prototype chain will be enumerated. To check whether an object has a property defined on _itself_ and not somewhere on its prototype chain, it is necessary to use the [`hasOwnProperty`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) or [`Object.hasOwn`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) methods. All objects, except those with `null` as `[[Prototype]]`, inherit [`hasOwnProperty`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) from `Object.prototype` — unless it has been overridden further down the prototype chain. To give you a concrete example, let's take the above graph example code to illustrate it:\n\n```js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype.addVertex = function (v) {\n  this.vertices.push(v);\n};",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance",
      "chunkIndex": 42,
      "totalChunks": 48,
      "startLineNumber": 593,
      "endLineNumber": 603
    }
  },
  {
    "content": "```js\nfunction Graph() {\n  this.vertices = [];\n  this.edges = [];\n}\n\nGraph.prototype.addVertex = function (v) {\n  this.vertices.push(v);\n};\n\nconst g = new Graph();\n// g ---> Graph.prototype ---> Object.prototype ---> null\n\ng.hasOwnProperty(\"vertices\"); // true\nObject.hasOwn(g, \"vertices\"); // true\n\ng.hasOwnProperty(\"nope\"); // false\nObject.hasOwn(g, \"nope\"); // false\n\ng.hasOwnProperty(\"addVertex\"); // false\nObject.hasOwn(g, \"addVertex\"); // false\n\nObject.getPrototypeOf(g).hasOwnProperty(\"addVertex\"); // true\n```\n\nNote: It is **not** enough to check whether a property is [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined). The property might very well exist, but its value just happens to be set to `undefined`.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Performance",
      "chunkIndex": 43,
      "totalChunks": 48,
      "startLineNumber": 595,
      "endLineNumber": 620
    }
  },
  {
    "content": "## Conclusion\n\nJavaScript may be a bit confusing for developers coming from Java or C++, as it's all dynamic, all runtime, and it has no static types at all. Everything is either an object (instance) or a function (constructor), and even functions themselves are instances of the `Function` constructor. Even the \"classes\" as syntax constructs are just constructor functions at runtime.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conclusion",
      "chunkIndex": 44,
      "totalChunks": 48,
      "startLineNumber": 622,
      "endLineNumber": 624
    }
  },
  {
    "content": "All constructor functions in JavaScript have a special property called `prototype`, which works with the `new` operator. The reference to the prototype object is copied to the internal `[[Prototype]]` property of the new instance. For example, when you do `const a1 = new A()`, JavaScript (after creating the object in memory and before running function `A()` with `this` defined to it) sets `a1.[[Prototype]] = A.prototype`. When you then access properties of the instance, JavaScript first checks whether they exist on that object directly, and if not, it looks in `[[Prototype]]`. `[[Prototype]]` is looked at _recursively_, i.e., `a1.doSomething`, `Object.getPrototypeOf(a1).doSomething`, `Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething` etc., until it's found or `Object.getPrototypeOf` returns `null`. This means that all properties defined on `prototype` are effectively shared by all instances, and you can even later change parts of `prototype` and have the changes appear in",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conclusion",
      "chunkIndex": 45,
      "totalChunks": 48,
      "startLineNumber": 626,
      "endLineNumber": 626
    }
  },
  {
    "content": "returns `null`. This means that all properties defined on `prototype` are effectively shared by all instances, and you can even later change parts of `prototype` and have the changes appear in all existing instances.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conclusion",
      "chunkIndex": 46,
      "totalChunks": 48,
      "startLineNumber": 626,
      "endLineNumber": 626
    }
  },
  {
    "content": "If, in the example above, you do `const a1 = new A(); const a2 = new A();`, then `a1.doSomething` would actually refer to `Object.getPrototypeOf(a1).doSomething` — which is the same as the `A.prototype.doSomething` you defined, i.e., `Object.getPrototypeOf(a1).doSomething === Object.getPrototypeOf(a2).doSomething === A.prototype.doSomething`.\n\nIt is essential to understand the prototypal inheritance model before writing complex code that makes use of it. Also, be aware of the length of the prototype chains in your code and break them up if necessary to avoid possible performance problems. Further, the native prototypes should **never** be extended unless it is for the sake of compatibility with newer JavaScript features.",
    "metadata": {
      "source": "inheritance_and_the_prototype_chain/index.md",
      "documentSlug": "Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",
      "documentTitle": "Inheritance and the prototype chain",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conclusion",
      "chunkIndex": 47,
      "totalChunks": 48,
      "startLineNumber": 628,
      "endLineNumber": 630
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Resource_management\", \"Web/JavaScript/Guide/Modules\")}}\n\nThe {{jsxref(\"Intl\")}} object is the namespace for the ECMAScript Internationalization API, which provides a wide range of locale- and culture-sensitive data and operations.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 74,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Overview\n\nThe `Intl` object is very use-case driven. It provides a separate object for each use case that requires locale-specific logic. Currently, it provides the following functionalities:\n\n- [Getting information about a locale](#locale_information) using {{jsxref(\"Intl.Locale\")}}.\n- [Formatting data](#formatting_data) using {{jsxref(\"Intl.DateTimeFormat\")}}, {{jsxref(\"Intl.DurationFormat\")}}, {{jsxref(\"Intl.ListFormat\")}}, {{jsxref(\"Intl.NumberFormat\")}}, and {{jsxref(\"Intl.RelativeTimeFormat\")}}.\n- [Collation](#collation) (i.e., comparing strings for sorting or searching) using {{jsxref(\"Intl.Collator\")}}.\n- [Selecting plural forms](#plural_rules) using {{jsxref(\"Intl.PluralRules\")}}.\n- [Segmenting text](#segmentation) into units such as words, sentences, or graphemes using {{jsxref(\"Intl.Segmenter\")}}.\n- [Getting the displayed name](#display_names) for currencies, languages, scripts, regions, and time zones using {{jsxref(\"Intl.DisplayNames\")}}.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview",
      "chunkIndex": 1,
      "totalChunks": 74,
      "startLineNumber": 12,
      "endLineNumber": 21
    }
  },
  {
    "content": "Most `Intl` APIs share a similar design ({{jsxref(\"Intl.Locale\")}} is the only exception). You start by constructing an instance with the desired locale and options. This defines a set of rules for the desired operation (formatting, collation, segmentation, etc.). Then, when you call the method on the instance, such as `format()`, `compare()`, or `segment()`, the object applies the specified rule to the passed data.\n\n```js\n// 1. Construct a formatter object, specifying the locale and formatting options:\nconst price = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\n// 2. Use the `format` method of the formatter object to format a number:\nconsole.log(price.format(5.259)); // $5.26\n```\n\nThe general signature of the constructor is:\n\n```js-nolint\nnew Intl.SomeObject(locales, options)\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview",
      "chunkIndex": 2,
      "totalChunks": 74,
      "startLineNumber": 23,
      "endLineNumber": 40
    }
  },
  {
    "content": "The general signature of the constructor is:\n\n```js-nolint\nnew Intl.SomeObject(locales, options)\n```\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. The runtime's default locale is used when `undefined` is passed or when none of the specified locale identifiers is supported. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object containing properties that customize specific aspects of the operation, which is key to understanding how to use each `Intl` object.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview",
      "chunkIndex": 3,
      "totalChunks": 74,
      "startLineNumber": 36,
      "endLineNumber": 45
    }
  },
  {
    "content": "## Locale information\n\nLocales underlie all behaviors of `Intl`. A _locale_ is a set of conventions, represented in the `Intl` API by the {{jsxref(\"Intl.Locale\")}} object. All `Intl` constructors that accept language tags also accept `Intl.Locale` objects.\n\nEach locale is primarily defined by four things: a {{jsxref(\"Intl/Locale/language\", \"language\")}}, a {{jsxref(\"Intl/Locale/script\", \"script\")}}, a {{jsxref(\"Intl/Locale/region\", \"region\")}}, and sometimes some {{jsxref(\"Intl/Locale/variants\", \"variants\")}}. When connected together by `-` in that order, they form a [BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646).",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 4,
      "totalChunks": 74,
      "startLineNumber": 47,
      "endLineNumber": 51
    }
  },
  {
    "content": "- The language is the most important part of the locale and is mandatory. When given a single language, like `en` or `fr`, there are algorithms to infer the rest of the information (see {{jsxref(\"Intl/Locale/maximize\", \"Intl.Locale.prototype.maximize()\")}}).\n- However, you often want to specify the region as well, because conventions can differ drastically between regions that speak the same language. For example, the date format in the US is MM/DD/YYYY, whereas in the UK it is DD/MM/YYYY, so specifying `en-US` or `en-GB` is important.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 5,
      "totalChunks": 74,
      "startLineNumber": 53,
      "endLineNumber": 54
    }
  },
  {
    "content": "- You can also specify a script. The script is the writing system, or the characters used to transcribe the language. In practice, the script is often unnecessary, because the language used in a certain region is only written in one script. However, there are exceptions such as the Serbian language, which can be written in both the Latin and Cyrillic scripts (`sr-Latn` and `sr-Cyrl`), or the Chinese language, which can be written in both the Simplified and Traditional scripts (`zh-Hans` and `zh-Hant`).\n- The variants are rarely used. Usually, they denote different orthographies; for example, German has the `1901` and `1996` orthography variants, which are written as `de-1901` and `de-1996`.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 6,
      "totalChunks": 74,
      "startLineNumber": 55,
      "endLineNumber": 56
    }
  },
  {
    "content": "```js\n// These two are equivalent when passed to other Intl APIs\nconst locale1 = new Intl.Locale(\"en-US\");\nconst locale2 = new Intl.Locale(\"en-Latn-US\");\n\nconsole.log(locale1.language, locale1.script, locale1.region); // \"en\", undefined, \"US\"\nconsole.log(locale2.language, locale2.script, locale2.region); // \"en\", \"Latn\", \"US\"\n```\n\nA locale also contains a set of conventions used by that particular culture:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 7,
      "totalChunks": 74,
      "startLineNumber": 58,
      "endLineNumber": 67
    }
  },
  {
    "content": "<table>\n<thead><tr><th>Use case</th><th>Property</th><th>Description</th><th>Extension subtag</th></tr></thead>\n<tbody>\n<tr>\n<td rowspan=\"2\">Date/time formatting</td>\n<td>{{jsxref(\"Intl/Locale/calendar\", \"calendar\")}}</td>\n<td>Used to group days into years, months, and weeks, and to assign names to them. For example, the <code>gregory</code> date \"2022-01-01\" becomes \"28 Tevet 5782\" in the <code>hebrew</code> calendar.</td>\n<td><code>ca</code></td>\n</tr>\n<tr>\n<td>{{jsxref(\"Intl/Locale/hourCycle\", \"hourCycle\")}}</td>\n<td>Decides if times are displayed in 12-hour or 24-hour format, and whether the smallest hour number is 0 or 1.</td>\n<td><code>hc</code></td>\n</tr>\n<tr>\n<td>Number formatting, including dates, times, durations, etc.</td>\n<td>{{jsxref(\"Intl/Locale/numberingSystem\", \"numberingSystem\")}}</td>",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 8,
      "totalChunks": 74,
      "startLineNumber": 69,
      "endLineNumber": 85
    }
  },
  {
    "content": "<td><code>hc</code></td>\n</tr>\n<tr>\n<td>Number formatting, including dates, times, durations, etc.</td>\n<td>{{jsxref(\"Intl/Locale/numberingSystem\", \"numberingSystem\")}}</td>\n<td>Transforms numbers into a locale-specific notation. The regular <code>0123456789</code> system is called <code>latn</code> (Latin). Often, each script has a numbering system that is just a digit-by-digit translation, but some scripts have more than one numbering system, some may not typically write numbers in that script (for example, Chinese has its own <code>hanidec</code> numbering system, but most texts use the standard <code>latn</code> system), and others may require special conversion algorithms (for example, Roman numerals — <code>roman</code>).</td>\n<td><code>nu</code></td>\n</tr>\n<tr>\n<td rowspan=\"3\">Collation</td>\n<td>{{jsxref(\"Intl/Locale/collation\", \"collation\")}}</td>",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 9,
      "totalChunks": 74,
      "startLineNumber": 81,
      "endLineNumber": 91
    }
  },
  {
    "content": "<td><code>nu</code></td>\n</tr>\n<tr>\n<td rowspan=\"3\">Collation</td>\n<td>{{jsxref(\"Intl/Locale/collation\", \"collation\")}}</td>\n<td>Defines the generic collation algorithm. For example, if you use the German <code>phonebk</code> collation, then \"ä\" is treated as \"ae\", and will be sorted between \"ad\" and \"af\".</td>\n<td><code>co</code></td>\n</tr>\n<tr>\n<td>{{jsxref(\"Intl/Locale/caseFirst\", \"caseFirst\")}}</td>\n<td>Decides whether uppercase or lowercase letters should be sorted first, or if casing is ignored.</td>\n<td><code>kf</code></td>\n</tr>\n<tr>\n<td>{{jsxref(\"Intl/Locale/numeric\", \"numeric\")}}</td>\n<td>Decides whether numbers are sorted as numbers or as strings. For example, if true, \"10\" will be sorted after \"2\".</td>\n<td><code>kn</code></td>\n</tr>\n</tbody>\n</table>",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 10,
      "totalChunks": 74,
      "startLineNumber": 87,
      "endLineNumber": 106
    }
  },
  {
    "content": "You can explicitly specify these properties when constructing the `Intl.Locale` or passing language tags to other `Intl` constructors. There are two ways to do this — append them to the language tag or specify them as options.\n\n- To append them to the language tag, you first append the string `-u` (meaning \"Unicode extension\"), then the extension subtag as given above, then the value.\n- To specify them as options, you just add the property name as given above, together with its value, to the `options` object.\n\nUsing `Intl.DateTimeFormat` as an example, both of the following lines create a formatter that formats dates in the Hebrew calendar:\n\n```js\nconst df1 = new Intl.DateTimeFormat(\"en-US-u-ca-hebrew\");\nconst df2 = new Intl.DateTimeFormat(\"en-US\", { calendar: \"hebrew\" });\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 11,
      "totalChunks": 74,
      "startLineNumber": 108,
      "endLineNumber": 118
    }
  },
  {
    "content": "```js\nconst df1 = new Intl.DateTimeFormat(\"en-US-u-ca-hebrew\");\nconst df2 = new Intl.DateTimeFormat(\"en-US\", { calendar: \"hebrew\" });\n```\n\nUnrecognized properties are ignored, so you can use the same syntax as above with `Intl.NumberFormat`, but it won't do anything different than just passing `en-US`, because number formatting doesn't use the `calendar` property.\n\nIt is tricky to get the default values of these locale conventions. `new Intl.Locale(\"en-US\").calendar` returns `undefined`, because the `Locale` object only contains the information you passed to it. The default calendar is theoretically dependent on what API you are using the calendar with, so to get the default calendar of `en-US` as used by `Intl.DateTimeFormat`, you can use its {{jsxref(\"Intl/DateTimeFormat/resolvedOptions\", \"resolvedOptions()\")}} method. The same goes for other properties.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 12,
      "totalChunks": 74,
      "startLineNumber": 115,
      "endLineNumber": 122
    }
  },
  {
    "content": "```js\nconst locale = new Intl.Locale(\"en-US\");\nconsole.log(locale.calendar); // undefined; it's not provided\nconsole.log(new Intl.DateTimeFormat(locale).resolvedOptions().calendar); // \"gregory\"\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 13,
      "totalChunks": 74,
      "startLineNumber": 124,
      "endLineNumber": 128
    }
  },
  {
    "content": "`Intl.Locale` objects do two things simultaneously: they represent a parsed BCP 47 language tag (as demonstrated above), and they provide information about that locale. All of its properties, like `calendar`, are extracted from the input only, without querying any data source about default values. On the other hand, it has a group of methods for querying real-world information about the locale. For example, the {{jsxref(\"Intl/Locale/getCalendars\", \"getCalendars()\")}}, {{jsxref(\"Intl/Locale/getHourCycles\", \"getHourCycles()\")}}, {{jsxref(\"Intl/Locale/getNumberingSystems\", \"getNumberingSystems()\")}}, and {{jsxref(\"Intl/Locale/getCollations\", \"getCollations()\")}} methods complement the `calendar`, `hourCycle`, `numberingSystem`, and `collation` properties, and each returns an array of preferred values for that property.\n\n```js\nconst locale = new Intl.Locale(\"ar-EG\");\nconsole.log(locale.getCalendars()); // ['gregory', 'coptic', 'islamic', 'islamic-civil', 'islamic-tbla']\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 14,
      "totalChunks": 74,
      "startLineNumber": 130,
      "endLineNumber": 135
    }
  },
  {
    "content": "```js\nconst locale = new Intl.Locale(\"ar-EG\");\nconsole.log(locale.getCalendars()); // ['gregory', 'coptic', 'islamic', 'islamic-civil', 'islamic-tbla']\n```\n\n`Intl.Locale` instances also contain other methods that expose useful information, such as {{jsxref(\"Intl/Locale/getTextInfo\", \"getTextInfo()\")}}, {{jsxref(\"Intl/Locale/getTimeZones\", \"getTimeZones()\")}}, and {{jsxref(\"Intl/Locale/getWeekInfo\", \"getWeekInfo()\")}}.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Locale information",
      "chunkIndex": 15,
      "totalChunks": 74,
      "startLineNumber": 132,
      "endLineNumber": 137
    }
  },
  {
    "content": "## Figuring out the locale\n\nA shared concern for internationalization is: how do I know what locale to use?\n\nThe most obvious answer is \"what the user prefers.\" Browsers expose the user's language preferences through the {{domxref(\"Navigator/languages\", \"navigator.languages\")}} property. This is an array of language identifiers that can be directly passed to the formatter constructor—more on this later. The user can configure this list in their browser settings. You can also pass an empty array or `undefined`, which both cause the browser's default locale to be used.\n\n```js\nconst numberFormatter = new Intl.NumberFormat(navigator.languages);\nconsole.log(numberFormatter.format(1234567.89));\n\nconst numberFormatter2 = new Intl.NumberFormat([]);\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Figuring out the locale",
      "chunkIndex": 16,
      "totalChunks": 74,
      "startLineNumber": 139,
      "endLineNumber": 150
    }
  },
  {
    "content": "```js\nconst numberFormatter = new Intl.NumberFormat(navigator.languages);\nconsole.log(numberFormatter.format(1234567.89));\n\nconst numberFormatter2 = new Intl.NumberFormat([]);\n```\n\nHowever, this may not always provide the most desirable result. Strings formatted by `Intl` formatters represent a tiny fraction of text displayed on your site; most localized content is provided by you, the site developer. For example, suppose your site is only offered in two languages: English and French. If a Japanese user visits your site and expects to use your site in English, they will be baffled when they see the English text interleaved with numbers and dates in Japanese!\n\nUsually, you don't want to use the browser's default language. Rather, you want to use the same language that the rest of your site is offered in. Suppose your site has a language switcher that stores the user's choice somewhere — you could directly use that.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Figuring out the locale",
      "chunkIndex": 17,
      "totalChunks": 74,
      "startLineNumber": 145,
      "endLineNumber": 154
    }
  },
  {
    "content": "```js\n// Suppose this can be changed by some site-wide control\nconst userSettings = {\n  locale: \"en-US\",\n  colorMode: \"dark\",\n};\nconst numberFormatter = new Intl.NumberFormat(userSettings.locale);\nconsole.log(numberFormatter.format(1234567.89));\n```\n\nIf your site has a backend that dynamically selects the language based on the user's {{httpheader(\"Accept-Language\")}} header and sends back different HTML based on that, you could also use the HTML element's {{domxref(\"HTMLElement.lang\")}} property: `new Intl.NumberFormat(document.documentElement.lang)`.\n\nIf your site is only offered in one language, you could also hardcode the locale in your code: `new Intl.NumberFormat(\"en-US\")`.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Figuring out the locale",
      "chunkIndex": 18,
      "totalChunks": 74,
      "startLineNumber": 156,
      "endLineNumber": 168
    }
  },
  {
    "content": "If your site is only offered in one language, you could also hardcode the locale in your code: `new Intl.NumberFormat(\"en-US\")`.\n\nAs previously mentioned, you can also pass an array of locales to the constructor, representing a list of fallback choices. The first example using `navigator.languages` is an example of this: if the first user-configured locale is not supported for the particular operation, the next one is tried, and so on, until we find a requested locale for which the runtime has data. You can do this manually as well. In the example below, we specify a list of locales in decreasing order of specificity which all represent languages likely to be understood by a Hong Kong Chinese speaker, so the formatter picks the most specific one that it supports.\n\n```js\nconst numberFormatter = new Intl.NumberFormat([\n  \"yue-Hant\",\n  \"zh-Hant-HK\",\n  \"zh-Hant\",\n  \"zh\",\n]);\n```\n\nThere is no API for listing all supported locales, but there are a few methods for handling the locale list:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Figuring out the locale",
      "chunkIndex": 19,
      "totalChunks": 74,
      "startLineNumber": 168,
      "endLineNumber": 181
    }
  },
  {
    "content": "There is no API for listing all supported locales, but there are a few methods for handling the locale list:\n\n- {{jsxref(\"Intl.getCanonicalLocales()\")}}: This function takes a list of locale identifiers and returns a list of canonicalized locale identifiers. This is useful for understanding the canonicalization process for each `Intl` constructor.\n- The `supportedLocalesOf()` static method on each `Intl` object (like {{jsxref(\"Intl.DateTimeFormat.supportedLocalesOf()\")}}): This method takes the same arguments as the constructor (`locales` and `options`) and returns a subset of the given locale tags that match the given data. This is useful for understanding which locales are supported by the runtime for a particular operation, for example, to show a language switcher containing only the supported languages.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Figuring out the locale",
      "chunkIndex": 20,
      "totalChunks": 74,
      "startLineNumber": 181,
      "endLineNumber": 184
    }
  },
  {
    "content": "## Understanding the return value\n\nThe second shared concern for all objects is \"what does the method return?\" This is a hard question to answer beyond the structure or type of the returned value because there's no normative specification saying what _exactly_ should be returned. Most of the time, the result of a method is consistent. However, the output may vary between implementations, even within the same locale — output variations are by design and allowed by the specification. It may also not be what you expect. For example, the string returned by `format()` may use non-breaking spaces or be surrounded by bidirectional control characters. You should not compare the results of any `Intl` method to hardcoded constants; they should only be displayed to users.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding the return value",
      "chunkIndex": 21,
      "totalChunks": 74,
      "startLineNumber": 186,
      "endLineNumber": 188
    }
  },
  {
    "content": "Of course, this answer seems unsatisfactory, because most developers do wish to control what the output looks like—at least, you don't want your user to be confused by nonsensical output. Here are some guidelines if you do want to conduct testing, whether automated or manual:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding the return value",
      "chunkIndex": 22,
      "totalChunks": 74,
      "startLineNumber": 190,
      "endLineNumber": 190
    }
  },
  {
    "content": "- Test all locales that your user may use. This is easier if you have a fixed set of supported locales (for example via a language switcher). If you are using whatever the user prefers, you may pick a few common ones for your users, but bear in mind that what the user sees could vary. You can usually mock user preference via the test runner's configuration or mocking the `Intl` constructors.\n- Test on multiple JavaScript engines. The `Intl` API is directly implemented by the JavaScript engine, so for example you should expect Node.js and Chrome (which both use V8) to have the same output, while Firefox (which uses SpiderMonkey) may have a different output. Although all engines likely use the CLDR data, they usually postprocess it in different ways. Some browser build settings (for reducing the install size, for example) may also affect what locales and options are supported.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding the return value",
      "chunkIndex": 23,
      "totalChunks": 74,
      "startLineNumber": 192,
      "endLineNumber": 193
    }
  },
  {
    "content": "- Don't assume the output. This means you shouldn't write the output by hand, such as `expect(result).toBe(\"foo\")`. Instead, use snapshot testing or copy the string value from the output of a test run.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Understanding the return value",
      "chunkIndex": 24,
      "totalChunks": 74,
      "startLineNumber": 194,
      "endLineNumber": 194
    }
  },
  {
    "content": "## Formatting data\n\nA major use case of `Intl` is to output locale-specific texts representing structured data. This is similar to translation software, but instead of letting you translate arbitrary text, it takes data such as dates, numbers, and lists, and formats them according to locale-specific rules.\n\nThe {{jsxref(\"Intl.DateTimeFormat\")}}, {{jsxref(\"Intl.DurationFormat\")}}, {{jsxref(\"Intl.ListFormat\")}}, {{jsxref(\"Intl.NumberFormat\")}}, and {{jsxref(\"Intl.RelativeTimeFormat\")}} objects each format one kind of data. Each instance provides two methods:\n\n- `format()`: Takes a piece of data and returns a string using the formatting rule as determined by the locale and options.\n- `formatToParts()`: Takes the same data and returns the same string, but broken down into parts, each part being an object with a `type` and a `value`. This is useful for more advanced use cases, such as interleaving the formatted text with other texts.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Formatting data",
      "chunkIndex": 25,
      "totalChunks": 74,
      "startLineNumber": 196,
      "endLineNumber": 203
    }
  },
  {
    "content": "For example, here's a typical use of the {{jsxref(\"Intl.NumberFormat\")}} object:\n\n```js\n// 1. Construct a formatter object, specifying the locale and formatting options:\nconst price = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\n// 2. Use the `format` method of the formatter object to format a number:\nconsole.log(price.format(5.259)); // $5.26\n\n// Or, use the `formatToParts` method to get the formatted number\n// broken down into parts:\nconsole.table(price.formatToParts(5.259));\n// |   | type       | value |\n// | 0 | \"currency\" | \"$\"   |\n// | 1 | \"integer\"  | \"5\"   |\n// | 2 | \"decimal\"  | \".\"   |\n// | 3 | \"fraction\" | \"26\"  |\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Formatting data",
      "chunkIndex": 26,
      "totalChunks": 74,
      "startLineNumber": 205,
      "endLineNumber": 225
    }
  },
  {
    "content": "You don't always have to construct a formatter object in order to format strings. For casual use, you can also directly call the `toLocaleString()` method on the data, passing the locale and options as arguments. The `toLocaleString()` method is implemented by {{jsxref(\"Temporal/PlainDate/toLocaleString\", \"Temporal.PlainDate.prototype.toLocaleString()\")}}, {{jsxref(\"Temporal/Duration/toLocaleString\", \"Temporal.Duration.prototype.toLocaleString()\")}}, {{jsxref(\"Number.prototype.toLocaleString()\")}}, and so on. Read the documentation for the data you are formatting to see if it supports `toLocaleString()`, and what formatter options it corresponds to.\n\n```js\nconsole.log(\n  (5.259).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  }),\n); // $5.26\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Formatting data",
      "chunkIndex": 27,
      "totalChunks": 74,
      "startLineNumber": 227,
      "endLineNumber": 236
    }
  },
  {
    "content": "```js\nconsole.log(\n  (5.259).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  }),\n); // $5.26\n```\n\nNote that `toLocaleString()` is potentially less efficient than using a formatter object, because every time `toLocaleString` is called, it has to perform a search in a big database of localization strings. When the method is called many times with the same arguments, it is better to create a formatter object and use its `format()` method, because a formatter object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Formatting data",
      "chunkIndex": 28,
      "totalChunks": 74,
      "startLineNumber": 229,
      "endLineNumber": 238
    }
  },
  {
    "content": "### Date and time formatting\n\n{{jsxref(\"Intl.DateTimeFormat\")}} formats dates and times, as well as ranges of dates and times. The `DateTimeFormat` object takes date/time inputs in one of the following forms: {{jsxref(\"Date\")}}, {{jsxref(\"Temporal.PlainDateTime\")}}, {{jsxref(\"Temporal.PlainTime\")}}, {{jsxref(\"Temporal.PlainDate\")}}, {{jsxref(\"Temporal.PlainYearMonth\")}}, or {{jsxref(\"Temporal.PlainMonthDay\")}}.\n\n> [!NOTE]\n> You can't pass a {{jsxref(\"Temporal.ZonedDateTime\")}} object directly, because the time zone is already fixed in the object. You should use {{jsxref(\"Temporal/ZonedDateTime/toLocaleString\", \"Temporal.ZonedDateTime.prototype.toLocaleString()\")}} or convert it to a {{jsxref(\"Temporal.PlainDateTime\")}} object first.\n\nCommon use cases of localized date and time formatting are as follows:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 29,
      "totalChunks": 74,
      "startLineNumber": 240,
      "endLineNumber": 247
    }
  },
  {
    "content": "Common use cases of localized date and time formatting are as follows:\n\n- Output the same date and time in another calendar system, such as the Islamic, Hebrew, or Chinese calendar.\n- Output the same real-world time (instant) but in another time zone.\n- Selectively output certain components of the date and time, such as only the year and month, and the specific representation of them (such as \"Thursday\" or \"Thu\").\n- Output the date according to locale-specific conventions, such as MM/DD/YYYY as in the U.S., DD/MM/YYYY as in the U.K., or YYYY/MM/DD as in Japan.\n- Output the time according to locale-specific conventions, such as 12-hour or 24-hour clock.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 30,
      "totalChunks": 74,
      "startLineNumber": 247,
      "endLineNumber": 253
    }
  },
  {
    "content": "To decide what the formatted string looks like, you first choose the calendar (which affects the year, month, week, and day calculation) and time zone (which affects the exact time as well as possibly the date). This is done using the aforementioned `calendar` option (or the `-ca-` extension key in the locale identifier), and the `timeZone` option.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 31,
      "totalChunks": 74,
      "startLineNumber": 255,
      "endLineNumber": 255
    }
  },
  {
    "content": "- `Date` objects represent a unique instant in the user's time zone and in the ISO 8601 calendar (as reported by methods like {{jsxref(\"Date.prototype.getHours()\")}} and {{jsxref(\"Date.prototype.getMonth()\")}}). They are converted to the given `calendar` and `timeZone` by preserving the instant, so the date and time components may change.\n- The various {{jsxref(\"Temporal\")}} objects already have a calendar built-in, so the `calendar` option must be consistent with the calendar of the object—unless the date's calendar is `\"iso8601\"`, in which case it is converted to the requested `calendar`. These objects don't have a time zone, so they are directly displayed in the given `timeZone` without conversion.\n\nHere we demonstrate how the combination of `calendar` and `timeZone` configurations result in different representations of the same instant.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 32,
      "totalChunks": 74,
      "startLineNumber": 257,
      "endLineNumber": 260
    }
  },
  {
    "content": "Here we demonstrate how the combination of `calendar` and `timeZone` configurations result in different representations of the same instant.\n\n```js\n// Assume that the local time zone is UTC\nconst targetDate = new Date(2022, 0, 1); // 2022-01-01 midnight in the local time zone\nconst results = [];\n\nfor (const calendar of [\"gregory\", \"hebrew\"]) {\n  for (const timeZone of [\"America/New_York\", \"Asia/Tokyo\"]) {\n    const df = new Intl.DateTimeFormat(\"en-US\", {\n      calendar,\n      timeZone,\n      // More on these later\n      dateStyle: \"full\",\n      timeStyle: \"full\",\n    });\n    results.push({ calendar, timeZone, output: df.format(targetDate) });\n  }\n}\n\nconsole.table(results);\n```\n\nThe output looks like this:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 33,
      "totalChunks": 74,
      "startLineNumber": 260,
      "endLineNumber": 283
    }
  },
  {
    "content": "console.table(results);\n```\n\nThe output looks like this:\n\n| calendar  | timeZone           | output                                                          |\n| --------- | ------------------ | --------------------------------------------------------------- |\n| 'gregory' | 'America/New_York' | 'Friday, December 31, 2021 at 7:00:00 PM Eastern Standard Time' |\n| 'gregory' | 'Asia/Tokyo'       | 'Saturday, January 1, 2022 at 9:00:00 AM Japan Standard Time'   |\n| 'hebrew'  | 'America/New_York' | 'Friday, 27 Tevet 5782 at 7:00:00 PM Eastern Standard Time'     |\n| 'hebrew'  | 'Asia/Tokyo'       | 'Saturday, 28 Tevet 5782 at 9:00:00 AM Japan Standard Time'     |\n\nA date/time is comprised of the following components: `weekday`, `era`, `year`, `month`, `day`, `dayPeriod`, `hour`, `minute`, `second`, `fractionalSecondDigits`, and `timeZoneName`. Your next decision is what components to include in the output, and what forms they should take. You have two choices:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 34,
      "totalChunks": 74,
      "startLineNumber": 280,
      "endLineNumber": 292
    }
  },
  {
    "content": "- You can manually configure each component, using options with the same name as the component. Only the components you specify will be included in the output, with the specified form.\n- You can use the shortcuts `dateStyle` and `timeStyle`, which are predefined sets of components. They expand to a set of component options depending on the locale.\n\nYou should pick one of these two methods, because they are mutually exclusive. Using both methods simultaneously will result in an error.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 35,
      "totalChunks": 74,
      "startLineNumber": 294,
      "endLineNumber": 297
    }
  },
  {
    "content": "You should pick one of these two methods, because they are mutually exclusive. Using both methods simultaneously will result in an error.\n\nUnderlyingly, after requesting a combination of components, the `DateTimeFormat` object looks for a \"template\" that matches the requested components, so it only needs to fill in the values one by one. Not every combination of components has a predefined template. `DateTimeFormat` has a `formatMatcher` option that decides how to negotiate, by making components longer or shorter than requested, or by omitting or adding components. It gets quite technical, so you should read the [`Intl.DateTimeFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#date-time_component_options) reference to better understand how it handles this.\n\nHere, we demonstrate a few common ways to format the components:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 36,
      "totalChunks": 74,
      "startLineNumber": 297,
      "endLineNumber": 301
    }
  },
  {
    "content": "Here, we demonstrate a few common ways to format the components:\n\n```js\nconst df1 = new Intl.DateTimeFormat(\"en-US\", {\n  // Include all components (usually)\n  dateStyle: \"full\",\n  timeStyle: \"full\",\n});\n\nconst df2 = new Intl.DateTimeFormat(\"en-US\", {\n  // Display the calendar date\n  era: \"short\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n});\n\nconst df3 = new Intl.DateTimeFormat(\"en-US\", {\n  // Display a time like on a digital clock\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\",\n  timeZoneName: \"shortOffset\",\n});\n\nconst targetDate = new Date(2022, 0, 1, 12, 34, 56); // 2022-01-01 12:34:56 in the local time zone\nconsole.log(df1.format(targetDate));\n// Saturday, January 1, 2022 at 12:34:56 PM Coordinated Universal Time\n// January 1, 2022 AD\n// 12:34:56 PM GMT\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 37,
      "totalChunks": 74,
      "startLineNumber": 301,
      "endLineNumber": 331
    }
  },
  {
    "content": "There are other customization options. For example, you can use the `hourCycle` option to display the time in 12-hour or 24-hour and show midnight/noon as 12:00 or 0:00. You can also use the `numberingSystem` option to display any numbers in another numbering system.\n\nApart from `format()`, there's a second important method, {{jsxref(\"Intl/DateTimeFormat/formatRange\", \"formatRange()\")}}, which formats a range of dates or times. It takes two date-times of the same type, formats each one, joins them with a range separator (like the en-dash), and deduplicates the common parts.\n\n```js\nconst springBreak = {\n  start: new Date(2023, 2, 10),\n  end: new Date(2023, 2, 26),\n};\n\nconst df = new Intl.DateTimeFormat(\"en-US\", { dateStyle: \"long\" });\nconsole.log(df.formatRange(springBreak.start, springBreak.end));\n// March 10 – 26, 2023\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date and time formatting",
      "chunkIndex": 38,
      "totalChunks": 74,
      "startLineNumber": 333,
      "endLineNumber": 346
    }
  },
  {
    "content": "### Number formatting\n\nNumber formatting is done with the {{jsxref(\"Intl.NumberFormat\")}} object. The `NumberFormat` object accepts inputs in the form of numbers, strings, or `BigInt` values. Passing a string or `BigInt` instead of a number allows you to format numbers that are too large or too small to be represented precisely as a JavaScript number.\n\nCommon use cases of localized number formatting are as follows:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 39,
      "totalChunks": 74,
      "startLineNumber": 348,
      "endLineNumber": 352
    }
  },
  {
    "content": "Common use cases of localized number formatting are as follows:\n\n- Output the number in another numbering system (script), such as Chinese, Arabic, or Roman.\n- Output the number with locale-specific conventions, such as the decimal symbol (\".\" in English, but \",\" in many European cultures), or digit grouping (3 digits in English, but may be 4 or 2 in other cultures, and may use \",\", \" \", or \".\").\n- Output the number with exponential notation such as \"3.7 million\" or \"2 thousand\".\n- Output the number as a currency, applying specific currency symbols and rounding rules. For example, monetary values less than one cent in the U.S. or less than one yen in Japan may not be meaningful to display.\n- Output the number as a percentage, applying locale-specific conversion and formatting rules.\n- Output the number with units, such as \"meters\" or \"liters\", with translated unit names.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 40,
      "totalChunks": 74,
      "startLineNumber": 352,
      "endLineNumber": 359
    }
  },
  {
    "content": "To decide what the formatted string looks like, you first choose the numbering system (which affects the characters used for the digits). The purpose of a numbering system is already discussed in [locale information](#locale_information). Another option you need to decide is the `style`, which sets the context for what the number represents, and potentially affects other options' default values. It is one of `\"decimal\"`, `\"percent\"`, `\"currency\"`, or `\"unit\"`. If you want to format currencies, then you also need to provide the `currency` option. If you want to format units, then you also need to provide the `unit` option.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 41,
      "totalChunks": 74,
      "startLineNumber": 361,
      "endLineNumber": 361
    }
  },
  {
    "content": "```js\nconst results = [];\nfor (const options of [\n  { style: \"decimal\" }, // Format the number as a dimensionless decimal\n  { style: \"percent\" }, // Format the number as a percentage; it is multiplied by 100\n  { style: \"currency\", currency: \"USD\" }, // Format the number as a US dollar amount\n  { style: \"unit\", unit: \"meter\" }, // Format the number as a length in meters\n]) {\n  const nf = new Intl.NumberFormat(\"en-US\", options);\n  results.push({ style: options.style, output: nf.format(1234567.89) });\n}\nconsole.table(results);\n```\n\nThe output looks like:\n\n| style      | output           |\n| ---------- | ---------------- |\n| 'decimal'  | '1,234,567.89'   |\n| 'percent'  | '123,456,789%'   |\n| 'currency' | '$1,234,567.89'  |\n| 'unit'     | '1,234,567.89 m' |",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 42,
      "totalChunks": 74,
      "startLineNumber": 363,
      "endLineNumber": 384
    }
  },
  {
    "content": "The next group of options all specify what the numeric part should look like. First, you may want to represent extremely large values in a more readable way. You can set the `notation` option to `\"scientific\"` or `\"engineering\"`, which both use the `1.23e+6` notation. The difference is that the latter uses multiples of 3 for the exponent, keeping the [mantissa](https://en.wikipedia.org/wiki/Scientific_notation) (the part before the `e` symbol) between 1 and 1000, while the former can use any integer for the exponent, keeping the mantissa between 1 and 10. You can also set `notation` to `\"compact\"` to use a more human-readable notation.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 43,
      "totalChunks": 74,
      "startLineNumber": 386,
      "endLineNumber": 386
    }
  },
  {
    "content": "```js\nconst results = [];\nfor (const options of [\n  { notation: \"scientific\" },\n  { notation: \"engineering\" },\n  { notation: \"compact\", compactDisplay: \"short\" }, // \"short\" is default\n  { notation: \"compact\", compactDisplay: \"long\" },\n]) {\n  const nf = new Intl.NumberFormat(\"en-US\", options);\n  results.push({\n    notation: options.compactDisplay\n      ? `${options.notation}-${options.compactDisplay}`\n      : options.notation,\n    output: nf.format(12000),\n  });\n}\nconsole.table(results);\n```\n\nThe output looks like:\n\n| notation        | output        |\n| --------------- | ------------- |\n| 'scientific'    | '1.2E4'       |\n| 'engineering'   | '12E3'        |\n| 'compact-short' | '12K'         |\n| 'compact-long'  | '12 thousand' |\n\nThen, you may want to round the number (if you specified `notation`, then just the mantissa part), so you don't display a number that's too long. These are the digit options, which include:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 44,
      "totalChunks": 74,
      "startLineNumber": 388,
      "endLineNumber": 416
    }
  },
  {
    "content": "Then, you may want to round the number (if you specified `notation`, then just the mantissa part), so you don't display a number that's too long. These are the digit options, which include:\n\n- `minimumIntegerDigits`\n- `minimumFractionDigits`\n- `maximumFractionDigits`\n- `minimumSignificantDigits`\n- `maximumSignificantDigits`\n- `roundingPriority`\n- `roundingIncrement`\n- `roundingMode`\n\nThe exact interaction of these options is quite complex and not worth covering here. You should read the [digit options](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options) reference for more detail. Nevertheless, the general idea is straightforward: we first find the number of decimal places we want to keep, then we round excess decimal places off, either rounding down or up, depending on the value of the last digit.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 45,
      "totalChunks": 74,
      "startLineNumber": 416,
      "endLineNumber": 427
    }
  },
  {
    "content": "```js\nconst results = [];\nfor (const options of [\n  { minimumFractionDigits: 4, maximumFractionDigits: 4 },\n  { minimumSignificantDigits: 4, maximumSignificantDigits: 4 },\n  { minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: \"floor\" },\n  {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n    roundingMode: \"floor\",\n    roundingIncrement: 10,\n  },\n]) {\n  const nf = new Intl.NumberFormat(\"en-US\", options);\n  results.push({\n    options,\n    output: nf.format(1234.56789),\n  });\n}\nconsole.table(results);\n```\n\nThe output looks like this:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 46,
      "totalChunks": 74,
      "startLineNumber": 429,
      "endLineNumber": 451
    }
  },
  {
    "content": "The output looks like this:\n\n| options                                                                                                | output       |\n| ------------------------------------------------------------------------------------------------------ | ------------ |\n| `{ minimumFractionDigits: 4, maximumFractionDigits: 4 }`                                               | '1,234.5679' |\n| `{ minimumSignificantDigits: 4, maximumSignificantDigits: 4 }`                                         | '1,235'      |\n| `{ minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: \"floor\" }`                        | '1,234'      |\n| `{ minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: \"floor\", roundingIncrement: 10 }` | '1,230'      |",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 47,
      "totalChunks": 74,
      "startLineNumber": 451,
      "endLineNumber": 458
    }
  },
  {
    "content": "There are other customization options. For example, you can use the `useGrouping` and `signDisplay` options to customize whether and how to show the group separators (like \",\" in \"1,234,567.89\") and the sign. However, note that the characters used for the group separator, decimal point, and sign are locale-specific, so you can't customize them directly.\n\nApart from `format()`, there's a second important method, {{jsxref(\"Intl/NumberFormat/formatRange\", \"formatRange()\")}}, which formats a range of numbers. It takes two number representations, formats each one, joins them with a range separator (like the en-dash), and potentially deduplicates the common parts.\n\n```js\nconst heightRange = {\n  min: 1.63,\n  max: 1.95,\n};\n\nconst nf = new Intl.NumberFormat(\"en-US\", { style: \"unit\", unit: \"meter\" });\nconsole.log(nf.formatRange(heightRange.min, heightRange.max));\n// 1.63–1.95 m\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number formatting",
      "chunkIndex": 48,
      "totalChunks": 74,
      "startLineNumber": 460,
      "endLineNumber": 473
    }
  },
  {
    "content": "### List formatting\n\nYou may already have written code that does this:\n\n```js example-bad\nconst fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole.log(`I like ${fruits.join(\", \")}.`);\n// I like apple, banana, cherry.\n```\n\nThis code is not internationalized. In some languages, the list separator is not a comma. In _most_ languages (including English), you need a conjunction before the last item. But even just adding an \"and\" manually doesn't make it correct among all English speakers, because there's the debate of [Oxford commas](https://en.wikipedia.org/wiki/Serial_comma) in English: \"apple, banana, and cherry\" vs. \"apple, banana and cherry\".\n\nThe {{jsxref(\"Intl.ListFormat\")}} object solves this problem. It takes an array of strings and joins them in a locale-specific way such that the result represents a conjunction (and), disjunction (or), or a list of units.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "List formatting",
      "chunkIndex": 49,
      "totalChunks": 74,
      "startLineNumber": 475,
      "endLineNumber": 487
    }
  },
  {
    "content": "```js\nconst fruits = [\"apple\", \"banana\", \"cherry\"];\nconst lf = new Intl.ListFormat(\"en-US\", { style: \"long\", type: \"conjunction\" });\nconsole.log(`I like ${lf.format(fruits)}.`);\n// I like apple, banana, and cherry.\n\nconst lf = new Intl.ListFormat(\"en-US\", { style: \"long\", type: \"disjunction\" });\nconsole.log(`I can give you ${lf.format(fruits)}.`);\n// I can give you apple, banana, or cherry.\n```\n\nCheck {{jsxref(\"Intl/ListFormat/ListFormat\", \"Intl.ListFormat()\")}} for more examples and options.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "List formatting",
      "chunkIndex": 50,
      "totalChunks": 74,
      "startLineNumber": 489,
      "endLineNumber": 500
    }
  },
  {
    "content": "### Relative time formatting\n\n{{jsxref(\"Intl.RelativeTimeFormat\")}} formats a time difference. The `RelativeTimeFormat` object takes relative times in the form of two arguments: a number (with any sign) and a time unit, such as `\"day\"`, `\"hour\"`, or `\"minute\"`.\n\nIt does several things at once:\n\n- It localizes and pluralizes the time unit, such as \"1 day\" vs. \"2 days\", like in number formatting.\n- It chooses the appropriate phrase for past and future times, such as \"in 1 day\" vs. \"1 day ago\".\n- It may select a special phrase for some time units, such as \"1 day ago\" vs. \"yesterday\".\n\n```js\nconst rtf = new Intl.RelativeTimeFormat(\"en-US\", { numeric: \"auto\" });\nconsole.log(rtf.format(1, \"day\")); // tomorrow\nconsole.log(rtf.format(2, \"day\")); // in 2 days\nconsole.log(rtf.format(-1, \"hour\")); // 1 hour ago\n```\n\nCheck {{jsxref(\"Intl/RelativeTimeFormat/RelativeTimeFormat\", \"Intl.RelativeTimeFormat()\")}} for more examples and options.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Relative time formatting",
      "chunkIndex": 51,
      "totalChunks": 74,
      "startLineNumber": 502,
      "endLineNumber": 519
    }
  },
  {
    "content": "### Duration formatting\n\n{{jsxref(\"Intl.DurationFormat\")}} provides duration formatting, such as \"3 hours, 4 minutes, 5 seconds\". It is not a primitive operation with its own formatter: it uses {{jsxref(\"Intl.NumberFormat\")}} and {{jsxref(\"Intl.ListFormat\")}} internally to format each duration component, then joins them with a list separator. The `DurationFormat` object takes durations in the form of a {{jsxref(\"Temporal.Duration\")}} object, or a plain object with the same properties.\n\nApart from customizing the numbering system, the duration formatting options decides whether or not to show each component, and how long they should be.\n\n```js\nconsole.log(\n  new Intl.DurationFormat(\"en-US\", {\n    style: \"long\",\n  }).format({ hours: 3, minutes: 4, seconds: 5 }),\n);\n// 3 hours, 4 minutes, and 5 seconds\n```\n\nCheck {{jsxref(\"Intl/DurationFormat/DurationFormat\", \"Intl.DurationFormat()\")}} for more examples and options.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Duration formatting",
      "chunkIndex": 52,
      "totalChunks": 74,
      "startLineNumber": 521,
      "endLineNumber": 536
    }
  },
  {
    "content": "## Collation\n\nThe {{jsxref(\"Intl.Collator\")}} object is useful for comparing and sorting strings. It takes two strings and returns a number indicating their relative order, in the same way as the `compareFn` argument of the {{jsxref(\"Array.prototype.sort\")}} method.\n\nThere are many reasons why you should not use JavaScript operators like `===` or `>` to compare user-facing strings:",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Collation",
      "chunkIndex": 53,
      "totalChunks": 74,
      "startLineNumber": 538,
      "endLineNumber": 542
    }
  },
  {
    "content": "- Irrelevant orthographic variants: For example, in English, \"naïve\" and \"naive\" are just alternative spellings of the same word and should be treated as equal.\n- Ignoring case: Often, you want to ignore case when comparing strings. For example, \"apple\" and \"Apple\" should be treated as equal.\n- Unicode code point order doesn't make sense: Comparison operators like `>` compare by Unicode code point order, which is not the same as the order of characters in a dictionary. For example, \"ï\" comes after \"z\" in code point order, but you would want it to be ordered next to \"i\" in a dictionary.\n- Unicode normalization: The same character may have multiple representations in Unicode. For example, \"ñ\" can be represented as a single character or as \"n\" followed by a combining tilde. (See {{jsxref(\"String.prototype.normalize()\")}}.) These should be treated as equal.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Collation",
      "chunkIndex": 54,
      "totalChunks": 74,
      "startLineNumber": 544,
      "endLineNumber": 547
    }
  },
  {
    "content": "- Number comparison: Numbers in strings should be compared as numbers, not as strings. For example, you would want \"test-10\" to come after \"test-2\".",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Collation",
      "chunkIndex": 55,
      "totalChunks": 74,
      "startLineNumber": 548,
      "endLineNumber": 548
    }
  },
  {
    "content": "There are two distinct use cases for collation: **sorting** and **searching**. Sorting is when you have a list of strings and you want to order them according to some rule. Searching is when you have a list of strings and you want to find a string that matches a query. When searching, you should only pay attention to whether the comparison result is zero (equal) or not, not the sign of the result.\n\nThere are many different ways to sort, even within the same locale. For example, there are two different sort orders in German, _phonebook_ and _dictionary_. Phonebook sort emphasizes sound — as if \"ä\", \"ö\", and so on were expanded to \"ae\", \"oe\", and so on before sorting.\n\n```js\nconst names = [\"Hochberg\", \"Hönigswald\", \"Holzman\"];\n\nconst germanPhonebook = new Intl.Collator(\"de-DE-u-co-phonebk\");\n\n// as if sorting [\"Hochberg\", \"Hoenigswald\", \"Holzman\"]:\nconsole.log(names.sort(germanPhonebook.compare));\n// ['Hochberg', 'Hönigswald', 'Holzman']\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Collation",
      "chunkIndex": 56,
      "totalChunks": 74,
      "startLineNumber": 550,
      "endLineNumber": 562
    }
  },
  {
    "content": "// as if sorting [\"Hochberg\", \"Hoenigswald\", \"Holzman\"]:\nconsole.log(names.sort(germanPhonebook.compare));\n// ['Hochberg', 'Hönigswald', 'Holzman']\n```\n\nSome German words conjugate with extra umlauts, so in dictionaries it's sensible to order ignoring umlauts (except when ordering words differing _only_ by umlauts: _schon_ before _schön_).\n\n```js\nconst germanDictionary = new Intl.Collator(\"de-DE-u-co-dict\");\n\n// as if sorting [\"Hochberg\", \"Honigswald\", \"Holzman\"]:\nconsole.log(names.sort(germanDictionary.compare).join(\", \"));\n// \"Hochberg, Holzman, Hönigswald\"\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Collation",
      "chunkIndex": 57,
      "totalChunks": 74,
      "startLineNumber": 559,
      "endLineNumber": 572
    }
  },
  {
    "content": "## Plural rules\n\nThe {{jsxref(\"Intl.PluralRules\")}} object is useful for selecting the correct plural form of a word. It doesn't automatically pluralize words for you (for example, you can't pass it \"apple\" and expect \"apples\" back), but it tells you which plural form to use based on a number. You may already be doing this:\n\n```js\nfunction formatMessage(n) {\n  return `You have ${n} ${n === 1 ? \"apple\" : \"apples\"}.`;\n}\n```\n\nBut this is hard to generalize across languages, especially those with many plural forms. You can see {{jsxref(\"Intl.PluralRules\")}} for a general introduction to plural rules. Here, we just demonstrate a few common use cases.\n\n```js\nconst prCard = new Intl.PluralRules(\"en-US\");\nconst prOrd = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst englishOrdinalSuffixes = {\n  one: \"st\",\n  two: \"nd\",\n  few: \"rd\",\n  other: \"th\",\n};\n\nconst catPlural = {\n  one: \"cat\",\n  other: \"cats\",\n};",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Plural rules",
      "chunkIndex": 58,
      "totalChunks": 74,
      "startLineNumber": 574,
      "endLineNumber": 600
    }
  },
  {
    "content": "const englishOrdinalSuffixes = {\n  one: \"st\",\n  two: \"nd\",\n  few: \"rd\",\n  other: \"th\",\n};\n\nconst catPlural = {\n  one: \"cat\",\n  other: \"cats\",\n};\n\nfunction formatMessage(n1, n2) {\n  return `The ${n1}${englishOrdinalSuffixes[prOrd.select(n1)]} U.S. president had ${n2} ${catPlural[prCard.select(n2)]}.`;\n}\n\nconsole.log(formatMessage(42, 1)); // The 42nd U.S. president had 1 cat.\nconsole.log(formatMessage(45, 0)); // The 45th U.S. president had 0 cats.\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Plural rules",
      "chunkIndex": 59,
      "totalChunks": 74,
      "startLineNumber": 590,
      "endLineNumber": 608
    }
  },
  {
    "content": "## Segmentation\n\nThe {{jsxref(\"Intl.Segmenter\")}} object is useful for breaking a string into segments. Without `Intl`, you are already able to split a string by [UTF-16 code units and Unicode code points](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters):\n\n```js\nconst str = \"🇺🇸🇨🇳🇷🇺🇬🇧🇫🇷\";\nconsole.log(str.split(\"\"));\n// Array(20) ['\\uD83C', '\\uDDFA', '\\uD83C', ...]\nconsole.log([...str]);\n// Array(10) ['🇺', '🇸', '🇨', '🇳', '🇷', '🇺', '🇬', '🇧', '🇫', '🇷']\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 60,
      "totalChunks": 74,
      "startLineNumber": 610,
      "endLineNumber": 620
    }
  },
  {
    "content": "But as you can see, Unicode code points are not the same as what human users perceive as discrete characters. This often happens with emojis, where a single emoji can be represented by multiple code points. When the user interacts with text, a grapheme is the smallest unit of text they can manipulate, such as delete or select. The `Segmenter` object enables grapheme-level segmentation, which is useful for counting characters, measuring text width, and so on. It takes a string and returns an iterable [segments](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object, each element of which has a `segment` property representing the text of the segment.\n\n```js\nconst segmenter = new Intl.Segmenter(\"en-US\", { granularity: \"grapheme\" });\nconsole.log([...segmenter.segment(\"🇺🇸🇨🇳🇷🇺🇬🇧🇫🇷\")].map((s) => s.segment));\n// ['🇺🇸', '🇨🇳', '🇷🇺', '🇬🇧', '🇫🇷']\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 61,
      "totalChunks": 74,
      "startLineNumber": 622,
      "endLineNumber": 628
    }
  },
  {
    "content": "The segmenter can also do higher-level segmentation, including word-level and sentence-level splitting. These use cases are necessarily language-specific. For example, the following is a very poor implementation of word-counting:\n\n```js example-bad\nconst wordCount = (str) => str.split(/\\s+/).length;\nconsole.log(wordCount(\"Hello, world!\")); // 2\n```\n\nThere are several problems with this: not all languages use spaces to separate words, not all spaces are word-separating, and not all words are separated by spaces. To solve this, use `Segmenter` with `granularity: \"word\"`. The result is the input string, split into segments of words and non-words. If you are counting words, you should filter out the non-words by checking each segment's `isWordLike` property.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 62,
      "totalChunks": 74,
      "startLineNumber": 630,
      "endLineNumber": 637
    }
  },
  {
    "content": "```js\nconst segmenter = new Intl.Segmenter(\"en-US\", { granularity: \"word\" });\nconst str = \"It can even split non-space-separated words\";\nconsole.table([...segmenter.segment(str)]);\n// ┌─────────────┬───────┬────────────┐\n// │ segment     │ index │ isWordLike │\n// ├─────────────┼───────┼────────────┤\n// │ 'It'        │ 0     │ true       │\n// │ ' '         │ 2     │ false      │\n// │ 'can'       │ 3     │ true       │\n// │ ' '         │ 6     │ false      │\n// │ 'even'      │ 7     │ true       │\n// │ ' '         │ 11    │ false      │\n// │ 'split'     │ 12    │ true       │\n// │ ' '         │ 17    │ false      │\n// │ 'non'       │ 18    │ true       │\n// │ '-'         │ 21    │ false      │\n// │ 'space'     │ 22    │ true       │\n// │ '-'         │ 27    │ false      │\n// │ 'separated' │ 28    │ true       │\n// │ ' '         │ 37    │ false      │\n// │ 'words'     │ 38    │ true       │\n// └─────────────┴───────┴────────────┘",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 63,
      "totalChunks": 74,
      "startLineNumber": 639,
      "endLineNumber": 661
    }
  },
  {
    "content": "console.log(\n  [...segmenter.segment(str)].filter((s) => s.isWordLike).map((s) => s.segment),\n);\n// ['It', 'can', 'even', 'split', 'non', 'space', 'separated', 'words']\n```\n\nWord segmentation works for character-based languages too. For example, in Chinese, several characters can represent a single word, but there's no space between them. The segmenter implements the same behavior as the browser's built-in word segmentation, triggered by double-clicking a word.\n\n```js\nconst segmenter = new Intl.Segmenter(\"zh-Hans\", { granularity: \"word\" });\nconsole.log([...segmenter.segment(\"我是这篇文档的作者\")].map((s) => s.segment));\n// ['我是', '这', '篇', '文', '档', '的', '作者']\n```\n\nSentence segmentation is similarly complex. For example, in English, there are many punctuation marks that could mark the end of a sentence (\".\", \"!\", \"?\", and so on).",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 64,
      "totalChunks": 74,
      "startLineNumber": 663,
      "endLineNumber": 677
    }
  },
  {
    "content": "Sentence segmentation is similarly complex. For example, in English, there are many punctuation marks that could mark the end of a sentence (\".\", \"!\", \"?\", and so on).\n\n```js\nconst segmenter = new Intl.Segmenter(\"en-US\", { granularity: \"sentence\" });\nconsole.log(\n  [...segmenter.segment(\"I ate a sandwich. Then I went to bed.\")].map(\n    (s) => s.segment,\n  ),\n);\n// ['I ate a sandwich. ', 'Then I went to bed.']\n```\n\nNote that the segmenter doesn't remove any characters. It just splits the string into segments, each of which is a sentence. You can then remove the punctuation marks if you want. Also, the current implementation of the segmenter doesn't support sentence segmentation suppressions (preventing sentence breaks after periods like \"Mr.\" or \"Approx.\"), but there's ongoing work to support this.",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Segmentation",
      "chunkIndex": 65,
      "totalChunks": 74,
      "startLineNumber": 677,
      "endLineNumber": 689
    }
  },
  {
    "content": "## Display names\n\nAfter introducing so many options and behaviors, you may wonder how to present them to the user. `Intl` comes with two useful APIs for building user interfaces: {{jsxref(\"Intl.supportedValuesOf()\")}} and {{jsxref(\"Intl.DisplayNames\")}}.\n\nThe {{jsxref(\"Intl.supportedValuesOf()\")}} function returns an array of supported values for a given option. For example, you can use it to populate a dropdown list of supported calendars, from which users can select to display dates.\n\n```js\nconst supportedCal = Intl.supportedValuesOf(\"calendar\");\nconsole.log(supportedCal);\n// ['buddhist', 'chinese', 'coptic', 'dangi', ...]\n```",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 66,
      "totalChunks": 74,
      "startLineNumber": 691,
      "endLineNumber": 701
    }
  },
  {
    "content": "```js\nconst supportedCal = Intl.supportedValuesOf(\"calendar\");\nconsole.log(supportedCal);\n// ['buddhist', 'chinese', 'coptic', 'dangi', ...]\n```\n\nBut often, these identifiers are not user-friendly. For example, you may want to show the calendars in the user's language, or unabbreviate them. The {{jsxref(\"Intl.DisplayNames\")}} object is useful for this. It's like a formatter, but it's not template-based. Instead, it is a direct mapping from language-agnostic identifiers to localized names. It supports formatting languages, regions, scripts (the three subfields of a BCP 47 tag), currency, calendar, and date-time fields.\n\nTry the demo below:\n\n```html live-sample___display_names\n<select id=\"lang\"></select>\n<select id=\"calendar\"></select>\n<output id=\"output\"></output>\n```\n\n```css hidden live-sample___display_names\noutput {\n  display: block;\n  margin: 1em;\n  font-size: x-large;\n}\n\nrt {\n  font-weight: bold;\n}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 67,
      "totalChunks": 74,
      "startLineNumber": 697,
      "endLineNumber": 722
    }
  },
  {
    "content": "```css hidden live-sample___display_names\noutput {\n  display: block;\n  margin: 1em;\n  font-size: x-large;\n}\n\nrt {\n  font-weight: bold;\n}\n\nruby {\n  border-bottom: 1px dotted;\n  ruby-position: under;\n  ruby-align: center;\n}\n```\n\n```js live-sample___display_names\nconst langSelect = document.getElementById(\"lang\");\nconst calSelect = document.getElementById(\"calendar\");\nconst fieldset = document.querySelector(\"fieldset\");\nconst output = document.getElementById(\"output\");\n\n// A few examples\nconst langs = [\n  \"en-US\",\n  \"zh-Hans-CN\",\n  \"ja-JP\",\n  \"ar-EG\",\n  \"ru-RU\",\n  \"es-ES\",\n  \"fr-FR\",\n  \"de-DE\",\n  \"hi-IN\",\n  \"pt-BR\",\n  \"bn-BD\",\n  \"he-IL\",\n];\nconst calendars = Intl.supportedValuesOf(\"calendar\");\n\nfor (const lang of langs) {\n  const option = document.createElement(\"option\");\n  option.value = lang;\n  option.textContent = new Intl.DisplayNames(lang, { type: \"language\" }).of(\n    lang,\n  );\n  langSelect.appendChild(option);\n}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 68,
      "totalChunks": 74,
      "startLineNumber": 713,
      "endLineNumber": 761
    }
  },
  {
    "content": "function renderCalSelect() {\n  const lang = langSelect.value;\n  calSelect.innerHTML = \"\";\n  const dn = new Intl.DisplayNames(lang, { type: \"calendar\" });\n  const preferredCalendars = new Intl.Locale(lang).getCalendars?.() ?? [\n    \"gregory\",\n  ];\n  for (const cal of [\n    ...preferredCalendars,\n    ...calendars.filter((c) => !preferredCalendars.includes(c)),\n  ]) {\n    const option = document.createElement(\"option\");\n    option.value = cal;\n    option.textContent = dn.of(cal);\n    calSelect.appendChild(option);\n  }\n}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 69,
      "totalChunks": 74,
      "startLineNumber": 763,
      "endLineNumber": 779
    }
  },
  {
    "content": "function renderFieldInputs() {\n  const lang = langSelect.value;\n  fieldset.querySelectorAll(\"label\").forEach((label) => label.remove());\n  const dn = new Intl.DisplayNames(lang, { type: \"dateTimeField\" });\n  for (const field of fields) {\n    const label = document.createElement(\"label\");\n    label.textContent = dn.of(field);\n    const input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.value = field;\n    label.appendChild(input);\n    fieldset.appendChild(label);\n  }\n}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 70,
      "totalChunks": 74,
      "startLineNumber": 781,
      "endLineNumber": 794
    }
  },
  {
    "content": "function renderTime() {\n  const lang = langSelect.value;\n  const cal = calSelect.value;\n  const df = new Intl.DateTimeFormat(lang, {\n    calendar: cal,\n    dateStyle: \"full\",\n    timeStyle: \"full\",\n  });\n  const now = new Date();\n  const dn = new Intl.DisplayNames(lang, { type: \"dateTimeField\" });\n  output.innerHTML = \"\";\n  for (const component of df.formatToParts(now)) {\n    const text = document.createElement(\"span\");\n    text.textContent = component.value;\n    if (\n      ![\n        \"era\",\n        \"year\",\n        \"quarter\",\n        \"month\",\n        \"weekOfYear\",\n        \"weekday\",\n        \"day\",\n        \"dayPeriod\",\n        \"hour\",\n        \"minute\",\n        \"second\",\n        \"timeZoneName\",\n      ].includes(component.type)\n    ) {\n      output.appendChild(text);\n      continue;\n    }\n    const title = dn.of(component.type);\n    const field = document.createElement(\"ruby\");\n    field.appendChild(text);\n    const rt = document.createElement(\"rt\");\n    rt.textContent = title;",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 71,
      "totalChunks": 74,
      "startLineNumber": 796,
      "endLineNumber": 833
    }
  },
  {
    "content": "}\n    const title = dn.of(component.type);\n    const field = document.createElement(\"ruby\");\n    field.appendChild(text);\n    const rt = document.createElement(\"rt\");\n    rt.textContent = title;\n    field.appendChild(rt);\n    output.appendChild(field);\n  }\n}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 72,
      "totalChunks": 74,
      "startLineNumber": 828,
      "endLineNumber": 837
    }
  },
  {
    "content": "renderCalSelect();\nrenderTime();\nlangSelect.addEventListener(\"change\", renderCalSelect);\nlangSelect.addEventListener(\"change\", renderTime);\ncalSelect.addEventListener(\"change\", renderTime);\nsetInterval(renderTime, 500);\n```\n\n{{EmbedLiveSample(\"display_names\", \"\", 300)}}\n\n{{PreviousNext(\"Web/JavaScript/Guide/Resource_management\", \"Web/JavaScript/Guide/Modules\")}}",
    "metadata": {
      "source": "internationalization/index.md",
      "documentSlug": "Web/JavaScript/Guide/Internationalization",
      "documentTitle": "Internationalization",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Display names",
      "chunkIndex": 73,
      "totalChunks": 74,
      "startLineNumber": 839,
      "endLineNumber": 849
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide\", \"Web/JavaScript/Guide/Grammar_and_types\")}}\n\nThis chapter introduces JavaScript and discusses some of its fundamental concepts.\n\n## What you should already know\n\nThis guide assumes you have the following basic background:\n\n- A general understanding of the Internet and the World Wide Web ([WWW](/en-US/docs/Glossary/World_Wide_Web)).\n- Good working knowledge of HyperText Markup Language ([HTML](/en-US/docs/Glossary/HTML)).\n- Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about [JavaScript](/en-US/docs/Web/JavaScript).",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 19,
      "startLineNumber": 8,
      "endLineNumber": 18
    }
  },
  {
    "content": "## Where to find JavaScript information\n\nThe JavaScript documentation on MDN includes the following:\n\n- [Dynamic scripting with JavaScript](/en-US/docs/Learn_web_development/Core/Scripting) provides structured JavaScript guides for beginners and introduces basic concepts of programming and the Internet.\n- [JavaScript Guide](/en-US/docs/Web/JavaScript/Guide) (this guide) provides an overview about the JavaScript language and its objects.\n- [JavaScript Reference](/en-US/docs/Web/JavaScript/Reference) provides detailed reference material for JavaScript.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Where to find JavaScript information",
      "chunkIndex": 1,
      "totalChunks": 19,
      "startLineNumber": 20,
      "endLineNumber": 26
    }
  },
  {
    "content": "## What is JavaScript?\n\nJavaScript is a cross-platform, object-oriented scripting language used to make webpages interactive (e.g., having complex animations, clickable buttons, popup menus, etc.). There are also more advanced server side versions of JavaScript such as Node.js, which allow you to add more functionality to a website than downloading files (such as realtime collaboration between multiple computers). Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.\n\nJavaScript contains a standard library of objects, such as `Array`, `Map`, and `Math`, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "What is JavaScript?",
      "chunkIndex": 2,
      "totalChunks": 19,
      "startLineNumber": 28,
      "endLineNumber": 32
    }
  },
  {
    "content": "- _Client-side JavaScript_ extends the core language by supplying objects to control a browser and its _Document Object Model_ (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.\n- _Server-side JavaScript_ extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.\n\nThis means that in the browser, JavaScript can change the way the webpage (DOM) looks. And, likewise, Node.js JavaScript on the server can respond to custom requests sent by code executed in the browser.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "What is JavaScript?",
      "chunkIndex": 3,
      "totalChunks": 19,
      "startLineNumber": 34,
      "endLineNumber": 37
    }
  },
  {
    "content": "## JavaScript and Java\n\nJavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.\n\nIn contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 4,
      "totalChunks": 19,
      "startLineNumber": 39,
      "endLineNumber": 43
    }
  },
  {
    "content": "JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.\n\nJava is a class-based programming language designed for fast execution and type safety. Type safety means, for instance, that you can't cast a Java integer into an object reference or access private memory by corrupting the Java bytecode. Java's class-based model means that programs consist exclusively of classes and their methods. Java's class inheritance and strong typing generally require tightly coupled object hierarchies. These requirements make Java programming more complex than JavaScript programming.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 5,
      "totalChunks": 19,
      "startLineNumber": 45,
      "endLineNumber": 47
    }
  },
  {
    "content": "In contrast, JavaScript descends in spirit from a line of smaller, dynamically typed languages such as HyperTalk and dBase. These scripting languages offer programming tools to a much wider audience because of their easier syntax, specialized built-in functionality, and minimal requirements for object creation.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 6,
      "totalChunks": 19,
      "startLineNumber": 49,
      "endLineNumber": 49
    }
  },
  {
    "content": "| JavaScript                                                                                                                                                                   | Java                                                                                                                                                                                     |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 7,
      "totalChunks": 19,
      "startLineNumber": 51,
      "endLineNumber": 52
    }
  },
  {
    "content": "| Object-oriented. No distinction between types of objects. Inheritance is through the prototype mechanism, and properties and methods can be added to any object dynamically. | Class-based. Objects are divided into classes and instances with all inheritance through the class hierarchy. Classes and instances cannot have properties or methods added dynamically. |\n| Variable data types are not declared (dynamic typing, loosely typed).                                                                                                        | Variable data types must be declared (static typing, strongly typed).                                                                                                                    |",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 8,
      "totalChunks": 19,
      "startLineNumber": 53,
      "endLineNumber": 54
    }
  },
  {
    "content": "| Cannot automatically write to hard disk.                                                                                                                                     | Can automatically write to hard disk.                                                                                                                                                    |",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and Java",
      "chunkIndex": 9,
      "totalChunks": 19,
      "startLineNumber": 55,
      "endLineNumber": 55
    }
  },
  {
    "content": "## JavaScript and the ECMAScript specification\n\nJavaScript is standardized at [Ecma International](https://ecma-international.org/) — the European association for standardizing information and communication systems (ECMA was formerly an acronym for the European Computer Manufacturers Association) to deliver a standardized, international programming language based on JavaScript. This standardized version of JavaScript, called ECMAScript, behaves the same way in all applications that support the standard. Companies can use the open standard language to develop their implementation of JavaScript. The ECMAScript standard is documented in the ECMA-262 specification.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and the ECMAScript specification",
      "chunkIndex": 10,
      "totalChunks": 19,
      "startLineNumber": 57,
      "endLineNumber": 59
    }
  },
  {
    "content": "The ECMA-262 standard is also approved by the [ISO](https://www.iso.org/home.html) (International Organization for Standardization) as ISO-16262. You can also find the specification on [the Ecma International website](https://ecma-international.org/publications-and-standards/standards/ecma-262/). The ECMAScript specification does not describe the Document Object Model (DOM), which is standardized by the [World Wide Web Consortium (W3C)](https://www.w3.org/) and/or [WHATWG (Web Hypertext Application Technology Working Group)](https://whatwg.org/). The DOM defines the way in which HTML document objects are exposed to your script. To get a better idea about the different technologies that are used when programming with JavaScript, consult the article [JavaScript technologies overview](/en-US/docs/Web/JavaScript/Reference/JavaScript_technologies_overview).",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript and the ECMAScript specification",
      "chunkIndex": 11,
      "totalChunks": 19,
      "startLineNumber": 61,
      "endLineNumber": 61
    }
  },
  {
    "content": "### JavaScript documentation versus the ECMAScript specification\n\nThe ECMAScript specification is a set of requirements for implementing ECMAScript. It is useful if you want to implement standards-compliant language features in your ECMAScript implementation or engine (such as SpiderMonkey in Firefox, or V8 in Chrome).\n\nThe ECMAScript document is _not_ intended to help script programmers. Use the JavaScript documentation for information when writing scripts.\n\nThe ECMAScript specification uses terminology and syntax that may be unfamiliar to a JavaScript programmer. Although the description of the language may differ in ECMAScript, the language itself remains the same. JavaScript supports all functionality outlined in the ECMAScript specification.\n\nThe JavaScript documentation describes aspects of the language that are appropriate for a JavaScript programmer.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript documentation versus the ECMAScript specification",
      "chunkIndex": 12,
      "totalChunks": 19,
      "startLineNumber": 63,
      "endLineNumber": 71
    }
  },
  {
    "content": "## Getting started with JavaScript\n\nTo get started with JavaScript, all you need is a modern web browser. Recent versions of [Firefox](https://www.firefox.com/en-US/), [Chrome](https://www.google.com/chrome/index.html), [Microsoft Edge](https://www.microsoft.com/en-us/edge), and [Safari](https://www.apple.com/safari/) all support the features discussed in this guide.\n\nA very useful tool for exploring JavaScript is the JavaScript Console (sometimes called the Web Console, or just the console): this is a tool which enables you to enter JavaScript and run it in the current page.\n\nThe screenshots here show the [Firefox Web Console](https://firefox-source-docs.mozilla.org/devtools-user/web_console/), but all modern browsers ship with a console that works in a similar way.",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Getting started with JavaScript",
      "chunkIndex": 13,
      "totalChunks": 19,
      "startLineNumber": 73,
      "endLineNumber": 79
    }
  },
  {
    "content": "### Opening the console\n\nThe exact instructions for opening the console vary from one browser to another:\n\n- [Opening the console in Firefox](https://firefox-source-docs.mozilla.org/devtools-user/web_console/#opening-the-web-console)\n- [Opening the console in Chrome](https://developer.chrome.com/docs/devtools/open)\n- [Opening the console in Microsoft Edge](https://learn.microsoft.com/en-us/microsoft-edge/devtools/console/)",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Opening the console",
      "chunkIndex": 14,
      "totalChunks": 19,
      "startLineNumber": 81,
      "endLineNumber": 87
    }
  },
  {
    "content": "### Entering and running JavaScript\n\nThe console appears at the bottom of the browser window. Along the bottom of the console is an input line that you can use to enter JavaScript, and the output appears in the panel above:\n\n![A browser window with the web console open at the bottom, containing two lines of input and output. Text can be entered below that.](2019-04-04_00-15-29.png)\n\nThe console works the exact same way as `eval`: the last expression entered is returned. For the sake of simplicity, it can be imagined that every time something is entered into the console, it is actually surrounded by `console.log` around `eval`, like so:\n\n```js\nconsole.log(eval(\"3 + 5\"));\n```",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Entering and running JavaScript",
      "chunkIndex": 15,
      "totalChunks": 19,
      "startLineNumber": 89,
      "endLineNumber": 99
    }
  },
  {
    "content": "### Multi-line input in the console\n\nBy default, if you press <kbd>Enter</kbd> (or <kbd>Return</kbd>, depending on your keyboard) after entering a line of code, then the string you typed is executed. To enter multi-line input:\n\n- If the string you typed was incomplete (for example, you typed `function foo() {`) then the console will treat <kbd>Enter</kbd> as a line break, and let you type another line.\n- If you hold down <kbd>Shift</kbd> while pressing <kbd>Enter</kbd>, then the console will treat this as a line break, and let you type another line.\n- In Firefox only, you can activate [multi-line input mode](https://firefox-source-docs.mozilla.org/devtools-user/web_console/the_command_line_interpreter/index.html#multi-line-mode), in which you can enter multiple lines in a mini-editor, then run the whole thing when you are ready.\n\nTo get started with writing JavaScript, open the console, copy the following code, and paste it in at the prompt:",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multi-line input in the console",
      "chunkIndex": 16,
      "totalChunks": 19,
      "startLineNumber": 101,
      "endLineNumber": 109
    }
  },
  {
    "content": "To get started with writing JavaScript, open the console, copy the following code, and paste it in at the prompt:\n\n```js\n(function () {\n  \"use strict\";\n  /* Start of your code */\n  function greetMe(yourName) {\n    alert(`Hello ${yourName}`);\n  }\n\n  greetMe(\"World\");\n  /* End of your code */\n})();\n```\n\nPress <kbd>Enter</kbd> to watch it unfold in your browser!",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multi-line input in the console",
      "chunkIndex": 17,
      "totalChunks": 19,
      "startLineNumber": 109,
      "endLineNumber": 124
    }
  },
  {
    "content": "## What's next\n\nIn the following pages, this guide introduces you to the JavaScript syntax and language features, so that you will be able to write more complex applications.\n\nBut for now, remember to always include the `(function(){\"use strict\";` before your code, and add `})();` to the end of your code. The [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) and [IIFE](/en-US/docs/Glossary/IIFE) articles explain what those do, but for now they can be thought of as doing the following:\n\n1. Prevent semantics in JavaScript that trip up beginners.\n2. Prevent code snippets executed in the console from interacting with one another (e.g., having something created in one console execution being used for a different console execution).\n\n{{PreviousNext(\"Web/JavaScript/Guide\", \"Web/JavaScript/Guide/Grammar_and_types\")}}",
    "metadata": {
      "source": "introduction/index.md",
      "documentSlug": "Web/JavaScript/Guide/Introduction",
      "documentTitle": "Introduction",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "What's next",
      "chunkIndex": 18,
      "totalChunks": 19,
      "startLineNumber": 126,
      "endLineNumber": 135
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Typed_arrays\", \"Web/JavaScript/Guide/Resource_management\")}}\n\nIterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of {{jsxref(\"Statements/for...of\", \"for...of\")}} loops.\n\nFor details, see also:\n\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n- {{jsxref(\"Statements/for...of\", \"for...of\")}}\n- {{jsxref(\"Statements/function*\", \"function*\")}} and {{jsxref(\"Generator\")}}\n- {{jsxref(\"Operators/yield\", \"yield\")}} and {{jsxref(\"Operators/yield*\", \"yield*\")}}",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 14,
      "startLineNumber": 8,
      "endLineNumber": 17
    }
  },
  {
    "content": "## Iterators\n\nIn JavaScript an **iterator** is an object which defines a sequence and potentially a return value upon its termination.\n\nSpecifically, an iterator is any object which implements the [Iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) by having a `next()` method that returns an object with two properties:\n\n- `value`\n  - : The next value in the iteration sequence.\n- `done`\n  - : This is `true` if the last value in the sequence has already been consumed. If `value` is present alongside `done`, it is the iterator's return value.\n\nOnce created, an iterator object can be iterated explicitly by repeatedly calling `next()`. Iterating over an iterator is said to consume the iterator, because it is generally only possible to do once. After a terminating value has been yielded additional calls to `next()` should continue to return `{done: true}`.",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterators",
      "chunkIndex": 1,
      "totalChunks": 14,
      "startLineNumber": 19,
      "endLineNumber": 30
    }
  },
  {
    "content": "The most common iterator in JavaScript is the Array iterator, which returns each value in the associated array in sequence.\n\nWhile it is easy to imagine that all iterators could be expressed as arrays, this is not true. Arrays must be allocated in their entirety, but iterators are consumed only as necessary. Because of this, iterators can express sequences of unlimited size, such as the range of integers between `0` and {{jsxref(\"Infinity\")}}.\n\nHere is an example which can do just that. It allows creation of a range iterator which defines a sequence of integers from `start` (inclusive) to `end` (exclusive) spaced `step` apart. Its final return value is the size of the sequence it created, tracked by the variable `iterationCount`.\n\n```js\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\n  let nextIndex = start;\n  let iterationCount = 0;",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterators",
      "chunkIndex": 2,
      "totalChunks": 14,
      "startLineNumber": 32,
      "endLineNumber": 41
    }
  },
  {
    "content": "```js\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\n  let nextIndex = start;\n  let iterationCount = 0;\n\n  const rangeIterator = {\n    next() {\n      let result;\n      if (nextIndex < end) {\n        result = { value: nextIndex, done: false };\n        nextIndex += step;\n        iterationCount++;\n        return result;\n      }\n      return { value: iterationCount, done: true };\n    },\n  };\n  return rangeIterator;\n}\n```\n\nUsing the iterator then looks like this:\n\n```js\nconst iter = makeRangeIterator(1, 10, 2);\n\nlet result = iter.next();\nwhile (!result.done) {\n  console.log(result.value); // 1 3 5 7 9\n  result = iter.next();\n}\n\nconsole.log(\"Iterated over sequence of size:\", result.value); // [5 numbers returned, that took interval in between: 0 to 10]\n```\n\n> [!NOTE]\n> It is not possible to know reflectively whether a particular object is an iterator. If you need to do this, use [Iterables](#iterables).",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterators",
      "chunkIndex": 3,
      "totalChunks": 14,
      "startLineNumber": 38,
      "endLineNumber": 74
    }
  },
  {
    "content": "## Generator functions\n\nWhile custom iterators are a useful tool, their creation requires careful programming due to the need to explicitly maintain their internal state. **Generator functions** provide a powerful alternative: they allow you to define an iterative algorithm by writing a single function whose execution is not continuous. Generator functions are written using the {{jsxref(\"Statements/function*\", \"function*\")}} syntax.\n\nWhen called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a **Generator**. When a value is consumed by calling the generator's `next` method, the Generator function executes until it encounters the `yield` keyword.\n\nThe function can be called as many times as desired, and returns a new Generator each time. Each Generator may only be iterated once.\n\nWe can now adapt the example from above. The behavior of this code is identical, but the implementation is much easier to write and read.",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Generator functions",
      "chunkIndex": 4,
      "totalChunks": 14,
      "startLineNumber": 76,
      "endLineNumber": 84
    }
  },
  {
    "content": "We can now adapt the example from above. The behavior of this code is identical, but the implementation is much easier to write and read.\n\n```js\nfunction* makeRangeIterator(start = 0, end = Infinity, step = 1) {\n  let iterationCount = 0;\n  for (let i = start; i < end; i += step) {\n    iterationCount++;\n    yield i;\n  }\n  return iterationCount;\n}\n```",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Generator functions",
      "chunkIndex": 5,
      "totalChunks": 14,
      "startLineNumber": 84,
      "endLineNumber": 95
    }
  },
  {
    "content": "## Iterables\n\nAn object is **iterable** if it defines its iteration behavior, such as what values are looped over in a {{jsxref(\"Statements/for...of\", \"for...of\")}} construct. Some built-in types, such as {{jsxref(\"Array\")}} or {{jsxref(\"Map\")}}, have a default iteration behavior, while other types (such as {{jsxref(\"Object\")}}) do not.\n\nIn order to be **iterable**, an object must implement the `[Symbol.iterator]()` method. This means that the object (or one of the objects up its [prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain)) must have a property with a {{jsxref(\"Symbol.iterator\")}} key.\n\nIt may be possible to iterate over an iterable more than once, or only once. It is up to the programmer to know which is the case.",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterables",
      "chunkIndex": 6,
      "totalChunks": 14,
      "startLineNumber": 97,
      "endLineNumber": 103
    }
  },
  {
    "content": "It may be possible to iterate over an iterable more than once, or only once. It is up to the programmer to know which is the case.\n\nIterables which can iterate only once (such as Generators) customarily return `this` from their `[Symbol.iterator]()` method, whereas iterables which can be iterated many times must return a new iterator on each invocation of `[Symbol.iterator]()`.\n\n```js\nfunction* makeIterator() {\n  yield 1;\n  yield 2;\n}\n\nconst iter = makeIterator();\n\nfor (const itItem of iter) {\n  console.log(itItem);\n}\n\nconsole.log(iter[Symbol.iterator]() === iter); // true\n\n// This example show us generator(iterator) is iterable object,\n// which has the [Symbol.iterator]() method return the `iter` (itself),\n// and consequently, the it object can iterate only _once_.\n\n// If we change the [Symbol.iterator]() method of `iter` to a function/generator\n// which returns a new iterator/generator object, `iter`\n// can iterate many times",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterables",
      "chunkIndex": 7,
      "totalChunks": 14,
      "startLineNumber": 103,
      "endLineNumber": 127
    }
  },
  {
    "content": "// If we change the [Symbol.iterator]() method of `iter` to a function/generator\n// which returns a new iterator/generator object, `iter`\n// can iterate many times\n\niter[Symbol.iterator] = function* () {\n  yield 2;\n  yield 1;\n};\n```",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Iterables",
      "chunkIndex": 8,
      "totalChunks": 14,
      "startLineNumber": 125,
      "endLineNumber": 133
    }
  },
  {
    "content": "### User-defined iterables\n\nYou can make your own iterables like this:\n\n```js\nconst myIterable = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n```\n\nUser-defined iterables can be used in `for...of` loops or the spread syntax as usual.\n\n```js\nfor (const value of myIterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\n[...myIterable]; // [1, 2, 3]\n```\n\n### Built-in iterables\n\n{{jsxref(\"String\")}}, {{jsxref(\"Array\")}}, {{jsxref(\"TypedArray\")}}, {{jsxref(\"Map\")}} and {{jsxref(\"Set\")}} are all built-in iterables, because their prototype objects all have a {{jsxref(\"Symbol.iterator\")}} method.",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "User-defined iterables",
      "chunkIndex": 9,
      "totalChunks": 14,
      "startLineNumber": 135,
      "endLineNumber": 164
    }
  },
  {
    "content": "### Syntaxes expecting iterables\n\nSome statements and expressions expect iterables. For example: the {{jsxref(\"Statements/for...of\", \"for...of\")}} loops, {{jsxref(\"Operators/Spread_syntax\", \"spread syntax\", \"\", 1)}}, {{jsxref(\"Operators/yield*\", \"yield*\")}}, and {{jsxref(\"Operators/Destructuring\", \"destructuring\", \"\", 1)}} syntax.\n\n```js\nfor (const value of [\"a\", \"b\", \"c\"]) {\n  console.log(value);\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\n[...\"abc\"];\n// [\"a\", \"b\", \"c\"]\n\nfunction* gen() {\n  yield* [\"a\", \"b\", \"c\"];\n}\n\ngen().next();\n// { value: \"a\", done: false }\n\n[a, b, c] = new Set([\"a\", \"b\", \"c\"]);\na;\n// \"a\"\n```",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Syntaxes expecting iterables",
      "chunkIndex": 10,
      "totalChunks": 14,
      "startLineNumber": 166,
      "endLineNumber": 191
    }
  },
  {
    "content": "## Advanced generators\n\nGenerators compute their `yield`ed values _on demand_, which allows them to efficiently represent sequences that are expensive to compute (or even infinite sequences, as demonstrated above).\n\nThe {{jsxref(\"Generator/next\", \"next()\")}} method also accepts a value, which can be used to modify the internal state of the generator. A value passed to `next()` will be received by `yield`.\n\n> [!NOTE]\n> A value passed to the _first_ invocation of `next()` is always ignored.\n\nHere is the fibonacci generator using `next(x)` to restart the sequence:\n\n```js\nfunction* fibonacci() {\n  let current = 0;\n  let next = 1;\n  while (true) {\n    const reset = yield current;\n    [current, next] = [next, next + current];\n    if (reset) {\n      current = 0;\n      next = 1;\n    }\n  }\n}",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced generators",
      "chunkIndex": 11,
      "totalChunks": 14,
      "startLineNumber": 193,
      "endLineNumber": 216
    }
  },
  {
    "content": "const sequence = fibonacci();\nconsole.log(sequence.next().value); // 0\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 2\nconsole.log(sequence.next().value); // 3\nconsole.log(sequence.next().value); // 5\nconsole.log(sequence.next().value); // 8\nconsole.log(sequence.next(true).value); // 0\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 1\nconsole.log(sequence.next().value); // 2\n```\n\nYou can force a generator to throw an exception by calling its {{jsxref(\"Generator/throw\", \"throw()\")}} method and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the `yield` that is currently suspended were instead a `throw value` statement.",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced generators",
      "chunkIndex": 12,
      "totalChunks": 14,
      "startLineNumber": 218,
      "endLineNumber": 232
    }
  },
  {
    "content": "If the exception is not caught from within the generator, it will propagate up through the call to `throw()`, and subsequent calls to `next()` will result in the `done` property being `true`.\n\nGenerators have a {{jsxref(\"Generator/return\", \"return()\")}} method that returns the given value and finishes the generator itself.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Typed_arrays\", \"Web/JavaScript/Guide/Resource_management\")}}",
    "metadata": {
      "source": "iterators_and_generators/index.md",
      "documentSlug": "Web/JavaScript/Guide/Iterators_and_generators",
      "documentTitle": "Iterators and generators",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced generators",
      "chunkIndex": 13,
      "totalChunks": 14,
      "startLineNumber": 234,
      "endLineNumber": 238
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Indexed_collections\", \"Web/JavaScript/Guide/Working_with_objects\")}}\n\nThis chapter introduces collections of data which are indexed by a key; `Map` and `Set` objects contain elements which are iterable in the order of insertion.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 14,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Maps\n\n### Map object\n\nA {{jsxref(\"Map\")}} object is a key/value map that can iterate its elements in insertion order.\n\nThe following code shows some basic operations with a `Map`. See also the {{jsxref(\"Map\")}} reference page for more examples and the complete API. You can use a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop to return an array of `[key, value]` for each iteration.\n\n```js\nconst sayings = new Map();\nsayings.set(\"dog\", \"woof\");\nsayings.set(\"cat\", \"meow\");\nsayings.set(\"elephant\", \"toot\");\nsayings.size; // 3\nsayings.get(\"dog\"); // woof\nsayings.get(\"fox\"); // undefined\nsayings.has(\"bird\"); // false\nsayings.delete(\"dog\");\nsayings.has(\"dog\"); // false\n\nfor (const [key, value] of sayings) {\n  console.log(`${key} goes ${value}`);\n}\n// \"cat goes meow\"\n// \"elephant goes toot\"\n\nsayings.clear();\nsayings.size; // 0\n```",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Maps",
      "chunkIndex": 1,
      "totalChunks": 14,
      "startLineNumber": 12,
      "endLineNumber": 40
    }
  },
  {
    "content": "### Object and Map compared\n\nTraditionally, {{jsxref(\"Object\", \"objects\", \"\", 1)}} have been used to map strings to values. Objects allow you to set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. `Map` objects, however, have a few more advantages that make them better maps.\n\n- The keys of an `Object` are [strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), whereas they can be of any value for a `Map`.\n- You can get the `size` of a `Map` easily, while you have to manually keep track of size for an `Object`.\n- The iteration of maps is in insertion order of the elements.\n- An `Object` has a prototype, so there are default keys in the map. (This can be bypassed using `map = Object.create(null)`.)\n\nThese three tips can help you to decide whether to use a `Map` or an `Object`:",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Object and Map compared",
      "chunkIndex": 2,
      "totalChunks": 14,
      "startLineNumber": 42,
      "endLineNumber": 51
    }
  },
  {
    "content": "These three tips can help you to decide whether to use a `Map` or an `Object`:\n\n- Use maps over objects when keys are unknown until run time, and when all keys are the same type and all values are the same type.\n- Use maps if there is a need to store primitive values as keys because object treats each key as a string whether it's a number value, boolean value or any other primitive value.\n- Use objects when there is logic that operates on individual elements.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Object and Map compared",
      "chunkIndex": 3,
      "totalChunks": 14,
      "startLineNumber": 51,
      "endLineNumber": 55
    }
  },
  {
    "content": "### WeakMap object",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMap object",
      "chunkIndex": 4,
      "totalChunks": 14,
      "startLineNumber": 57,
      "endLineNumber": 57
    }
  },
  {
    "content": "A {{jsxref(\"WeakMap\")}} is a collection of key/value pairs whose keys must be objects or [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), with values of any arbitrary [JavaScript type](/en-US/docs/Web/JavaScript/Guide/Data_structures), and which does not create strong references to its keys. That is, an object's presence as a key in a `WeakMap` does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any `WeakMap` become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a `WeakMap` key is symbol — more specifically, [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) — because non-registered symbols are guaranteed to be unique and cannot be re-created.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMap object",
      "chunkIndex": 5,
      "totalChunks": 14,
      "startLineNumber": 59,
      "endLineNumber": 59
    }
  },
  {
    "content": "The `WeakMap` API is essentially the same as the `Map` API. However, a `WeakMap` doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration. So there is no method to obtain a list of the keys in a `WeakMap`. If there were, the list would depend on the state of garbage collection, introducing non-determinism.\n\nFor more information and example code, see also \"Why WeakMap?\" on the {{jsxref(\"WeakMap\")}} reference page.\n\nOne use case of `WeakMap` objects is to store private data for an object, or to hide implementation details. In the following example, the private data and methods belong inside the object and are stored in the `privates` object, which is a `WeakMap`. Everything exposed on the instance and prototype is public; everything else is inaccessible from the outside world because `privates` is not exported from the module.\n\n```js\nconst privates = new WeakMap();",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMap object",
      "chunkIndex": 6,
      "totalChunks": 14,
      "startLineNumber": 61,
      "endLineNumber": 68
    }
  },
  {
    "content": "```js\nconst privates = new WeakMap();\n\nexport default function Public() {\n  const me = {\n    // Private data goes here\n  };\n  privates.set(this, me);\n}\n\nPublic.prototype.method = function () {\n  const me = privates.get(this);\n  // Do stuff with private data in `me`\n  // …\n};\n```\n\n> [!NOTE]\n> This use case can now be implemented with [classes and private fields](/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements).",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMap object",
      "chunkIndex": 7,
      "totalChunks": 14,
      "startLineNumber": 67,
      "endLineNumber": 85
    }
  },
  {
    "content": "## Sets\n\n### Set object\n\n{{jsxref(\"Set\")}} objects are collections of unique values. You can iterate its elements in insertion order. A value in a `Set` may only occur once; it is unique in the `Set`'s collection.\n\nThe following code shows some basic operations with a `Set`. See also the {{jsxref(\"Set\")}} reference page for more examples and the complete API.\n\n```js\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(\"some text\");\nmySet.add(\"foo\");\n\nmySet.has(1); // true\nmySet.delete(\"foo\");\nmySet.size; // 2\n\nfor (const item of mySet) {\n  console.log(item);\n}\n// 1\n// \"some text\"\n```",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Sets",
      "chunkIndex": 8,
      "totalChunks": 14,
      "startLineNumber": 87,
      "endLineNumber": 110
    }
  },
  {
    "content": "### Converting between Array and Set\n\nYou can create an {{jsxref(\"Array\")}} from a Set using {{jsxref(\"Array.from\")}} or the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). Also, the `Set` constructor accepts an `Array` to convert in the other direction.\n\n> [!NOTE]\n> `Set` objects store _unique values_—so any duplicate elements from an Array are deleted when converting!\n\n```js\nArray.from(mySet);\n[...mySet2];\n\nmySet2 = new Set([1, 2, 3, 4]);\n```",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Converting between Array and Set",
      "chunkIndex": 9,
      "totalChunks": 14,
      "startLineNumber": 112,
      "endLineNumber": 124
    }
  },
  {
    "content": "### Array and Set compared\n\nTraditionally, a set of elements has been stored in arrays in JavaScript in a lot of situations. The `Set` object, however, has some advantages:\n\n- Deleting Array elements by value (`arr.splice(arr.indexOf(val), 1)`) is very slow.\n- `Set` objects let you delete elements by their value. With an array, you would have to `splice` based on an element's index.\n- The value {{jsxref(\"NaN\")}} cannot be found with `indexOf` in an array.\n- `Set` objects store unique values. You don't have to manually keep track of duplicates.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Array and Set compared",
      "chunkIndex": 10,
      "totalChunks": 14,
      "startLineNumber": 126,
      "endLineNumber": 133
    }
  },
  {
    "content": "### WeakSet object\n\n{{jsxref(\"WeakSet\")}} objects are collections of garbage-collectable values, including objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). A value in the `WeakSet` may only occur once. It is unique in the `WeakSet`'s collection.\n\nThe main differences to the {{jsxref(\"Set\")}} object are:\n\n- In contrast to `Sets`, `WeakSets` are **collections of _objects or symbols only_**, and not of arbitrary values of any type.\n- The `WeakSet` is _weak_: References to objects in the collection are held weakly. If there is no other reference to an object stored in the `WeakSet`, they can be garbage collected. That also means that there is no list of current objects stored in the collection.\n- `WeakSets` are not enumerable.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakSet object",
      "chunkIndex": 11,
      "totalChunks": 14,
      "startLineNumber": 135,
      "endLineNumber": 143
    }
  },
  {
    "content": "The use cases of `WeakSet` objects are limited. They will not leak memory, so it can be safe to use DOM elements as a key and mark them for tracking purposes, for example.",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakSet object",
      "chunkIndex": 12,
      "totalChunks": 14,
      "startLineNumber": 145,
      "endLineNumber": 145
    }
  },
  {
    "content": "## Key and value equality of Map and Set\n\nBoth the key equality of `Map` objects and the value equality of `Set` objects are based on the [SameValueZero algorithm](/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness#same-value-zero_equality):\n\n- Equality works like the identity comparison operator `===`.\n- `-0` and `+0` are considered equal.\n- {{jsxref(\"NaN\")}} is considered equal to itself (contrary to `===`).\n\n{{PreviousNext(\"Web/JavaScript/Guide/Indexed_collections\", \"Web/JavaScript/Guide/Working_with_objects\")}}",
    "metadata": {
      "source": "keyed_collections/index.md",
      "documentSlug": "Web/JavaScript/Guide/Keyed_collections",
      "documentTitle": "Keyed collections",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Key and value equality of Map and Set",
      "chunkIndex": 13,
      "totalChunks": 14,
      "startLineNumber": 147,
      "endLineNumber": 155
    }
  },
  {
    "content": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with [object prototypes](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) and classes. It also supports functional programming since functions are [first-class](/en-US/docs/Glossary/First-class_Function) objects that can be easily created via expressions and passed around like any other object.\n\nThis page serves as a quick overview of various JavaScript language features, written for readers with background in other languages, such as C or Java.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 61,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Data types\n\nLet's start off by looking at the building blocks of any language: the types. JavaScript programs manipulate values, and those values all belong to a type. JavaScript offers seven _primitive types_:",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data types",
      "chunkIndex": 1,
      "totalChunks": 61,
      "startLineNumber": 12,
      "endLineNumber": 14
    }
  },
  {
    "content": "- [Number](/en-US/docs/Web/JavaScript/Guide/Data_structures#number_type): used for all number values (integer and floating point) except for _very_ big integers.\n- [BigInt](/en-US/docs/Web/JavaScript/Guide/Data_structures#bigint_type): used for arbitrarily large integers.\n- [String](/en-US/docs/Web/JavaScript/Guide/Data_structures#string_type): used to store text.\n- [Boolean](/en-US/docs/Web/JavaScript/Guide/Data_structures#boolean_type): `true` and `false` — usually used for conditional logic.\n- [Symbol](/en-US/docs/Web/JavaScript/Guide/Data_structures#symbol_type): used for creating unique identifiers that won't collide.\n- [Undefined](/en-US/docs/Web/JavaScript/Guide/Data_structures#undefined_type): indicating that a variable has not been assigned a value.\n- [Null](/en-US/docs/Web/JavaScript/Guide/Data_structures#null_type): indicating a deliberate non-value.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data types",
      "chunkIndex": 2,
      "totalChunks": 61,
      "startLineNumber": 16,
      "endLineNumber": 22
    }
  },
  {
    "content": "Everything else is known as an [Object](/en-US/docs/Web/JavaScript/Guide/Data_structures#objects). Common object types include:\n\n- {{jsxref(\"Function\")}}\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"RegExp\")}}\n- {{jsxref(\"Error\")}}\n\nFunctions aren't special data structures in JavaScript — they are just a special type of object that can be called.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data types",
      "chunkIndex": 3,
      "totalChunks": 61,
      "startLineNumber": 24,
      "endLineNumber": 32
    }
  },
  {
    "content": "### Numbers\n\nJavaScript has two built-in numeric types: Number and BigInt.\n\nThe Number type is a [IEEE 754 64-bit double-precision floating point value](https://en.wikipedia.org/wiki/Double_precision_floating-point_format), which means integers can be safely represented between [-(2<sup>53</sup> − 1)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) and [2<sup>53</sup> − 1](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) without loss of precision, and floating point numbers can be stored all the way up to [1.79 × 10<sup>308</sup>](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE). Within numbers, JavaScript does not distinguish between floating point numbers and integers.\n\n```js\nconsole.log(3 / 2); // 1.5, not 1\n```\n\nSo an _apparent integer_ is in fact _implicitly a float_. Because of IEEE 754 encoding, sometimes floating point arithmetic can be imprecise.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers",
      "chunkIndex": 4,
      "totalChunks": 61,
      "startLineNumber": 34,
      "endLineNumber": 44
    }
  },
  {
    "content": "```js\nconsole.log(3 / 2); // 1.5, not 1\n```\n\nSo an _apparent integer_ is in fact _implicitly a float_. Because of IEEE 754 encoding, sometimes floating point arithmetic can be imprecise.\n\n```js\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n```\n\nFor operations that expect integers, such as bitwise operations, the number will be converted to a 32-bit integer.\n\n[Number literals](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals) can also have prefixes to indicate the base (binary, octal, decimal, or hexadecimal), or an exponent suffix.\n\n```js\nconsole.log(0b111110111); // 503\nconsole.log(0o767); // 503\nconsole.log(0x1f7); // 503\nconsole.log(5.03e2); // 503\n```\n\nThe [BigInt](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type is an arbitrary length integer. Its behavior is similar to C's integer types (e.g., division truncates to zero), except it can grow indefinitely. BigInts are specified with a number literal and an `n` suffix.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers",
      "chunkIndex": 5,
      "totalChunks": 61,
      "startLineNumber": 40,
      "endLineNumber": 61
    }
  },
  {
    "content": "```js\nconsole.log(-3n / 2n); // -1n\n```\n\nThe standard [arithmetic operators](/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators) are supported, including addition, subtraction, remainder arithmetic, etc. BigInts and numbers cannot be mixed in arithmetic operations.\n\nThe {{jsxref(\"Math\")}} object provides standard mathematical functions and constants.\n\n```js\nMath.sin(3.5);\nconst circumference = 2 * Math.PI * r;\n```\n\nThere are three ways to convert a string to a number:\n\n- {{jsxref(\"parseInt()\")}}, which parses the string for an integer.\n- {{jsxref(\"parseFloat()\")}}, which parses the string for a floating-point number.\n- The [`Number()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function, which parses a string as if it's a number literal and supports many different number representations.\n\nYou can also use the [unary plus `+`](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) as a shorthand for `Number()`.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers",
      "chunkIndex": 6,
      "totalChunks": 61,
      "startLineNumber": 63,
      "endLineNumber": 82
    }
  },
  {
    "content": "You can also use the [unary plus `+`](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) as a shorthand for `Number()`.\n\nNumber values also include {{jsxref(\"NaN\")}} (short for \"Not a Number\") and {{jsxref(\"Infinity\")}}. Many \"invalid math\" operations will return `NaN` — for example, if attempting to parse a non-numeric string, or using [`Math.log()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log) on a negative value. Division by zero produces `Infinity` (positive or negative).\n\n`NaN` is contagious: if you provide it as an operand to any mathematical operation, the result will also be `NaN`. `NaN` is the only value in JavaScript that's not equal to itself (per IEEE 754 specification).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers",
      "chunkIndex": 7,
      "totalChunks": 61,
      "startLineNumber": 82,
      "endLineNumber": 86
    }
  },
  {
    "content": "### Strings\n\nStrings in JavaScript are sequences of Unicode characters. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are [UTF-16 encoded](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n```js\nconsole.log(\"Hello, world\");\nconsole.log(\"你好，世界！\"); // Nearly all Unicode characters can be written literally in string literals\n```\n\nStrings can be written with either single or double quotes — JavaScript does not have the distinction between characters and strings. If you want to represent a single character, you just use a string consisting of that single character.\n\n```js\nconsole.log(\"Hello\"[1] === \"e\"); // true\n```\n\nTo find the length of a string (in [code units](/en-US/docs/Glossary/Code_unit)), access its [`length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) property.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strings",
      "chunkIndex": 8,
      "totalChunks": 61,
      "startLineNumber": 88,
      "endLineNumber": 103
    }
  },
  {
    "content": "To find the length of a string (in [code units](/en-US/docs/Glossary/Code_unit)), access its [`length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) property.\n\nStrings have [utility methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#instance_methods) to manipulate the string and access information about the string. Because all primitives are immutable by design, these methods return new strings.\n\nThe `+` operator is overloaded for strings: when one of the operands is a string, it performs string concatenation instead of number addition. A special [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals) syntax allows you to write strings with embedded expressions more succinctly. Unlike Python's f-strings or C#'s interpolated strings, template literals use backticks (not single or double quotes).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strings",
      "chunkIndex": 9,
      "totalChunks": 61,
      "startLineNumber": 103,
      "endLineNumber": 107
    }
  },
  {
    "content": "```js\nconst age = 25;\nconsole.log(\"I am \" + age + \" years old.\"); // String concatenation\nconsole.log(`I am ${age} years old.`); // Template literal\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strings",
      "chunkIndex": 10,
      "totalChunks": 61,
      "startLineNumber": 109,
      "endLineNumber": 113
    }
  },
  {
    "content": "### Other types\n\nJavaScript distinguishes between [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null), which indicates a deliberate non-value (and is only accessible through the `null` keyword), and {{jsxref(\"undefined\")}}, which indicates absence of value. There are many ways to obtain `undefined`:\n\n- A [`return`](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement with no value (`return;`) implicitly returns `undefined`.\n- Accessing a nonexistent [object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) property (`obj.iDontExist`) returns `undefined`.\n- A variable declaration without initialization (`let x;`) will implicitly initialize the variable to `undefined`.\n\nJavaScript has a Boolean type, with possible values `true` and `false` — both of which are keywords. Any value can be converted to a boolean according to the following rules:",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other types",
      "chunkIndex": 11,
      "totalChunks": 61,
      "startLineNumber": 115,
      "endLineNumber": 123
    }
  },
  {
    "content": "JavaScript has a Boolean type, with possible values `true` and `false` — both of which are keywords. Any value can be converted to a boolean according to the following rules:\n\n1. `false`, `0`, empty strings (`\"\"`), `NaN`, `null`, and `undefined` all become `false`.\n2. All other values become `true`.\n\nYou can perform this conversion explicitly using the [`Boolean()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) function:\n\n```js\nBoolean(\"\"); // false\nBoolean(234); // true\n```\n\nHowever, this is rarely necessary, as JavaScript will silently perform this conversion when it expects a boolean, such as in an `if` statement (see [Control structures](#control_structures)). For this reason, we sometimes speak of \"[truthy](/en-US/docs/Glossary/Truthy)\" and \"[falsy](/en-US/docs/Glossary/Falsy)\", meaning values that become `true` and `false`, respectively, when used in boolean contexts.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other types",
      "chunkIndex": 12,
      "totalChunks": 61,
      "startLineNumber": 123,
      "endLineNumber": 135
    }
  },
  {
    "content": "Boolean operations such as `&&` (logical _and_), `||` (logical _or_), and `!` (logical _not_) are supported; see [Operators](#operators).\n\nThe Symbol type is often used to create unique identifiers. Every symbol created with the [`Symbol()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) function is guaranteed to be unique. In addition, there are registered symbols, which are shared constants, and well-known symbols, which are utilized by the language as \"protocols\" for certain operations. You can read more about them in the [symbol reference](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other types",
      "chunkIndex": 13,
      "totalChunks": 61,
      "startLineNumber": 137,
      "endLineNumber": 139
    }
  },
  {
    "content": "## Variables\n\nVariables in JavaScript are declared using one of three keywords: [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let), [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const), or [`var`](/en-US/docs/Web/JavaScript/Reference/Statements/var).\n\n`let` allows you to declare block-level variables. The declared variable is available from the _block_ it is enclosed in.\n\n```js\nlet a;\nlet name = \"Simon\";\n\n// myLetVariable is *not* visible out here\n\nfor (let myLetVariable = 0; myLetVariable < 5; myLetVariable++) {\n  // myLetVariable is only visible in here\n}\n\n// myLetVariable is *not* visible out here\n```\n\n`const` allows you to declare variables whose values are never intended to change. The variable is available from the _block_ it is declared in.\n\n```js\nconst Pi = 3.14; // Declare variable Pi\nconsole.log(Pi); // 3.14\n```\n\nA variable declared with `const` cannot be reassigned.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variables",
      "chunkIndex": 14,
      "totalChunks": 61,
      "startLineNumber": 141,
      "endLineNumber": 167
    }
  },
  {
    "content": "```js\nconst Pi = 3.14; // Declare variable Pi\nconsole.log(Pi); // 3.14\n```\n\nA variable declared with `const` cannot be reassigned.\n\n```js-nolint example-bad\nconst Pi = 3.14;\nPi = 1; // will throw an error because you cannot change a constant variable.\n```\n\n`const` declarations only prevent _reassignments_ — they don't prevent _mutations_ of the variable's value, if it's an object.\n\n```js\nconst obj = {};\nobj.a = 1; // no error\nconsole.log(obj); // { a: 1 }\n```\n\n`var` declarations can have surprising behaviors (for example, they are not block-scoped), and they are discouraged in modern JavaScript code.\n\nIf you declare a variable without assigning any value to it, its value is `undefined`. You can't declare a `const` variable without an initializer, because you can't change it later anyway.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variables",
      "chunkIndex": 15,
      "totalChunks": 61,
      "startLineNumber": 162,
      "endLineNumber": 184
    }
  },
  {
    "content": "If you declare a variable without assigning any value to it, its value is `undefined`. You can't declare a `const` variable without an initializer, because you can't change it later anyway.\n\n`let` and `const` declared variables still occupy the entire scope they are defined in, and are in a region known as the [temporal dead zone](/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) before the actual line of declaration. This has some interesting interactions with variable shadowing, which don't occur in other languages.\n\n```js\nfunction foo(x, condition) {\n  if (condition) {\n    console.log(x);\n    const x = 2;\n    console.log(x);\n  }\n}\n\nfoo(1, true);\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variables",
      "chunkIndex": 16,
      "totalChunks": 61,
      "startLineNumber": 184,
      "endLineNumber": 198
    }
  },
  {
    "content": "```js\nfunction foo(x, condition) {\n  if (condition) {\n    console.log(x);\n    const x = 2;\n    console.log(x);\n  }\n}\n\nfoo(1, true);\n```\n\nIn most other languages, this would log \"1\" and \"2\", because before the `const x = 2` line, `x` should still refer to the parameter `x` in the upper scope. In JavaScript, because each declaration occupies the entire scope, this would throw an error on the first `console.log`: \"Cannot access 'x' before initialization\". For more information, see the reference page of [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let).\n\nJavaScript is _dynamically typed_. Types (as described in [the previous section](#data_types)) are only associated with values, but not with variables. For `let`-declared variables, you can always change its type through reassignment.\n\n```js\nlet a = 1;\na = \"foo\";\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Variables",
      "chunkIndex": 17,
      "totalChunks": 61,
      "startLineNumber": 188,
      "endLineNumber": 207
    }
  },
  {
    "content": "## Operators\n\nJavaScript's numeric operators include `+`, `-`, `*`, `/`, `%` (remainder), and `**` (exponentiation). Values are assigned using `=`. Each binary operator also has a compound assignment counterpart such as `+=` and `-=`, which extend out to `x = x operator y`.\n\n```js\nx += 5;\nx = x + 5;\n```\n\nYou can use `++` and `--` to increment and decrement respectively. These can be used as a prefix or postfix operators.\n\nThe [`+` operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) also does string concatenation:\n\n```js\n\"hello\" + \" world\"; // \"hello world\"\n```\n\nIf you add a string to a number (or other value) everything is converted into a string first. This might trip you up:\n\n```js\n\"3\" + 4 + 5; // \"345\"\n3 + 4 + \"5\"; // \"75\"\n```\n\nAdding an empty string to something is a useful way of converting it to a string itself.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Operators",
      "chunkIndex": 18,
      "totalChunks": 61,
      "startLineNumber": 209,
      "endLineNumber": 233
    }
  },
  {
    "content": "```js\n\"3\" + 4 + 5; // \"345\"\n3 + 4 + \"5\"; // \"75\"\n```\n\nAdding an empty string to something is a useful way of converting it to a string itself.\n\n[Comparisons](/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators) in JavaScript can be made using `<`, `>`, `<=` and `>=`, which work for both strings and numbers. For equality, the [double-equals operator](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) performs type coercion if you give it different types, with sometimes interesting results. On the other hand, the [triple-equals operator](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) does not attempt type coercion, and is usually preferred.\n\n```js\n123 == \"123\"; // true\n1 == true; // true\n\n123 === \"123\"; // false\n1 === true; // false\n```\n\nThe double-equals and triple-equals also have their inequality counterparts: `!=` and `!==`.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Operators",
      "chunkIndex": 19,
      "totalChunks": 61,
      "startLineNumber": 228,
      "endLineNumber": 245
    }
  },
  {
    "content": "```js\n123 == \"123\"; // true\n1 == true; // true\n\n123 === \"123\"; // false\n1 === true; // false\n```\n\nThe double-equals and triple-equals also have their inequality counterparts: `!=` and `!==`.\n\nJavaScript also has [bitwise operators](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators) and [logical operators](/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators). Notably, logical operators don't work with boolean values only — they work by the \"truthiness\" of the value.\n\n```js\nconst a = 0 && \"Hello\"; // 0 because 0 is \"falsy\"\nconst b = \"Hello\" || \"world\"; // \"Hello\" because both \"Hello\" and \"world\" are \"truthy\"\n```\n\nThe `&&` and `||` operators use short-circuit logic, which means whether they will execute their second operand is dependent on the first. This is useful for checking for null objects before accessing their attributes:\n\n```js\nconst name = o && o.getName();\n```\n\nOr for caching values (when falsy values are invalid):",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Operators",
      "chunkIndex": 20,
      "totalChunks": 61,
      "startLineNumber": 237,
      "endLineNumber": 260
    }
  },
  {
    "content": "```js\nconst name = o && o.getName();\n```\n\nOr for caching values (when falsy values are invalid):\n\n```js\nconst name = cachedName || (cachedName = getName());\n```\n\nFor a comprehensive list of operators, see the [guide page](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators) or [reference section](/en-US/docs/Web/JavaScript/Reference/Operators). You may be especially interested in the [operator precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Operators",
      "chunkIndex": 21,
      "totalChunks": 61,
      "startLineNumber": 256,
      "endLineNumber": 266
    }
  },
  {
    "content": "## Grammar\n\nJavaScript grammar is very similar to the C family. There are a few points worth mentioning:\n\n- [Identifiers](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers) can have Unicode characters, but they cannot be one of the [reserved words](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords).\n- [Comments](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#comments) are commonly `//` or `/* */`, while many other scripting languages like Perl, Python, and Bash use `#`.\n- Semicolons are optional in JavaScript — the language [automatically inserts them](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion) when needed. However, there are certain caveats to watch out for, since unlike Python, semicolons are still part of the syntax.\n\nFor an in-depth look at the JavaScript grammar, see the [reference page for lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Grammar",
      "chunkIndex": 22,
      "totalChunks": 61,
      "startLineNumber": 268,
      "endLineNumber": 276
    }
  },
  {
    "content": "## Control structures\n\nJavaScript has a similar set of control structures to other languages in the C family. Conditional statements are supported by [`if` and `else`](/en-US/docs/Web/JavaScript/Reference/Statements/if...else); you can chain them together:\n\n```js\nlet name = \"kittens\";\nif (name === \"puppies\") {\n  name += \" woof\";\n} else if (name === \"kittens\") {\n  name += \" meow\";\n} else {\n  name += \"!\";\n}\nname === \"kittens meow\";\n```\n\nJavaScript doesn't have `elif`, and `else if` is really just an `else` branch comprised of a single `if` statement.\n\nJavaScript has [`while`](/en-US/docs/Web/JavaScript/Reference/Statements/while) loops and [`do...while`](/en-US/docs/Web/JavaScript/Reference/Statements/do...while) loops. The first is good for basic looping; the second is for loops where you wish to ensure that the body of the loop is executed at least once:\n\n```js\nwhile (true) {\n  // an infinite loop!\n}\n\nlet input;\ndo {\n  input = get_input();\n} while (inputIsNotValid(input));\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 23,
      "totalChunks": 61,
      "startLineNumber": 278,
      "endLineNumber": 307
    }
  },
  {
    "content": "```js\nwhile (true) {\n  // an infinite loop!\n}\n\nlet input;\ndo {\n  input = get_input();\n} while (inputIsNotValid(input));\n```\n\nJavaScript's [`for` loop](/en-US/docs/Web/JavaScript/Reference/Statements/for) is the same as that in C and Java: it lets you provide the control information for your loop on a single line.\n\n```js\nfor (let i = 0; i < 5; i++) {\n  // Will execute 5 times\n}\n```\n\nJavaScript also contains two other prominent for loops: [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of), which iterates over [iterables](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols), most notably arrays, and [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in), which visits all [enumerable](/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties) properties of an object.\n\n```js\nfor (const value of array) {\n  // do something with value\n}\n\nfor (const property in object) {\n  // do something with object property\n}\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 24,
      "totalChunks": 61,
      "startLineNumber": 298,
      "endLineNumber": 327
    }
  },
  {
    "content": "```js\nfor (const value of array) {\n  // do something with value\n}\n\nfor (const property in object) {\n  // do something with object property\n}\n```\n\nThe `switch` statement can be used for multiple branches based on equality checking.\n\n```js\nswitch (action) {\n  case \"draw\":\n    drawIt();\n    break;\n  case \"eat\":\n    eatIt();\n    break;\n  default:\n    doNothing();\n}\n```\n\nSimilar to C, case clauses are conceptually the same as [labels](/en-US/docs/Web/JavaScript/Reference/Statements/label), so if you don't add a `break` statement, execution will \"fall through\" to the next level. However, they are not actually jump tables — any expression can be part of the `case` clause, not just string or number literals, and they would be evaluated one-by-one until one equals the value being matched. Comparison takes place between the two using the `===` operator.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 25,
      "totalChunks": 61,
      "startLineNumber": 319,
      "endLineNumber": 344
    }
  },
  {
    "content": "Unlike some languages like Rust, control-flow structures are statements in JavaScript, meaning you can't assign them to a variable, like `const a = if (x) { 1 } else { 2 }`.\n\nJavaScript errors are handled using the [`try...catch`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) statement.\n\n```js\ntry {\n  buildMySite(\"./website\");\n} catch (e) {\n  console.error(\"Building site failed:\", e);\n}\n```\n\nErrors can be thrown using the [`throw`](/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement. Many built-in operations may throw as well.\n\n```js\nfunction buildMySite(siteDirectory) {\n  if (!pathExists(siteDirectory)) {\n    throw new Error(\"Site directory does not exist\");\n  }\n}\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 26,
      "totalChunks": 61,
      "startLineNumber": 346,
      "endLineNumber": 366
    }
  },
  {
    "content": "```js\nfunction buildMySite(siteDirectory) {\n  if (!pathExists(siteDirectory)) {\n    throw new Error(\"Site directory does not exist\");\n  }\n}\n```\n\nIn general, you can't tell the type of the error you just caught, because anything can be thrown from a `throw` statement. However, you can usually assume it's an [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance, as is the example above. There are some subclasses of `Error` built-in, like [`TypeError`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`RangeError`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError), that you can use to provide extra semantics about the error. There's no conditional catch in JavaScript — if you only want to handle one type of error, you need to catch everything, identify the type of error using [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), and then rethrow the other cases.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 27,
      "totalChunks": 61,
      "startLineNumber": 360,
      "endLineNumber": 368
    }
  },
  {
    "content": "```js\ntry {\n  buildMySite(\"./website\");\n} catch (e) {\n  if (e instanceof RangeError) {\n    console.error(\"Seems like a parameter is out of range:\", e);\n    console.log(\"Retrying...\");\n    buildMySite(\"./website\");\n  } else {\n    // Don't know how to handle other error types; throw them so\n    // something else up in the call stack may catch and handle it\n    throw e;\n  }\n}\n```\n\nIf an error is uncaught by any `try...catch` in the call stack, the program will exit.\n\nFor a comprehensive list of control flow statements, see the [reference section](/en-US/docs/Web/JavaScript/Reference/Statements).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Control structures",
      "chunkIndex": 28,
      "totalChunks": 61,
      "startLineNumber": 370,
      "endLineNumber": 388
    }
  },
  {
    "content": "## Objects\n\nJavaScript objects can be thought of as collections of key-value pairs. As such, they are similar to:\n\n- Dictionaries in Python.\n- Hashes in Perl and Ruby.\n- Hash tables in C and C++.\n- HashMaps in Java.\n- Associative arrays in PHP.\n\nJavaScript objects are hashes. Unlike objects in statically typed languages, objects in JavaScript do not have fixed shapes — properties can be added, deleted, re-ordered, mutated, or dynamically queried at any time. Object keys are always [strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) or [symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) — even array indices, which are canonically integers, are actually strings under the hood.\n\nObjects are usually created using the literal syntax:\n\n```js\nconst obj = {\n  name: \"Carrot\",\n  for: \"Max\",\n  details: {\n    color: \"orange\",\n    size: 12,\n  },\n};\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects",
      "chunkIndex": 29,
      "totalChunks": 61,
      "startLineNumber": 390,
      "endLineNumber": 413
    }
  },
  {
    "content": "Objects are usually created using the literal syntax:\n\n```js\nconst obj = {\n  name: \"Carrot\",\n  for: \"Max\",\n  details: {\n    color: \"orange\",\n    size: 12,\n  },\n};\n```\n\nObject properties can be [accessed](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) using dot (`.`) or square brackets (`[]`). When using the dot notation, the key must be a valid [identifier](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers). Square brackets, on the other hand, allow indexing the object with a dynamic key value.\n\n```js\n// Dot notation\nobj.name = \"Simon\";\nconst name = obj.name;\n\n// Bracket notation\nobj[\"name\"] = \"Simon\";\nconst name = obj[\"name\"];\n\n// Can use a variable to define a key\nconst userName = prompt(\"what is your key?\");\nobj[userName] = prompt(\"what is its value?\");\n```\n\nProperty access can be chained together:\n\n```js\nobj.details.color; // orange\nobj[\"details\"][\"size\"]; // 12\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects",
      "chunkIndex": 30,
      "totalChunks": 61,
      "startLineNumber": 402,
      "endLineNumber": 436
    }
  },
  {
    "content": "Property access can be chained together:\n\n```js\nobj.details.color; // orange\nobj[\"details\"][\"size\"]; // 12\n```\n\nObjects are always references, so unless something is explicitly copying the object, mutations to an object would be visible to the outside.\n\n```js\nconst obj = {};\nfunction doSomething(o) {\n  o.x = 1;\n}\ndoSomething(obj);\nconsole.log(obj.x); // 1\n```\n\nThis also means two separately created objects will never be equal (`!==`), because they are different references. If you hold two references of the same object, mutating one would be observable through the other.\n\n```js\nconst me = {};\nconst stillMe = me;\nme.x = 1;\nconsole.log(stillMe.x); // 1\n```\n\nFor more on objects and prototypes, see the [`Object` reference page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object). For more information on the object initializer syntax, see its [reference page](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects",
      "chunkIndex": 31,
      "totalChunks": 61,
      "startLineNumber": 431,
      "endLineNumber": 458
    }
  },
  {
    "content": "This page has omitted all details about object prototypes and inheritance because you can usually achieve inheritance with [classes](#classes) without touching the underlying mechanism (which you may have heard to be abstruse). To learn about them, see [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects",
      "chunkIndex": 32,
      "totalChunks": 61,
      "startLineNumber": 460,
      "endLineNumber": 460
    }
  },
  {
    "content": "## Arrays\n\nArrays in JavaScript are actually a special type of object. They work very much like regular objects (numerical properties can naturally be accessed only using `[]` syntax) but they have one magic property called `length`. This is always one more than the highest index in the array.\n\nArrays are usually created with array literals:\n\n```js\nconst a = [\"dog\", \"cat\", \"hen\"];\na.length; // 3\n```\n\nJavaScript arrays are still objects — you can assign any properties to them, including arbitrary number indices. The only \"magic\" is that `length` will be automatically updated when you set a particular index.\n\n```js\nconst a = [\"dog\", \"cat\", \"hen\"];\na[100] = \"fox\";\nconsole.log(a.length); // 101\nconsole.log(a); // ['dog', 'cat', 'hen', empty × 97, 'fox']\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arrays",
      "chunkIndex": 33,
      "totalChunks": 61,
      "startLineNumber": 462,
      "endLineNumber": 480
    }
  },
  {
    "content": "```js\nconst a = [\"dog\", \"cat\", \"hen\"];\na[100] = \"fox\";\nconsole.log(a.length); // 101\nconsole.log(a); // ['dog', 'cat', 'hen', empty × 97, 'fox']\n```\n\nThe array we got above is called a [_sparse array_](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) because there are uninhabited slots in the middle, and will cause the engine to deoptimize it from an array to a hash table. Make sure your array is densely populated!\n\nOut-of-bounds indexing doesn't throw. If you query a non-existent array index, you'll get a value of `undefined` in return:\n\n```js\nconst a = [\"dog\", \"cat\", \"hen\"];\nconsole.log(typeof a[90]); // undefined\n```\n\nArrays can have any elements and can grow or shrink arbitrarily.\n\n```js\nconst arr = [1, \"foo\", true];\narr.push({});\n// arr = [1, \"foo\", true, {}]\n```\n\nArrays can be iterated with the `for` loop, as you can in other C-like languages:\n\n```js\nfor (let i = 0; i < a.length; i++) {\n  // Do something with a[i]\n}\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arrays",
      "chunkIndex": 34,
      "totalChunks": 61,
      "startLineNumber": 475,
      "endLineNumber": 505
    }
  },
  {
    "content": "Arrays can be iterated with the `for` loop, as you can in other C-like languages:\n\n```js\nfor (let i = 0; i < a.length; i++) {\n  // Do something with a[i]\n}\n```\n\nOr, since arrays are iterable, you can use the [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop, which is synonymous to C++/Java's `for (int x : arr)` syntax:\n\n```js\nfor (const currentValue of a) {\n  // Do something with currentValue\n}\n```\n\nArrays come with a plethora of [array methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). Many of them would iterate the array — for example, [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) would apply a callback to every array element, and return a new array:\n\n```js\nconst babies = [\"dog\", \"cat\", \"hen\"].map((name) => `baby ${name}`);\n// babies = ['baby dog', 'baby cat', 'baby hen']\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arrays",
      "chunkIndex": 35,
      "totalChunks": 61,
      "startLineNumber": 499,
      "endLineNumber": 520
    }
  },
  {
    "content": "## Functions\n\nAlong with objects, functions are the core component in understanding JavaScript. The most basic function declaration looks like this:\n\n```js\nfunction add(x, y) {\n  const total = x + y;\n  return total;\n}\n```\n\nA JavaScript function can take 0 or more parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The [`return`](/en-US/docs/Web/JavaScript/Reference/Statements/return) statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns `undefined`.\n\nFunctions can be called with more or fewer parameters than it specifies. If you call a function without passing the parameters it expects, they will be set to `undefined`. If you pass more parameters than it expects, the function will ignore the extra parameters.\n\n```js\nadd(); // NaN\n// Equivalent to add(undefined, undefined)",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions",
      "chunkIndex": 36,
      "totalChunks": 61,
      "startLineNumber": 522,
      "endLineNumber": 539
    }
  },
  {
    "content": "```js\nadd(); // NaN\n// Equivalent to add(undefined, undefined)\n\nadd(2, 3, 4); // 5\n// added the first two; 4 was ignored\n```\n\nThere are a number of other parameter syntaxes available. For example, the [rest parameter syntax](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) allows collecting all the extra parameters passed by the caller into an array, similar to Python's `*args`. (Since JS doesn't have named parameters on the language level, there's no `**kwargs`.)\n\n```js\nfunction avg(...args) {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n}\n\navg(2, 3, 4, 5); // 3.5\n```\n\nIn the above code, the variable `args` holds all the values that were passed into the function.\n\nThe rest parameter will store all arguments _after_ where it's declared, but not before. In other words, `function avg(firstValue, ...args)` will store the first value passed into the function in the `firstValue` variable and the remaining arguments in `args`.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions",
      "chunkIndex": 37,
      "totalChunks": 61,
      "startLineNumber": 537,
      "endLineNumber": 561
    }
  },
  {
    "content": "If a function accepts a list of arguments and you already hold them in an array, you can use the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) in the function call to _spread_ the array as a list of elements. For instance: `avg(...numbers)`.\n\nWe mentioned that JavaScript doesn't have named parameters. It's possible, though, to implement them using [object destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring), which allows objects to be conveniently packed and unpacked.\n\n```js\n// Note the { } braces: this is destructuring an object\nfunction area({ width, height }) {\n  return width * height;\n}\n\n// The { } braces here create a new object\nconsole.log(area({ width: 2, height: 3 }));\n```\n\nThere's also the [_default parameter_](/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters) syntax, which allows omitted parameters (or those passed as `undefined`) to have a default value.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions",
      "chunkIndex": 38,
      "totalChunks": 61,
      "startLineNumber": 563,
      "endLineNumber": 577
    }
  },
  {
    "content": "```js\nfunction avg(firstValue, secondValue, thirdValue = 0) {\n  return (firstValue + secondValue + thirdValue) / 3;\n}\n\navg(1, 2); // 1, instead of NaN\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions",
      "chunkIndex": 39,
      "totalChunks": 61,
      "startLineNumber": 579,
      "endLineNumber": 585
    }
  },
  {
    "content": "### Anonymous functions\n\nJavaScript lets you create anonymous functions — that is, functions without names. In practice, anonymous functions are typically used as arguments to other functions, immediately assigned to a variable that can be used to invoke the function, or returned from another function.\n\n```js\n// Note that there's no function name before the parentheses\nconst avg = function (...args) {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n};\n```\n\nThat makes the anonymous function invocable by calling `avg()` with some arguments — that is, it's semantically equivalent to declaring the function using the `function avg() {}` declaration syntax.\n\nThere's another way to define anonymous functions — using an [arrow function expression](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Anonymous functions",
      "chunkIndex": 40,
      "totalChunks": 61,
      "startLineNumber": 587,
      "endLineNumber": 604
    }
  },
  {
    "content": "There's another way to define anonymous functions — using an [arrow function expression](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\n```js\n// Note that there's no function name before the parentheses\nconst avg = (...args) => {\n  let sum = 0;\n  for (const item of args) {\n    sum += item;\n  }\n  return sum / args.length;\n};\n\n// You can omit the `return` when simply returning an expression\nconst sum = (a, b, c) => a + b + c;\n```\n\nArrow functions are not semantically equivalent to function expressions — for more information, see its [reference page](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nThere's another way that anonymous functions can be useful: it can be simultaneously declared and invoked in a single expression, called an [Immediately invoked function expression (IIFE)](/en-US/docs/Glossary/IIFE):\n\n```js\n(function () {\n  // …\n})();\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Anonymous functions",
      "chunkIndex": 41,
      "totalChunks": 61,
      "startLineNumber": 604,
      "endLineNumber": 628
    }
  },
  {
    "content": "```js\n(function () {\n  // …\n})();\n```\n\nFor use-cases of IIFEs, you can read [emulating private methods with closures](/en-US/docs/Web/JavaScript/Guide/Closures#emulating_private_methods_with_closures).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Anonymous functions",
      "chunkIndex": 42,
      "totalChunks": 61,
      "startLineNumber": 624,
      "endLineNumber": 630
    }
  },
  {
    "content": "### Recursive functions\n\nJavaScript allows you to call functions recursively. This is particularly useful for dealing with tree structures, such as those found in the browser DOM.\n\n```js\nfunction countChars(elm) {\n  if (elm.nodeType === 3) {\n    // TEXT_NODE\n    return elm.nodeValue.length;\n  }\n  let count = 0;\n  for (let i = 0, child; (child = elm.childNodes[i]); i++) {\n    count += countChars(child);\n  }\n  return count;\n}\n```\n\nFunction expressions can be named as well, which allows them to be recursive.\n\n```js\nconst charsInBody = (function counter(elm) {\n  if (elm.nodeType === 3) {\n    // TEXT_NODE\n    return elm.nodeValue.length;\n  }\n  let count = 0;\n  for (let i = 0, child; (child = elm.childNodes[i]); i++) {\n    count += counter(child);\n  }\n  return count;\n})(document.body);\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Recursive functions",
      "chunkIndex": 43,
      "totalChunks": 61,
      "startLineNumber": 632,
      "endLineNumber": 664
    }
  },
  {
    "content": "The name provided to a function expression as above is only available to the function's own scope. This allows more optimizations to be done by the engine and results in more readable code. The name also shows up in the debugger and some stack traces, which can save you time when debugging.\n\nIf you are used to functional programming, beware of the performance implications of recursion in JavaScript. Although the language specification specifies [tail-call optimization](https://en.wikipedia.org/wiki/Tail_call), only JavaScriptCore (used by Safari) has implemented it, due to the difficulty of recovering stack traces and debuggability. For deep recursion, consider using iteration instead to avoid stack overflow.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Recursive functions",
      "chunkIndex": 44,
      "totalChunks": 61,
      "startLineNumber": 666,
      "endLineNumber": 668
    }
  },
  {
    "content": "### Functions are first-class objects\n\nJavaScript functions are first-class objects. This means that they can be assigned to variables, passed as arguments to other functions, and returned from other functions. In addition, JavaScript supports [closures](/en-US/docs/Web/JavaScript/Guide/Closures) out-of-the-box without explicit capturing, allowing you to conveniently apply functional programming styles.\n\n```js\n// Function returning function\nconst add = (x) => (y) => x + y;\n// Function accepting function\nconst babies = [\"dog\", \"cat\", \"hen\"].map((name) => `baby ${name}`);\n```\n\nNote that JavaScript functions are themselves objects — like everything else in JavaScript — and you can add or change properties on them just like we've seen earlier in the Objects section.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Functions are first-class objects",
      "chunkIndex": 45,
      "totalChunks": 61,
      "startLineNumber": 670,
      "endLineNumber": 681
    }
  },
  {
    "content": "### Inner functions\n\nJavaScript function declarations are allowed inside other functions. An important detail of nested functions in JavaScript is that they can access variables in their parent function's scope:\n\n```js\nfunction parentFunc() {\n  const a = 1;\n\n  function nestedFunc() {\n    const b = 4; // parentFunc can't use this\n    return a + b;\n  }\n  return nestedFunc(); // 5\n}\n```\n\nThis provides a great deal of utility in writing more maintainable code. If a called function relies on one or two other functions that are not useful to any other part of your code, you can nest those utility functions inside it. This keeps the number of functions that are in the global scope down.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inner functions",
      "chunkIndex": 46,
      "totalChunks": 61,
      "startLineNumber": 683,
      "endLineNumber": 699
    }
  },
  {
    "content": "This is also a great counter to the lure of global variables. When writing complex code, it is often tempting to use global variables to share values between multiple functions, which leads to code that is hard to maintain. Nested functions can share variables in their parent, so you can use that mechanism to couple functions together without polluting your global namespace.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inner functions",
      "chunkIndex": 47,
      "totalChunks": 61,
      "startLineNumber": 701,
      "endLineNumber": 701
    }
  },
  {
    "content": "## Classes\n\nJavaScript offers the [class](/en-US/docs/Web/JavaScript/Reference/Classes) syntax that's very similar to languages like Java.\n\n```js\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n  sayHello() {\n    return `Hello, I'm ${this.name}!`;\n  }\n}\n\nconst p = new Person(\"Maria\");\nconsole.log(p.sayHello());\n```\n\nJavaScript classes are just functions that must be instantiated with the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. Every time a class is instantiated, it returns an object containing the methods and properties that the class specified. Classes don't enforce any code organization — for example, you can have functions returning classes, or you can have multiple classes per file. Here's an example of how ad hoc the creation of a class can be: it's just an expression returned from an arrow function. This pattern is called a [mixin](/en-US/docs/Web/JavaScript/Reference/Classes/extends#mix-ins).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Classes",
      "chunkIndex": 48,
      "totalChunks": 61,
      "startLineNumber": 703,
      "endLineNumber": 721
    }
  },
  {
    "content": "```js\nconst withAuthentication = (cls) =>\n  class extends cls {\n    authenticate() {\n      // …\n    }\n  };\n\nclass Admin extends withAuthentication(Person) {\n  // …\n}\n```\n\nStatic properties are created by prepending `static`. Private fields and methods are created by prepending a hash `#` (not `private`). The hash is an integral part of the element's name, and distinguishes it from a regular string-keyed property. (Think about `#` as `_` in Python.) Unlike most other languages, there's absolutely no way to read a private element outside the class body — not even in derived classes.\n\nFor a detailed guide on various class features, you can read the [guide page](/en-US/docs/Web/JavaScript/Guide/Using_classes).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Classes",
      "chunkIndex": 49,
      "totalChunks": 61,
      "startLineNumber": 723,
      "endLineNumber": 738
    }
  },
  {
    "content": "## Asynchronous programming\n\nJavaScript is single-threaded by nature. There's no [paralleling](https://en.wikipedia.org/wiki/Parallel_computing); only [concurrency](https://en.wikipedia.org/wiki/Concurrent_computing). Asynchronous programming is powered by an [event loop](/en-US/docs/Web/JavaScript/Reference/Execution_model), which allows a set of tasks to be queued and polled for completion.\n\nThere are three idiomatic ways to write asynchronous code in JavaScript:\n\n- Callback-based (such as {{domxref(\"Window.setTimeout\", \"setTimeout()\")}})\n- {{jsxref(\"Global_Objects/Promise\", \"Promise\")}}-based\n- {{jsxref(\"Statements/async_function\", \"async\")}}/{{jsxref(\"Operators/await\", \"await\")}}, which is a syntactic sugar for Promises\n\nFor example, here's what a file-read operation might look like in JavaScript:",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Asynchronous programming",
      "chunkIndex": 50,
      "totalChunks": 61,
      "startLineNumber": 740,
      "endLineNumber": 750
    }
  },
  {
    "content": "For example, here's what a file-read operation might look like in JavaScript:\n\n```js\n// Callback-based\nfs.readFile(filename, (err, content) => {\n  // This callback is invoked when the file is read, which could be after a while\n  if (err) {\n    throw err;\n  }\n  console.log(content);\n});\n// Code here will be executed while the file is waiting to be read\n\n// Promise-based\nfs.readFile(filename)\n  .then((content) => {\n    // What to do when the file is read\n    console.log(content);\n  })\n  .catch((err) => {\n    throw err;\n  });\n// Code here will be executed while the file is waiting to be read\n\n// Async/await\nasync function readFile(filename) {\n  const content = await fs.readFile(filename);\n  console.log(content);\n}\n```",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Asynchronous programming",
      "chunkIndex": 51,
      "totalChunks": 61,
      "startLineNumber": 750,
      "endLineNumber": 779
    }
  },
  {
    "content": "// Async/await\nasync function readFile(filename) {\n  const content = await fs.readFile(filename);\n  console.log(content);\n}\n```\n\nThe core language doesn't specify any asynchronous programming features, but it's crucial when interacting with the external environment — from [asking user permissions](/en-US/docs/Web/API/Permissions_API), to [fetching data](/en-US/docs/Web/API/Fetch_API/Using_Fetch), to [reading files](https://nodejs.org/api/fs.html). Keeping the potentially long-running operations async ensures that other processes can still run while this one waits — for example, the browser will not freeze while waiting for the user to click a button to grant permission.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Asynchronous programming",
      "chunkIndex": 52,
      "totalChunks": 61,
      "startLineNumber": 774,
      "endLineNumber": 781
    }
  },
  {
    "content": "If you have an async value, it's not possible to get its value synchronously. For example, if you have a promise, you can only access the eventual result via the [`then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method. Similarly, {{jsxref(\"Operators/await\", \"await\")}} can only be used in an async context, which is usually an async function or a module. Promises are _never blocking_ — only the logic depending on the promise's result will be deferred; everything else continues to execute in the meantime. If you are a functional programmer, you may recognize promises as [monads](<https://en.wikipedia.org/wiki/Monad_(functional_programming)>) which can be mapped with `then()` (however, they are not _proper_ monads because they auto-flatten; i.e., you can't have a `Promise<Promise<T>>`).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Asynchronous programming",
      "chunkIndex": 53,
      "totalChunks": 61,
      "startLineNumber": 783,
      "endLineNumber": 783
    }
  },
  {
    "content": "In fact, the single-threaded model has made Node.js a popular choice for server-side programming due to its non-blocking IO, making handling a large number of database or file-system requests very performant. However, CPU-bound (computationally intensive) tasks that are pure JavaScript will still block the main thread. To achieve real paralleling, you may need to use [workers](/en-US/docs/Web/API/Web_Workers_API/Using_web_workers).\n\nTo learn more about asynchronous programming, you can read about [using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) or follow the [asynchronous JavaScript](/en-US/docs/Learn_web_development/Extensions/Async_JS) tutorial.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Asynchronous programming",
      "chunkIndex": 54,
      "totalChunks": 61,
      "startLineNumber": 785,
      "endLineNumber": 787
    }
  },
  {
    "content": "## Modules\n\nJavaScript also specifies a module system supported by most runtimes. A module is usually a file, identified by its file path or URL. You can use the {{jsxref(\"Statements/import\", \"import\")}} and {{jsxref(\"Statements/export\", \"export\")}} statements to exchange data between modules:\n\n```js\nimport { foo } from \"./foo.js\";\n\n// Unexported variables are local to the module\nconst b = 2;\n\nexport const a = 1;\n```\n\nUnlike Haskell, Python, Java, etc., JavaScript module resolution is entirely host-defined — it's usually based on URLs or file paths, so relative file paths \"just work\" and are relative to the current module's path instead of some project root path.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Modules",
      "chunkIndex": 55,
      "totalChunks": 61,
      "startLineNumber": 789,
      "endLineNumber": 802
    }
  },
  {
    "content": "However, the JavaScript language doesn't offer standard library modules — all core functionalities are powered by global variables like [`Math`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) and [`Intl`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) instead. This is due to the long history of JavaScript lacking a module system, and the fact that opting into the module system involves some changes to the runtime setup.\n\nDifferent runtimes may use different module systems. For example, [Node.js](https://nodejs.org/en/) uses the package manager [npm](https://www.npmjs.com/) and is mostly file-system based, while [Deno](https://deno.com/) and browsers are fully URL-based and modules can be resolved from HTTP URLs.\n\nFor more information, see the [modules guide page](/en-US/docs/Web/JavaScript/Guide/Modules).",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Modules",
      "chunkIndex": 56,
      "totalChunks": 61,
      "startLineNumber": 804,
      "endLineNumber": 808
    }
  },
  {
    "content": "## Language and runtime\n\nThroughout this page, we've constantly mentioned that certain features are _language-level_ while others are _runtime-level_.\n\nJavaScript is a general-purpose scripting language. The [core language specification](/en-US/docs/Web/JavaScript/Reference/JavaScript_technologies_overview#javascript_the_core_language_ecmascript) focuses on pure computational logic. It doesn't deal with any input/output — in fact, without extra runtime-level APIs (most notably [`console.log()`](/en-US/docs/Web/API/console/log_static)), a JavaScript program's behavior is entirely unobservable.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Language and runtime",
      "chunkIndex": 57,
      "totalChunks": 61,
      "startLineNumber": 810,
      "endLineNumber": 814
    }
  },
  {
    "content": "A runtime, or a host, is something that feeds data to the JavaScript engine (the interpreter), provides extra global properties, and provides hooks for the engine to interact with the outside world. Module resolution, reading data, printing messages, sending network requests, etc. are all runtime-level operations. Since its inception, JavaScript has been adopted in various environments, such as browsers (which provide APIs like [DOM](/en-US/docs/Web/API/Document_Object_Model)), Node.js (which provides APIs like [file system access](https://nodejs.org/api/fs.html)), etc. JavaScript has been successfully integrated in web (which was its primary purpose), mobile apps, desktop apps, server-side apps, serverless, embedded systems, and more. While you learn about JavaScript core features, it's also important to understand host-provided features in order to put the knowledge to use. For example, you can read about all [web platform APIs](/en-US/docs/Web/API), which are implemented by",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Language and runtime",
      "chunkIndex": 58,
      "totalChunks": 61,
      "startLineNumber": 816,
      "endLineNumber": 816
    }
  },
  {
    "content": "it's also important to understand host-provided features in order to put the knowledge to use. For example, you can read about all [web platform APIs](/en-US/docs/Web/API), which are implemented by browsers, and sometimes non-browsers.",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Language and runtime",
      "chunkIndex": 59,
      "totalChunks": 61,
      "startLineNumber": 816,
      "endLineNumber": 816
    }
  },
  {
    "content": "## Further exploration\n\nThis page offers a very basic insight into how various JavaScript features compare with other languages. If you want to learn more about the language itself and the nuances of each feature, you can read the [JavaScript guide](/en-US/docs/Web/JavaScript/Guide) and the [JavaScript reference](/en-US/docs/Web/JavaScript/Reference).\n\nThere are some essential parts of the language that we have omitted due to space and complexity, but you can explore on your own:\n\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain)\n- [Closures](/en-US/docs/Web/JavaScript/Guide/Closures)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions)\n- [Iteration](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators)",
    "metadata": {
      "source": "language_overview/index.md",
      "documentSlug": "Web/JavaScript/Guide/Language_overview",
      "documentTitle": "JavaScript language overview",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Further exploration",
      "chunkIndex": 60,
      "totalChunks": 61,
      "startLineNumber": 818,
      "endLineNumber": 827
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Control_flow_and_error_handling\", \"Web/JavaScript/Guide/Functions\")}}\n\nLoops offer a quick and easy way to do something repeatedly. This\nchapter of the [JavaScript Guide](/en-US/docs/Web/JavaScript/Guide)\nintroduces the different iteration statements available to JavaScript.\n\nYou can think of a loop as a computerized version of the game where you tell someone to\ntake _X_ steps in one direction, then _Y_ steps in another. For example,\nthe idea \"Go five steps to the east\" could be expressed this way as a loop:\n\n```js\nfor (let step = 0; step < 5; step++) {\n  // Runs 5 times, with values of step 0 through 4.\n  console.log(\"Walking east one step\");\n}\n```\n\nThere are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 19,
      "startLineNumber": 8,
      "endLineNumber": 27
    }
  },
  {
    "content": "There are many different kinds of loops, but they all essentially do the same thing:\nthey repeat an action some number of times. (Note that it's possible that number could\nbe zero!)\n\nThe various loop mechanisms offer different ways to determine the start and end points\nof the loop. There are various situations that are more easily served by one type of\nloop over the others.\n\nThe statements for loops provided in JavaScript are:\n\n- [for statement](#for_statement)\n- [do...while statement](#do...while_statement)\n- [while statement](#while_statement)\n- [labeled statement](#labeled_statement)\n- [break statement](#break_statement)\n- [continue statement](#continue_statement)\n- [for...in statement](#for...in_statement)\n- [for...of statement](#for...of_statement)",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 19,
      "startLineNumber": 25,
      "endLineNumber": 42
    }
  },
  {
    "content": "## for statement\n\nA {{jsxref(\"Statements/for\", \"for\")}} loop repeats until a specified condition evaluates to false. The JavaScript `for` loop is similar to the Java and C `for` loop.\n\nA `for` statement looks as follows:\n\n```js-nolint\nfor (initialization; condition; afterthought)\n  statement\n```\n\nWhen a `for` loop executes, the following occurs:",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "for statement",
      "chunkIndex": 2,
      "totalChunks": 19,
      "startLineNumber": 44,
      "endLineNumber": 55
    }
  },
  {
    "content": "A `for` statement looks as follows:\n\n```js-nolint\nfor (initialization; condition; afterthought)\n  statement\n```\n\nWhen a `for` loop executes, the following occurs:\n\n1. The initializing expression `initialization`, if any, is executed. This expression usually initializes one or more loop counters, but the syntax allows an expression of any degree of complexity. This expression can also declare variables.\n2. The `condition` expression is evaluated. If the value of `condition` is true, the loop statements execute. Otherwise, the `for` loop terminates. (If the `condition` expression is omitted entirely, the condition is assumed to be true.)\n3. The `statement` executes. To execute multiple statements, use a [block statement](/en-US/docs/Web/JavaScript/Reference/Statements/block) (`{ }`) to group those statements.\n4. If present, the update expression `afterthought` is executed.\n5. Control returns to Step 2.",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "for statement",
      "chunkIndex": 3,
      "totalChunks": 19,
      "startLineNumber": 48,
      "endLineNumber": 61
    }
  },
  {
    "content": "### Example\n\nIn the example below, the function contains a `for` statement that counts\nthe number of selected options in a scrolling list (a [`<select>`](/en-US/docs/Web/HTML/Reference/Elements/select)\nelement that allows multiple selections).\n\n#### HTML\n\n```html\n<form name=\"selectForm\">\n  <label for=\"musicTypes\"\n    >Choose some music types, then click the button below:</label\n  >\n  <select id=\"musicTypes\" name=\"musicTypes\" multiple>\n    <option selected>R&B</option>\n    <option>Jazz</option>\n    <option>Blues</option>\n    <option>New Age</option>\n    <option>Classical</option>\n    <option>Opera</option>\n  </select>\n  <button id=\"btn\" type=\"button\">How many are selected?</button>\n</form>\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 4,
      "totalChunks": 19,
      "startLineNumber": 63,
      "endLineNumber": 86
    }
  },
  {
    "content": "#### JavaScript\n\nHere, the `for` statement declares the variable `i` and initializes it to `0`. It checks that `i` is less than the number of options in the `<select>` element, performs the succeeding `if` statement, and increments `i` by 1 after each pass through the loop.\n\n```js\nfunction countSelected(selectObject) {\n  let numberSelected = 0;\n  for (let i = 0; i < selectObject.options.length; i++) {\n    if (selectObject.options[i].selected) {\n      numberSelected++;\n    }\n  }\n  return numberSelected;\n}\n\nconst btn = document.getElementById(\"btn\");\n\nbtn.addEventListener(\"click\", () => {\n  const musicTypes = document.selectForm.musicTypes;\n  console.log(`You have selected ${countSelected(musicTypes)} option(s).`);\n});\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "JavaScript",
      "chunkIndex": 5,
      "totalChunks": 19,
      "startLineNumber": 88,
      "endLineNumber": 109
    }
  },
  {
    "content": "## do...while statement\n\nThe {{jsxref(\"statements/do...while\", \"do...while\")}} statement repeats until a\nspecified condition evaluates to false.\n\nA `do...while` statement looks as follows:\n\n```js-nolint\ndo\n  statement\nwhile (condition);\n```\n\n`statement` is always executed once before the condition is\nchecked. (To execute multiple statements, use a block statement (`{ }`)\nto group those statements.)\n\nIf `condition` is `true`, the statement executes again. At the\nend of every execution, the condition is checked. When the condition is\n`false`, execution stops, and control passes to the statement following\n`do...while`.\n\n### Example\n\nIn the following example, the `do` loop iterates at least once and\nreiterates until `i` is no longer less than `5`.\n\n```js\nlet i = 0;\ndo {\n  i += 1;\n  console.log(i);\n} while (i < 5);\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "do...while statement",
      "chunkIndex": 6,
      "totalChunks": 19,
      "startLineNumber": 111,
      "endLineNumber": 144
    }
  },
  {
    "content": "## while statement\n\nA {{jsxref(\"Statements/while\", \"while\")}} statement executes its statements as long as a\nspecified condition evaluates to `true`. A `while` statement looks\nas follows:\n\n```js-nolint\nwhile (condition)\n  statement\n```\n\nIf the `condition` becomes `false`,\n`statement` within the loop stops executing and control passes to the\nstatement following the loop.\n\nThe condition test occurs _before_ `statement` in the loop is\nexecuted. If the condition returns `true`, `statement` is executed\nand the `condition` is tested again. If the condition returns\n`false`, execution stops, and control is passed to the statement following\n`while`.\n\nTo execute multiple statements, use a block statement (`{ }`) to group\nthose statements.",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "while statement",
      "chunkIndex": 7,
      "totalChunks": 19,
      "startLineNumber": 146,
      "endLineNumber": 168
    }
  },
  {
    "content": "### Example 1\n\nThe following `while` loop iterates as long as `n` is\nless than `3`:\n\n```js\nlet n = 0;\nlet x = 0;\nwhile (n < 3) {\n  n++;\n  x += n;\n}\n```\n\nWith each iteration, the loop increments `n` and adds that value to\n`x`. Therefore, `x` and `n` take on the following\nvalues:\n\n- After the first pass: `n` = `1` and `x` =\n  `1`\n- After the second pass: `n` = `2` and `x` =\n  `3`\n- After the third pass: `n` = `3` and `x` =\n  `6`\n\nAfter completing the third pass, the condition `n < 3` is no longer\n`true`, so the loop terminates.\n\n### Example 2\n\nAvoid infinite loops. Make sure the condition in a loop eventually becomes\n`false`—otherwise, the loop will never terminate! The statements in the\nfollowing `while` loop execute forever because the condition never becomes\n`false`:\n\n```js example-bad\n// Infinite loops are bad!\nwhile (true) {\n  console.log(\"Hello, world!\");\n}\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example 1",
      "chunkIndex": 8,
      "totalChunks": 19,
      "startLineNumber": 170,
      "endLineNumber": 210
    }
  },
  {
    "content": "## labeled statement\n\nA {{jsxref(\"Statements/label\", \"label\")}} provides a statement with an identifier that\nlets you refer to it elsewhere in your program. For example, you can use a label to\nidentify a loop, and then use the `break` or `continue` statements\nto indicate whether a program should interrupt the loop or continue its execution.\n\nThe syntax of the labeled statement looks like the following:\n\n```js-nolint\nlabel:\n  statement\n```\n\nThe value of `label` may be any JavaScript identifier that is not a\nreserved word. The `statement` that you identify with a label may be\nany statement. For examples of using labeled statements, see the examples of `break` and `continue` below.",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "labeled statement",
      "chunkIndex": 9,
      "totalChunks": 19,
      "startLineNumber": 212,
      "endLineNumber": 228
    }
  },
  {
    "content": "## break statement\n\nUse the {{jsxref(\"Statements/break\", \"break\")}} statement to terminate a loop,\n`switch`, or in conjunction with a labeled statement.\n\n- When you use `break` without a label, it terminates the innermost\n  enclosing `while`, `do-while`, `for`, or\n  `switch` immediately and transfers control to the following statement.\n- When you use `break` with a label, it terminates the specified labeled\n  statement.\n\nThe syntax of the `break` statement looks like this:\n\n```js-nolint\nbreak;\nbreak label;\n```\n\n1. The first form of the syntax terminates the innermost enclosing loop or `switch`.\n2. The second form of the syntax terminates the specified enclosing labeled statement.\n\n### Example 1\n\nThe following example iterates through the elements in an array until it finds the\nindex of an element whose value is `theValue`:\n\n```js\nfor (let i = 0; i < a.length; i++) {\n  if (a[i] === theValue) {\n    break;\n  }\n}\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "break statement",
      "chunkIndex": 10,
      "totalChunks": 19,
      "startLineNumber": 230,
      "endLineNumber": 262
    }
  },
  {
    "content": "### Example 2: Breaking to a label\n\n```js\nlet x = 0;\nlet z = 0;\nlabelCancelLoops: while (true) {\n  console.log(\"Outer loops:\", x);\n  x += 1;\n  z = 1;\n  while (true) {\n    console.log(\"Inner loops:\", z);\n    z += 1;\n    if (z === 10 && x === 10) {\n      break labelCancelLoops;\n    } else if (z === 10) {\n      break;\n    }\n  }\n}\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example 2: Breaking to a label",
      "chunkIndex": 11,
      "totalChunks": 19,
      "startLineNumber": 264,
      "endLineNumber": 283
    }
  },
  {
    "content": "## continue statement\n\nThe {{jsxref(\"Statements/continue\", \"continue\")}} statement can be used to restart a\n`while`, `do-while`, `for`, or `label`\nstatement.\n\n- When you use `continue` without a label, it terminates the current\n  iteration of the innermost enclosing `while`, `do-while`, or\n  `for` statement and continues execution of the loop with the next\n  iteration. In contrast to the `break` statement, `continue` does\n  not terminate the execution of the loop entirely. In a `while` loop, it\n  jumps back to the condition. In a `for` loop, it jumps to the\n  `increment-expression`.\n- When you use `continue` with a label, it applies to the looping statement\n  identified with that label.\n\nThe syntax of the `continue` statement looks like the following:\n\n```js-nolint\ncontinue;\ncontinue label;\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "continue statement",
      "chunkIndex": 12,
      "totalChunks": 19,
      "startLineNumber": 285,
      "endLineNumber": 306
    }
  },
  {
    "content": "### Example 1\n\nThe following example shows a `while` loop with a `continue`\nstatement that executes when the value of `i` is `3`. Thus,\n`n` takes on the values `1`, `3`, `7`, and\n`12`.\n\n```js\nlet i = 0;\nlet n = 0;\nwhile (i < 5) {\n  i++;\n  if (i === 3) {\n    continue;\n  }\n  n += i;\n  console.log(n);\n}\n// Logs:\n// 1 3 7 12\n```\n\nIf you comment out the `continue;`, the loop would run till the end and you would see `1,3,6,10,15`.",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example 1",
      "chunkIndex": 13,
      "totalChunks": 19,
      "startLineNumber": 308,
      "endLineNumber": 330
    }
  },
  {
    "content": "### Example 2\n\nA statement labeled `checkIandJ` contains a statement labeled\n`checkJ`. If `continue` is encountered, the program\nterminates the current iteration of `checkJ` and begins the next\niteration. Each time `continue` is encountered, `checkJ`\nreiterates until its condition returns `false`. When `false` is\nreturned, the remainder of the `checkIandJ` statement is completed,\nand `checkIandJ` reiterates until its condition returns\n`false`. When `false` is returned, the program continues at the\nstatement following `checkIandJ`.\n\nIf `continue` had a label of `checkIandJ`, the program\nwould continue at the top of the `checkIandJ` statement.\n\n```js\nlet i = 0;\nlet j = 10;\ncheckIandJ: while (i < 4) {\n  console.log(i);\n  i += 1;\n  checkJ: while (j > 4) {\n    console.log(j);\n    j -= 1;\n    if (j % 2 === 0) {\n      continue;\n    }\n    console.log(j, \"is odd.\");\n  }\n  console.log(\"i =\", i);\n  console.log(\"j =\", j);\n}\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example 2",
      "chunkIndex": 14,
      "totalChunks": 19,
      "startLineNumber": 332,
      "endLineNumber": 364
    }
  },
  {
    "content": "## for...in statement\n\nThe {{jsxref(\"Statements/for...in\", \"for...in\")}} statement iterates a specified\nvariable over all the enumerable properties of an object. For each distinct property,\nJavaScript executes the specified statements. A `for...in` statement looks as\nfollows:\n\n```js-nolint\nfor (variable in object)\n  statement\n```\n\n### Example\n\nThe following function takes as its argument an object and the object's name. It then\niterates over all the object's properties and returns a string that lists the property\nnames and their values.\n\n```js\nfunction dumpProps(obj, objName) {\n  let result = \"\";\n  for (const i in obj) {\n    result += `${objName}.${i} = ${obj[i]}<br>`;\n  }\n  result += \"<hr>\";\n  return result;\n}\n```\n\nFor an object `car` with properties `make` and `model`, `result` would be:\n\n```plain\ncar.make = Ford\ncar.model = Mustang\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "for...in statement",
      "chunkIndex": 15,
      "totalChunks": 19,
      "startLineNumber": 366,
      "endLineNumber": 400
    }
  },
  {
    "content": "### Arrays\n\nAlthough it may be tempting to use this as a way to iterate over {{jsxref(\"Array\")}}\nelements, the `for...in` statement will return the name of your user-defined\nproperties in addition to the numeric indexes.\n\nTherefore, it is better to use a traditional {{jsxref(\"Statements/for\", \"for\")}} loop\nwith a numeric index when iterating over arrays, because the `for...in`\nstatement iterates over user-defined properties in addition to the array elements, if\nyou modify the Array object (such as adding custom properties or methods).",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Arrays",
      "chunkIndex": 16,
      "totalChunks": 19,
      "startLineNumber": 402,
      "endLineNumber": 411
    }
  },
  {
    "content": "## for...of statement\n\nThe {{jsxref(\"Statements/for...of\", \"for...of\")}} statement creates a loop Iterating\nover [iterable objects](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) (including\n{{jsxref(\"Array\")}}, {{jsxref(\"Map\")}}, {{jsxref(\"Set\")}},\n{{jsxref(\"Functions/arguments\", \"arguments\")}} object and so on), invoking a custom\niteration hook with statements to be executed for the value of each distinct property.\n\n```js-nolint\nfor (variable of iterable)\n  statement\n```\n\nThe following example shows the difference between a `for...of` loop and a\n{{jsxref(\"Statements/for...in\", \"for...in\")}} loop. While `for...in` iterates\nover property names, `for...of` iterates over property values:\n\n```js\nconst arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (const i in arr) {\n  console.log(i);\n}\n// \"0\" \"1\" \"2\" \"foo\"\n\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 3 5 7\n```",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "for...of statement",
      "chunkIndex": 17,
      "totalChunks": 19,
      "startLineNumber": 413,
      "endLineNumber": 443
    }
  },
  {
    "content": "```js\nconst arr = [3, 5, 7];\narr.foo = \"hello\";\n\nfor (const i in arr) {\n  console.log(i);\n}\n// \"0\" \"1\" \"2\" \"foo\"\n\nfor (const i of arr) {\n  console.log(i);\n}\n// Logs: 3 5 7\n```\n\nThe `for...of` and `for...in` statements can also be used with [destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring). For example, you can simultaneously loop over the keys and values of an object using {{jsxref(\"Object.entries()\")}}.\n\n```js\nconst obj = { foo: 1, bar: 2 };\n\nfor (const [key, val] of Object.entries(obj)) {\n  console.log(key, val);\n}\n// \"foo\" 1\n// \"bar\" 2\n```\n\n{{PreviousNext(\"Web/JavaScript/Guide/Control_flow_and_error_handling\", \"Web/JavaScript/Guide/Functions\")}}",
    "metadata": {
      "source": "loops_and_iteration/index.md",
      "documentSlug": "Web/JavaScript/Guide/Loops_and_iteration",
      "documentTitle": "Loops and iteration",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "for...of statement",
      "chunkIndex": 18,
      "totalChunks": 19,
      "startLineNumber": 430,
      "endLineNumber": 457
    }
  },
  {
    "content": "Low-level languages like C, have manual memory management primitives such as [`malloc()`](https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html) and [`free()`](https://en.wikipedia.org/wiki/C_dynamic_memory_allocation#Overview_of_functions). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (_garbage collection_). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 30,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "## Memory life cycle\n\nRegardless of the programming language, the memory life cycle is pretty much always the same:\n\n1. Allocate the memory you need\n2. Use the allocated memory (read, write)\n3. Release the allocated memory when it is not needed anymore\n\nThe second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Memory life cycle",
      "chunkIndex": 1,
      "totalChunks": 30,
      "startLineNumber": 10,
      "endLineNumber": 18
    }
  },
  {
    "content": "### Allocation in JavaScript\n\n#### Value initialization\n\nIn order to not bother the programmer with allocations, JavaScript will automatically allocate memory when values are initially declared.\n\n```js\nconst n = 123; // allocates memory for a number\nconst s = \"string\"; // allocates memory for a string\n\nconst o = {\n  a: 1,\n  b: null,\n}; // allocates memory for an object and contained values\n\n// (like object) allocates memory for the array and\n// contained values\nconst a = [1, null, \"str2\"];\n\nfunction f(a) {\n  return a + 2;\n} // allocates a function (which is a callable object)\n\n// function expressions also allocate an object\nsomeElement.addEventListener(\n  \"click\",\n  () => {\n    someElement.style.backgroundColor = \"blue\";\n  },\n  false,\n);\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Allocation in JavaScript",
      "chunkIndex": 2,
      "totalChunks": 30,
      "startLineNumber": 20,
      "endLineNumber": 51
    }
  },
  {
    "content": "#### Allocation via function calls\n\nSome function calls result in object allocation.\n\n```js\nconst d = new Date(); // allocates a Date object\n\nconst e = document.createElement(\"div\"); // allocates a DOM element\n```\n\nSome methods allocate new values or objects:\n\n```js\nconst s = \"string\";\nconst s2 = s.substr(0, 3); // s2 is a new string\n// Since strings are immutable values,\n// JavaScript may decide to not allocate memory,\n// but just store the [0, 3] range.\n\nconst a = [\"yeah yeah\", \"no no\"];\nconst a2 = [\"generation\", \"no no\"];\nconst a3 = a.concat(a2);\n// new array with 4 elements being\n// the concatenation of a and a2 elements.\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Allocation via function calls",
      "chunkIndex": 3,
      "totalChunks": 30,
      "startLineNumber": 53,
      "endLineNumber": 77
    }
  },
  {
    "content": "### Using values\n\nUsing values basically means reading and writing in allocated memory. This can be done by reading or writing the value of a variable or an object property or even passing an argument to a function.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using values",
      "chunkIndex": 4,
      "totalChunks": 30,
      "startLineNumber": 79,
      "endLineNumber": 81
    }
  },
  {
    "content": "### Release when the memory is not needed anymore\n\nThe majority of memory management issues occur at this phase. The most difficult aspect of this stage is determining when the allocated memory is no longer needed.\n\nLow-level languages require the developer to manually determine at which point in the program the allocated memory is no longer needed and to release it.\n\nSome high-level languages, such as JavaScript, utilize a form of automatic memory management known as [garbage collection](<https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)>) (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it. This automatic process is an approximation since the general problem of determining whether or not a specific piece of memory is still needed is [undecidable](https://en.wikipedia.org/wiki/Decidability_%28logic%29).",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Release when the memory is not needed anymore",
      "chunkIndex": 5,
      "totalChunks": 30,
      "startLineNumber": 83,
      "endLineNumber": 89
    }
  },
  {
    "content": "## Garbage collection\n\nAs stated above, the general problem of automatically finding whether some memory \"is not needed anymore\" is undecidable. As a consequence, garbage collectors implement a restriction of a solution to the general problem. This section will explain the concepts that are necessary for understanding the main garbage collection algorithms and their respective limitations.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Garbage collection",
      "chunkIndex": 6,
      "totalChunks": 30,
      "startLineNumber": 91,
      "endLineNumber": 93
    }
  },
  {
    "content": "### References\n\nThe main concept that garbage collection algorithms rely on is the concept of _reference_. Within the context of memory management, an object is said to reference another object if the former has access to the latter (either implicitly or explicitly). For instance, a JavaScript object has a reference to its [prototype](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) (implicit reference) and to its properties values (explicit reference).\n\nIn this context, the notion of an \"object\" is extended to something broader than regular JavaScript objects and also contain function scopes (or the global lexical scope).",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "References",
      "chunkIndex": 7,
      "totalChunks": 30,
      "startLineNumber": 95,
      "endLineNumber": 99
    }
  },
  {
    "content": "### Reference-counting garbage collection\n\n> [!NOTE]\n> No modern JavaScript engine uses reference-counting for garbage collection anymore.\n\nThis is the most naïve garbage collection algorithm. This algorithm reduces the problem from determining whether or not an object is still needed to determining if an object still has any other objects referencing it. An object is said to be \"garbage\", or collectible if there are zero references pointing to it.\n\nFor example:\n\n```js\nlet x = {\n  a: {\n    b: 2,\n  },\n};\n// 2 objects are created. One is referenced by the other as one of its properties.\n// The other is referenced by virtue of being assigned to the 'x' variable.\n// Obviously, none can be garbage-collected.\n\nlet y = x;\n// The 'y' variable is the second thing that has a reference to the object.\n\nx = 1;\n// Now, the object that was originally in 'x' has a unique reference\n// embodied by the 'y' variable.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Reference-counting garbage collection",
      "chunkIndex": 8,
      "totalChunks": 30,
      "startLineNumber": 101,
      "endLineNumber": 125
    }
  },
  {
    "content": "let y = x;\n// The 'y' variable is the second thing that has a reference to the object.\n\nx = 1;\n// Now, the object that was originally in 'x' has a unique reference\n// embodied by the 'y' variable.\n\nlet z = y.a;\n// Reference to 'a' property of the object.\n// This object now has 2 references: one as a property,\n// the other as the 'z' variable.\n\ny = \"mozilla\";\n// The object that was originally in 'x' has now zero\n// references to it. It can be garbage-collected.\n// However its 'a' property is still referenced by\n// the 'z' variable, so it cannot be freed.\n\nz = null;\n// The 'a' property of the object originally in x\n// has zero references to it. It can be garbage collected.\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Reference-counting garbage collection",
      "chunkIndex": 9,
      "totalChunks": 30,
      "startLineNumber": 120,
      "endLineNumber": 141
    }
  },
  {
    "content": "z = null;\n// The 'a' property of the object originally in x\n// has zero references to it. It can be garbage collected.\n```\n\nThere is a limitation when it comes to circular references. In the following example, two objects are created with properties that reference one another, thus creating a cycle. They will go out of scope after the function call has completed. At that point they become unneeded and their allocated memory should be reclaimed. However, the reference-counting algorithm will not consider them reclaimable since each of the two objects has at least one reference pointing to them, resulting in neither of them being marked for garbage collection. Circular references are a common cause of memory leaks.\n\n```js\nfunction f() {\n  const x = {};\n  const y = {};\n  x.a = y; // x references y\n  y.a = x; // y references x\n\n  return \"azerty\";\n}\n\nf();\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Reference-counting garbage collection",
      "chunkIndex": 10,
      "totalChunks": 30,
      "startLineNumber": 138,
      "endLineNumber": 156
    }
  },
  {
    "content": "### Mark-and-sweep algorithm\n\nThis algorithm reduces the definition of \"an object is no longer needed\" to \"an object is unreachable\".\n\nThis algorithm assumes the knowledge of a set of objects called _roots._ In JavaScript, the root is the global object. Periodically, the garbage collector will start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all _reachable_ objects and collect all non-reachable objects.\n\nThis algorithm is an improvement over the previous one since an object having zero references is effectively unreachable. The opposite does not hold true as we have seen with circular references.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Mark-and-sweep algorithm",
      "chunkIndex": 11,
      "totalChunks": 30,
      "startLineNumber": 158,
      "endLineNumber": 164
    }
  },
  {
    "content": "This algorithm is an improvement over the previous one since an object having zero references is effectively unreachable. The opposite does not hold true as we have seen with circular references.\n\nCurrently, all modern engines ship a mark-and-sweep garbage collector. All improvements made in the field of JavaScript garbage collection (generational/incremental/concurrent/parallel garbage collection) over the last few years are implementation improvements of this algorithm, but not improvements over the garbage collection algorithm itself nor its reduction of the definition of when \"an object is no longer needed\".\n\nThe immediate benefit of this approach is that cycles are no longer a problem. In the first example above, after the function call returns, the two objects are no longer referenced by any resource that is reachable from the global object. Consequently, they will be found unreachable by the garbage collector and have their allocated memory reclaimed.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Mark-and-sweep algorithm",
      "chunkIndex": 12,
      "totalChunks": 30,
      "startLineNumber": 164,
      "endLineNumber": 168
    }
  },
  {
    "content": "However, the inability to manually control garbage collection remains. There are times when it would be convenient to manually decide when and what memory is released. In order to release the memory of an object, it needs to be made explicitly unreachable. It is also not possible to programmatically trigger garbage collection in JavaScript — and will likely never be within the core language, although engines may expose APIs behind opt-in flags.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Mark-and-sweep algorithm",
      "chunkIndex": 13,
      "totalChunks": 30,
      "startLineNumber": 170,
      "endLineNumber": 170
    }
  },
  {
    "content": "## Configuring an engine's memory model\n\nJavaScript engines typically offer flags that expose the memory model. For example, Node.js offers additional options and tools that expose the underlying V8 mechanisms for configuring and debugging memory issues. This configuration may not be available in browsers, and even less so for web pages (via HTTP headers, etc.).\n\nThe max amount of available heap memory can be increased with a flag:\n\n```bash\nnode --max-old-space-size=6000 index.js\n```\n\nWe can also expose the garbage collector for debugging memory issues using a flag and the [Chrome Debugger](https://nodejs.org/en/learn/getting-started/debugging):\n\n```bash\nnode --expose-gc --inspect index.js\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Configuring an engine's memory model",
      "chunkIndex": 14,
      "totalChunks": 30,
      "startLineNumber": 172,
      "endLineNumber": 186
    }
  },
  {
    "content": "## Data structures aiding memory management\n\nAlthough JavaScript does not directly expose the garbage collector API, the language offers several data structures that indirectly observe garbage collection and can be used to manage memory usage.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Data structures aiding memory management",
      "chunkIndex": 15,
      "totalChunks": 30,
      "startLineNumber": 188,
      "endLineNumber": 190
    }
  },
  {
    "content": "### WeakMaps and WeakSets\n\n[`WeakMap`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) and [`WeakSet`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) are data structures whose APIs closely mirror their non-weak counterparts: [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set). `WeakMap` allows you to maintain a collection of key-value pairs, while `WeakSet` allows you to maintain a collection of unique values, both with performant addition, deletion, and querying.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 16,
      "totalChunks": 30,
      "startLineNumber": 192,
      "endLineNumber": 194
    }
  },
  {
    "content": "`WeakMap` and `WeakSet` got the name from the concept of _weakly held_ values. If `x` is weakly held by `y`, it means that although you can access the value of `x` via `y`, the mark-and-sweep algorithm won't consider `x` as reachable if nothing else _strongly holds_ to it. Most data structures, except the ones discussed here, strongly holds to the objects passed in so that you can retrieve them at any time. The keys of `WeakMap` and `WeakSet` can be garbage-collected (for `WeakMap` objects, the values would then be eligible for garbage collection as well) as long as nothing else in the program is referencing the key. This is ensured by two characteristics:",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 17,
      "totalChunks": 30,
      "startLineNumber": 196,
      "endLineNumber": 196
    }
  },
  {
    "content": "- `WeakMap` and `WeakSet` can only store objects or symbols. This is because only objects are garbage collected — primitive values can always be forged (that is, `1 === 1` but `{} !== {}`), making them stay in the collection forever. [Registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) (like `Symbol.for(\"key\")`) can also be forged and thus not garbage collectable, but symbols created with `Symbol(\"key\")` are garbage collectable. [Well-known symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) like `Symbol.iterator` come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as `Array.prototype`, so they are also allowed as keys.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 18,
      "totalChunks": 30,
      "startLineNumber": 198,
      "endLineNumber": 198
    }
  },
  {
    "content": "- `WeakMap` and `WeakSet` are not iterable. This prevents you from using `Array.from(map.keys()).length` to observe the liveliness of objects, or get hold of an arbitrary key which should otherwise be eligible for garbage collection. (Garbage collection should be as invisible as possible.)",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 19,
      "totalChunks": 30,
      "startLineNumber": 199,
      "endLineNumber": 199
    }
  },
  {
    "content": "In typical explanations of `WeakMap` and `WeakSet` (such as the one above), it's often implied that the key is garbage-collected first, freeing the value for garbage collection as well. However, consider the case of the value referencing the key:\n\n```js\nconst wm = new WeakMap();\nconst key = {};\nwm.set(key, { key });\n// Now `key` cannot be garbage collected,\n// because the value holds a reference to the key,\n// and the value is strongly held in the map!\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 20,
      "totalChunks": 30,
      "startLineNumber": 201,
      "endLineNumber": 210
    }
  },
  {
    "content": "If `key` is stored as an actual reference, it would create a cyclic reference and make both the key and value ineligible for garbage collection, even when nothing else references `key` — because if `key` is garbage collected, it means that at some particular instant, `value.key` would point to a non-existent address, which is not legal. To fix this, the entries of `WeakMap` and `WeakSet` aren't actual references, but [ephemerons](https://dl.acm.org/doi/pdf/10.1145/263700.263733), an enhancement to the mark-and-sweep mechanism. [Barros et al.](https://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak/jucs_14_21_3481_3497_barros.pdf) offers a good summary of the algorithm (page 4). To quote a paragraph:",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 21,
      "totalChunks": 30,
      "startLineNumber": 212,
      "endLineNumber": 212
    }
  },
  {
    "content": "> Ephemerons are a refinement of weak pairs where neither the key nor the value can be classified as weak or strong. The connectivity of the key determines the connectivity of the value, but the connectivity of the value does not affect the connectivity of the key. […] when the garbage collection offers support to ephemerons, it occurs in three phases instead of two (mark and sweep).\n\nAs a rough mental model, think of a `WeakMap` as the following implementation:\n\n> [!WARNING]\n> This is not a polyfill nor is anywhere close to how it's implemented in the engine (which hooks into the garbage collection mechanism).\n\n```js\nclass MyWeakMap {\n  #marker = Symbol(\"MyWeakMapData\");\n  get(key) {\n    return key[this.#marker];\n  }\n  set(key, value) {\n    key[this.#marker] = value;\n  }\n  has(key) {\n    return this.#marker in key;\n  }\n  delete(key) {\n    delete key[this.#marker];\n  }\n}\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 22,
      "totalChunks": 30,
      "startLineNumber": 214,
      "endLineNumber": 237
    }
  },
  {
    "content": "As you can see, the `MyWeakMap` never actually holds a collection of keys. It simply adds metadata to each object being passed in. The object is then garbage-collectable via mark-and-sweep. Therefore, it's not possible to iterate over the keys in a `WeakMap`, nor clear the `WeakMap` (as that also relies on the knowledge of the entire key collection).\n\nFor more information on their APIs, see the [keyed collections](/en-US/docs/Web/JavaScript/Guide/Keyed_collections) guide.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakMaps and WeakSets",
      "chunkIndex": 23,
      "totalChunks": 30,
      "startLineNumber": 239,
      "endLineNumber": 241
    }
  },
  {
    "content": "### WeakRefs and FinalizationRegistry\n\n> [!NOTE]\n> `WeakRef` and `FinalizationRegistry` offer direct introspection into the garbage collection machinery. [Avoid using them where possible](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#avoid_where_possible) because the runtime semantics are almost completely unguaranteed.\n\nAll variables with an object as value are references to that object. However, such references are _strong_ — their existence would prevent the garbage collector from marking the object as eligible for collection. A [`WeakRef`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) is a _weak reference_ to an object that allows the object to be garbage collected, while still retaining the ability to read the object's content during its lifetime.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 24,
      "totalChunks": 30,
      "startLineNumber": 243,
      "endLineNumber": 248
    }
  },
  {
    "content": "One use case for `WeakRef` is a cache system which maps string URLs to large objects. We cannot use a `WeakMap` for this purpose, because `WeakMap` objects have their _keys_ weakly held, but not their _values_ — if you access a key, you would always deterministically get the value (since having access to the key means it's still alive). Here, we are okay to get `undefined` for a key (if the corresponding value is no longer alive) since we can just re-compute it, but we don't want unreachable objects to stay in the cache. In this case, we can use a normal `Map`, but with each value being a `WeakRef` of the object instead of the actual object value.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 25,
      "totalChunks": 30,
      "startLineNumber": 250,
      "endLineNumber": 250
    }
  },
  {
    "content": "```js\nfunction cached(getter) {\n  // A Map from string URLs to WeakRefs of results\n  const cache = new Map();\n  return async (key) => {\n    if (cache.has(key)) {\n      const dereferencedValue = cache.get(key).deref();\n      if (dereferencedValue !== undefined) {\n        return dereferencedValue;\n      }\n    }\n    const value = await getter(key);\n    cache.set(key, new WeakRef(value));\n    return value;\n  };\n}\n\nconst getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 26,
      "totalChunks": 30,
      "startLineNumber": 252,
      "endLineNumber": 270
    }
  },
  {
    "content": "const getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```\n\n[`FinalizationRegistry`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry) provides an even stronger mechanism to observe garbage collection. It allows you to register objects and be notified when they are garbage collected. For example, for the cache system exemplified above, even when the blobs themselves are free for collection, the `WeakRef` objects that hold them are not — and over time, the `Map` may accumulate a lot of useless entries. Using a `FinalizationRegistry` allows one to perform cleanup in this case.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 27,
      "totalChunks": 30,
      "startLineNumber": 269,
      "endLineNumber": 272
    }
  },
  {
    "content": "```js\nfunction cached(getter) {\n  // A Map from string URLs to WeakRefs of results\n  const cache = new Map();\n  // Every time after a value is garbage collected, the callback is\n  // called with the key in the cache as argument, allowing us to remove\n  // the cache entry\n  const registry = new FinalizationRegistry((key) => {\n    // Note: it's important to test that the WeakRef is indeed empty.\n    // Otherwise, the callback may be called after a new object has been\n    // added with this key, and that new, alive object gets deleted\n    if (!cache.get(key)?.deref()) {\n      cache.delete(key);\n    }\n  });\n  return async (key) => {\n    if (cache.has(key)) {\n      return cache.get(key).deref();\n    }\n    const value = await getter(key);\n    cache.set(key, new WeakRef(value));\n    registry.register(value, key);\n    return value;\n  };\n}\n\nconst getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 28,
      "totalChunks": 30,
      "startLineNumber": 274,
      "endLineNumber": 301
    }
  },
  {
    "content": "const getImage = cached((url) => fetch(url).then((res) => res.blob()));\n```\n\nDue to performance and security concerns, there is no guarantee of when the callback will be called, or if it will be called at all. It should only be used for cleanup — and non-critical cleanup. There are other ways for more deterministic resource management, such as [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch), which will always execute the `finally` block. `WeakRef` and `FinalizationRegistry` exist solely for optimization of memory usage in long-running programs.\n\nFor more information on the API of [`WeakRef`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef) and [`FinalizationRegistry`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry), see their reference pages.",
    "metadata": {
      "source": "memory_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Memory_management",
      "documentTitle": "Memory management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "WeakRefs and FinalizationRegistry",
      "chunkIndex": 29,
      "totalChunks": 30,
      "startLineNumber": 300,
      "endLineNumber": 305
    }
  },
  {
    "content": "The {{jsxref(\"Proxy\")}} and {{jsxref(\"Reflect\")}} objects allow you to intercept and define custom behavior for fundamental language operations (e.g., property lookup, assignment, enumeration, function invocation, etc.). With the help of these two objects you are able to program at the meta level of JavaScript.",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 14,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "## Proxies\n\n{{jsxref(\"Proxy\")}} objects allow you to intercept certain operations and to implement custom behaviors.\n\nFor example, getting a property on an object:\n\n```js\nconst handler = {\n  get(target, name) {\n    return name in target ? target[name] : 42;\n  },\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\nconsole.log(p.a, p.b); // 1, 42\n```\n\nThe `Proxy` object defines a `target` (an empty object here) and a `handler` object, in which a `get` _trap_ is implemented. Here, an object that is proxied will not return `undefined` when getting undefined properties, but will instead return the number `42`.\n\nAdditional examples are available on the {{jsxref(\"Proxy\")}} reference page.",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Proxies",
      "chunkIndex": 1,
      "totalChunks": 14,
      "startLineNumber": 10,
      "endLineNumber": 30
    }
  },
  {
    "content": "### Terminology\n\nThe following terms are used when talking about the functionality of proxies.\n\n- {{jsxref(\"Proxy/Proxy\", \"handler\", \"\", 1)}}\n  - : Placeholder object which contains traps.\n- traps\n  - : The methods that provide property access. (This is analogous to the concept of _traps_ in operating systems.)\n- target\n  - : Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\n- {{Glossary(\"invariant\", \"invariants\")}}\n  - : Semantics that remain unchanged when implementing custom operations are called _invariants_. If you violate the invariants of a handler, a {{jsxref(\"TypeError\")}} will be thrown.",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Terminology",
      "chunkIndex": 2,
      "totalChunks": 14,
      "startLineNumber": 32,
      "endLineNumber": 43
    }
  },
  {
    "content": "## Handlers and traps\n\nThe following table summarizes the available traps available to `Proxy` objects. See the [reference pages](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) for detailed explanations and examples.",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 3,
      "totalChunks": 14,
      "startLineNumber": 45,
      "endLineNumber": 47
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th>Handler / trap</th>\n      <th>Interceptions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/getPrototypeOf\", \"handler.getPrototypeOf()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.getPrototypeOf()\")}}<br />{{jsxref(\"Reflect.getPrototypeOf()\")}}<br />{{jsxref(\"Object/proto\", \"__proto__\")}}<br />{{jsxref(\"Object.prototype.isPrototypeOf()\")}}<br />{{jsxref(\"Operators/instanceof\", \"instanceof\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/setPrototypeOf\", \"handler.setPrototypeOf()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.setPrototypeOf()\")}}<br />{{jsxref(\"Reflect.setPrototypeOf()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/isExtensible\", \"handler.isExtensible()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.isExtensible()\")}}<br />{{jsxref(\"Reflect.isExtensible()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 4,
      "totalChunks": 14,
      "startLineNumber": 49,
      "endLineNumber": 82
    }
  },
  {
    "content": "</td>\n      <td>\n        {{jsxref(\"Object.isExtensible()\")}}<br />{{jsxref(\"Reflect.isExtensible()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/preventExtensions\", \"handler.preventExtensions()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.preventExtensions()\")}}<br />{{jsxref(\"Reflect.preventExtensions()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/getOwnPropertyDescriptor\", \"handler.getOwnPropertyDescriptor()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}<br />{{jsxref(\"Reflect.getOwnPropertyDescriptor()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/defineProperty\", \"handler.defineProperty()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.defineProperty()\")}}<br />{{jsxref(\"Reflect.defineProperty()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/has\", \"handler.has()\")}}\n      </td>\n      <td>\n        <dl>",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 5,
      "totalChunks": 14,
      "startLineNumber": 76,
      "endLineNumber": 110
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/has\", \"handler.has()\")}}\n      </td>\n      <td>\n        <dl>\n          <dt>Property query</dt>\n          <dd><code>foo in proxy</code></dd>\n          <dt>Inherited property query</dt>\n          <dd>\n            <code>foo in Object.create(<var>proxy</var>)</code\n            ><br />{{jsxref(\"Reflect.has()\")}}\n          </dd>\n        </dl>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/get\", \"handler.get()\")}}\n      </td>\n      <td>\n        <dl>\n          <dt>Property access</dt>\n          <dd>\n            <code><var>proxy</var>[foo]</code><br /><code\n              ><var>proxy</var>.bar</code\n            >\n          </dd>\n          <dt>Inherited property access</dt>\n          <dd>\n            <!-- markdownlint-disable MD011 -->\n            <code>Object.create(<var>proxy</var>)[foo]</code\n            ><br />{{jsxref(\"Reflect.get()\")}}\n          </dd>\n        </dl>\n      </td>\n    </tr>",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 6,
      "totalChunks": 14,
      "startLineNumber": 103,
      "endLineNumber": 141
    }
  },
  {
    "content": "<code>Object.create(<var>proxy</var>)[foo]</code\n            ><br />{{jsxref(\"Reflect.get()\")}}\n          </dd>\n        </dl>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/set\", \"handler.set()\")}}\n      </td>\n      <td>\n        <dl>\n          <dt>Property assignment</dt>\n          <dd>\n            <code><var>proxy</var>[foo] = bar</code><br /><code\n              ><var>proxy</var>.foo = bar</code\n            >\n          </dd>\n          <dt>Inherited property assignment</dt>\n          <dd>\n            <code>Object.create(<var>proxy</var>)[foo] = bar</code\n            ><br />{{jsxref(\"Reflect.set()\")}}\n          </dd>\n            <!-- markdownlint-enable MD011 -->\n        </dl>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/deleteProperty\", \"handler.deleteProperty()\")}}\n      </td>\n      <td>\n        <dl>\n          <dt>Property deletion</dt>\n          <dd>\n            <code>delete <var>proxy</var>[foo]</code><br /><code",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 7,
      "totalChunks": 14,
      "startLineNumber": 136,
      "endLineNumber": 171
    }
  },
  {
    "content": "</td>\n      <td>\n        <dl>\n          <dt>Property deletion</dt>\n          <dd>\n            <code>delete <var>proxy</var>[foo]</code><br /><code\n              >delete <var>proxy</var>.foo</code\n            ><br />{{jsxref(\"Reflect.deleteProperty()\")}}\n          </dd>\n        </dl>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/ownKeys\", \"handler.ownKeys()\")}}\n      </td>\n      <td>\n        {{jsxref(\"Object.getOwnPropertyNames()\")}}<br />{{jsxref(\"Object.getOwnPropertySymbols()\")}}<br />{{jsxref(\"Object.keys()\")}}<br />{{jsxref(\"Reflect.ownKeys()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/apply\", \"handler.apply()\")}}\n      </td>\n      <td>\n        <code>proxy(..args)</code\n        ><br />{{jsxref(\"Function.prototype.apply()\")}} and\n        {{jsxref(\"Function.prototype.call()\")}}<br />{{jsxref(\"Reflect.apply()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/construct\", \"handler.construct()\")}}",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 8,
      "totalChunks": 14,
      "startLineNumber": 166,
      "endLineNumber": 198
    }
  },
  {
    "content": "{{jsxref(\"Function.prototype.call()\")}}<br />{{jsxref(\"Reflect.apply()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Proxy/Proxy/construct\", \"handler.construct()\")}}\n      </td>\n      <td>\n        <code>new proxy(...args)</code\n        ><br />{{jsxref(\"Reflect.construct()\")}}\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Handlers and traps",
      "chunkIndex": 9,
      "totalChunks": 14,
      "startLineNumber": 193,
      "endLineNumber": 206
    }
  },
  {
    "content": "## Revocable `Proxy`\n\nThe {{jsxref(\"Proxy.revocable()\")}} method is used to create a revocable `Proxy` object. This means that the proxy can be revoked via the function `revoke` and switches the proxy off.\n\nAfterwards, any operation on the proxy leads to a {{jsxref(\"TypeError\")}}.\n\n```js\nconst revocable = Proxy.revocable(\n  {},\n  {\n    get(target, name) {\n      return `[[${name}]]`;\n    },\n  },\n);\nconst proxy = revocable.proxy;\nconsole.log(proxy.foo); // \"[[foo]]\"\n\nrevocable.revoke();\n\nconsole.log(proxy.foo); // TypeError: Cannot perform 'get' on a proxy that has been revoked\nproxy.foo = 1; // TypeError: Cannot perform 'set' on a proxy that has been revoked\ndelete proxy.foo; // TypeError: Cannot perform 'deleteProperty' on a proxy that has been revoked\nconsole.log(typeof proxy); // \"object\", typeof doesn't trigger any trap\n```",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Revocable `Proxy`",
      "chunkIndex": 10,
      "totalChunks": 14,
      "startLineNumber": 208,
      "endLineNumber": 232
    }
  },
  {
    "content": "## Reflection\n\n{{jsxref(\"Reflect\")}} is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of the [proxy handler's](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\n`Reflect` is not a function object.\n\n`Reflect` helps with forwarding default operations from the handler to the `target`.\n\nWith {{jsxref(\"Reflect.has()\")}} for example, you get the [`in` operator](/en-US/docs/Web/JavaScript/Reference/Operators/in) as a function:\n\n```js\nReflect.has(Object, \"assign\"); // true\n```",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Reflection",
      "chunkIndex": 11,
      "totalChunks": 14,
      "startLineNumber": 234,
      "endLineNumber": 246
    }
  },
  {
    "content": "### A better apply() function\n\nBefore `Reflect`, you typically use the {{jsxref(\"Function.prototype.apply()\")}} method to call a function with a given `this` value and `arguments` provided as an array (or an [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n\n```js\nFunction.prototype.apply.call(Math.floor, undefined, [1.75]);\n```\n\nWith {{jsxref(\"Reflect.apply\")}} this becomes less verbose and easier to understand:\n\n```js\nReflect.apply(Math.floor, undefined, [1.75]);\n// 1\n\nReflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]);\n// \"hello\"\n\nReflect.apply(RegExp.prototype.exec, /ab/, [\"confabulation\"]).index;\n// 4\n\nReflect.apply(\"\".charAt, \"ponies\", [3]);\n// \"i\"\n```",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "A better apply() function",
      "chunkIndex": 12,
      "totalChunks": 14,
      "startLineNumber": 248,
      "endLineNumber": 270
    }
  },
  {
    "content": "### Checking if property definition has been successful\n\nWith {{jsxref(\"Object.defineProperty\")}}, which returns an object if successful, or throws a {{jsxref(\"TypeError\")}} otherwise, you would use a {{jsxref(\"Statements/try...catch\", \"try...catch\")}} block to catch any error that occurred while defining a property. Because {{jsxref(\"Reflect.defineProperty()\")}} returns a Boolean success status, you can just use an {{jsxref(\"Statements/if...else\", \"if...else\")}} block here:\n\n```js\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```",
    "metadata": {
      "source": "meta_programming/index.md",
      "documentSlug": "Web/JavaScript/Guide/Meta_programming",
      "documentTitle": "Meta programming",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Checking if property definition has been successful",
      "chunkIndex": 13,
      "totalChunks": 14,
      "startLineNumber": 272,
      "endLineNumber": 282
    }
  },
  {
    "content": "{{Previous(\"Web/JavaScript/Guide/Internationalization\")}}\n\nThis guide gives you all you need to get started with JavaScript module syntax.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 78,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## A background on modules\n\nJavaScript programs started off pretty small — most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts ([Node.js](/en-US/docs/Glossary/Node.js), for example).",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "A background on modules",
      "chunkIndex": 1,
      "totalChunks": 78,
      "startLineNumber": 12,
      "endLineNumber": 14
    }
  },
  {
    "content": "Complex projects necessitate a mechanism for splitting JavaScript programs into separate modules that can be imported when needed. Node.js has had this ability for a long time, and there are a number of JavaScript libraries and frameworks that enable module usage (for example, other [CommonJS](https://en.wikipedia.org/wiki/CommonJS) and [AMD](https://github.com/amdjs/amdjs-api/blob/master/AMD.md)-based module systems like [RequireJS](https://requirejs.org/), [webpack](https://webpack.js.org/), and [Babel](https://babeljs.io/)).",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "A background on modules",
      "chunkIndex": 2,
      "totalChunks": 78,
      "startLineNumber": 16,
      "endLineNumber": 16
    }
  },
  {
    "content": "All modern browsers support module features natively without needing transpilation. It can only be a good thing — browsers can optimize loading of modules, making it more efficient than having to use a library and do all of that extra client-side processing and extra round trips. It does not obsolete bundlers like webpack, though — bundlers still do a good job at partitioning code into reasonably sized chunks, and are able to do other optimizations like minification, dead code elimination, and tree-shaking.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "A background on modules",
      "chunkIndex": 3,
      "totalChunks": 78,
      "startLineNumber": 18,
      "endLineNumber": 18
    }
  },
  {
    "content": "## Introducing an example\n\nTo demonstrate usage of modules, we've created a [set of examples](https://github.com/mdn/js-examples/tree/main/module-examples) that you can find on GitHub. These examples demonstrate a set of modules that create a [`<canvas>`](/en-US/docs/Web/HTML/Reference/Elements/canvas) element on a webpage, and then draw (and report information about) different shapes on the canvas.\n\nThese are fairly trivial, but have been kept deliberately simple to demonstrate modules clearly.\n\n> [!NOTE]\n> If you want to download the examples and run them locally, you'll need to run them through a local web server.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Introducing an example",
      "chunkIndex": 4,
      "totalChunks": 78,
      "startLineNumber": 20,
      "endLineNumber": 27
    }
  },
  {
    "content": "## Basic example structure\n\nIn our first example (see [basic-modules](https://github.com/mdn/js-examples/tree/main/module-examples/basic-modules)) we have a file structure as follows:\n\n```plain\nindex.html\nmain.js\nmodules/\n    canvas.js\n    square.js\n```\n\n> [!NOTE]\n> All of the examples in this guide have basically the same structure; the above should start getting pretty familiar.\n\nThe modules directory's two modules are described below:\n\n- `canvas.js` — contains functions related to setting up the canvas:\n  - `create()` — creates a canvas with a specified `width` and `height` inside a wrapper [`<div>`](/en-US/docs/Web/HTML/Reference/Elements/div) with a specified ID, which is itself appended inside a specified parent element. Returns an object containing the canvas's 2D context and the wrapper's ID.\n  - `createReportList()` — creates an unordered list appended inside a specified wrapper element, which can be used to output report data into. Returns the list's ID.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basic example structure",
      "chunkIndex": 5,
      "totalChunks": 78,
      "startLineNumber": 29,
      "endLineNumber": 48
    }
  },
  {
    "content": "- `square.js` — contains:\n  - `name` — a constant containing the string 'square'.\n  - `draw()` — draws a square on a specified canvas, with a specified size, position, and color. Returns an object containing the square's size, position, and color.\n  - `reportArea()` — writes a square's area to a specific report list, given its length.\n  - `reportPerimeter()` — writes a square's perimeter to a specific report list, given its length.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basic example structure",
      "chunkIndex": 6,
      "totalChunks": 78,
      "startLineNumber": 50,
      "endLineNumber": 54
    }
  },
  {
    "content": "### Aside — .mjs versus .js\n\nThroughout this article, we've used `.js` extensions for our module files, but in other resources you may see the `.mjs` extension used instead. [V8's documentation recommends this](https://v8.dev/features/modules#mjs), for example. The reasons given are:\n\n- It is good for clarity, i.e., it makes it clear which files are modules, and which are regular JavaScript.\n- It ensures that your module files are parsed as a module by runtimes such as [Node.js](https://nodejs.org/api/esm.html#esm_enabling), and build tools such as [Babel](https://babeljs.io/docs/options#sourcetype).",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aside — .mjs versus .js",
      "chunkIndex": 7,
      "totalChunks": 78,
      "startLineNumber": 56,
      "endLineNumber": 61
    }
  },
  {
    "content": "However, we decided to keep using `.js`, at least for the moment. To get modules to work correctly in a browser, you need to make sure that your server is serving them with a `Content-Type` header that contains a JavaScript MIME type such as `text/javascript`. If you don't, you'll get a strict MIME type checking error along the lines of \"The server responded with a non-JavaScript MIME type\" and the browser won't run your JavaScript. Most servers already set the correct type for `.js` files, but not yet for `.mjs` files. Servers that already serve `.mjs` files correctly include [GitHub Pages](https://pages.github.com/) and [`http-server`](https://github.com/http-party/http-server#readme) for Node.js.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aside — .mjs versus .js",
      "chunkIndex": 8,
      "totalChunks": 78,
      "startLineNumber": 63,
      "endLineNumber": 63
    }
  },
  {
    "content": "This is OK if you are using such an environment already, or if you aren't but you know what you are doing and have access (i.e., you can configure your server to set the correct [`Content-Type`](/en-US/docs/Web/HTTP/Reference/Headers/Content-Type) for `.mjs` files). It could however cause confusion if you don't control the server you are serving files from, or are publishing files for public use, as we are here.\n\nFor learning and portability purposes, we decided to keep to `.js`.\n\nIf you really value the clarity of using `.mjs` for modules versus using `.js` for \"normal\" JavaScript files, but don't want to run into the problem described above, you could always use `.mjs` during development and convert them to `.js` during your build step.\n\nIt is also worth noting that:\n\n- Some tools may never support `.mjs`.\n- The `<script type=\"module\">` attribute is used to denote when a module is being pointed to, as you'll see below.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aside — .mjs versus .js",
      "chunkIndex": 9,
      "totalChunks": 78,
      "startLineNumber": 65,
      "endLineNumber": 74
    }
  },
  {
    "content": "## Exporting module features\n\nThe first thing you do to get access to module features is export them. This is done using the {{jsxref(\"Statements/export\", \"export\")}} statement.\n\nThe easiest way to use it is to place it in front of any items you want exported out of the module, for example:\n\n```js\nexport const name = \"square\";\n\nexport function draw(ctx, length, x, y, color) {\n  ctx.fillStyle = color;\n  ctx.fillRect(x, y, length, length);\n\n  return { length, x, y, color };\n}\n```\n\nYou can export functions, `var`, `let`, `const`, and — as we'll see later — classes. They need to be top-level items: for example, you can't use `export` inside a function.\n\nA more convenient way of exporting all the items you want to export is to use a single export statement at the end of your module file, followed by a comma-separated list of the features you want to export wrapped in curly braces. For example:\n\n```js\nexport { name, draw, reportArea, reportPerimeter };\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Exporting module features",
      "chunkIndex": 10,
      "totalChunks": 78,
      "startLineNumber": 76,
      "endLineNumber": 99
    }
  },
  {
    "content": "## Importing features into your script\n\nOnce you've exported some features out of your module, you need to import them into your script to be able to use them. The simplest way to do this is as follows:\n\n```js\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/square.js\";\n```\n\nYou use the {{jsxref(\"Statements/import\", \"import\")}} statement, followed by a comma-separated list of the features you want to import wrapped in curly braces, followed by the keyword `from`, followed by the _module specifier_.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing features into your script",
      "chunkIndex": 11,
      "totalChunks": 78,
      "startLineNumber": 101,
      "endLineNumber": 109
    }
  },
  {
    "content": "The _module specifier_ provides a string that the JavaScript environment can resolve to a path to the module file.\nIn a browser, this could be a path relative to the site root, which for our `basic-modules` example would be `/js-examples/module-examples/basic-modules`.\nHowever, here we are instead using the dot (`.`) syntax to mean \"the current location\", followed by the relative path to the file we are trying to find. This is much better than writing out the entire absolute path each time, as relative paths are shorter and make the URL portable — the example will still work if you move it to a different location in the site hierarchy.\n\nSo for example:\n\n```bash\n/js-examples/module-examples/basic-modules/modules/square.js\n```\n\nbecomes\n\n```bash\n./modules/square.js\n```\n\nYou can see such lines in action in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/basic-modules/main.js).",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing features into your script",
      "chunkIndex": 12,
      "totalChunks": 78,
      "startLineNumber": 111,
      "endLineNumber": 127
    }
  },
  {
    "content": "becomes\n\n```bash\n./modules/square.js\n```\n\nYou can see such lines in action in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/basic-modules/main.js).\n\n> [!NOTE]\n> In some module systems, you can use a module specifier like `modules/square` that isn't a relative or absolute path, and that doesn't have a file extension.\n> This kind of specifier can be used in a browser environment if you first define an [import map](#importing_modules_using_import_maps).\n\nOnce you've imported the features into your script, you can use them just like they were defined inside the same file. The following is found in `main.js`, below the import lines:\n\n```js\nconst myCanvas = create(\"myCanvas\", document.body, 480, 320);\nconst reportList = createReportList(myCanvas.id);\n\nconst square = draw(myCanvas.ctx, 50, 50, 100, \"blue\");\nreportArea(square.length, reportList);\nreportPerimeter(square.length, reportList);\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing features into your script",
      "chunkIndex": 13,
      "totalChunks": 78,
      "startLineNumber": 121,
      "endLineNumber": 142
    }
  },
  {
    "content": "const square = draw(myCanvas.ctx, 50, 50, 100, \"blue\");\nreportArea(square.length, reportList);\nreportPerimeter(square.length, reportList);\n```\n\n> [!NOTE]\n> The imported values are read-only views of the features that were exported. Similar to `const` variables, you cannot re-assign the variable that was imported, but you can still modify properties of object values. The value can only be re-assigned by the module exporting it. See the [`import` reference](/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter) for an example.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing features into your script",
      "chunkIndex": 14,
      "totalChunks": 78,
      "startLineNumber": 139,
      "endLineNumber": 145
    }
  },
  {
    "content": "## Importing modules using import maps\n\nAbove we saw how a browser can import a module using a module specifier that is either an absolute URL, or a relative URL that is resolved using the base URL of the document:\n\n```js\nimport { name as circleName } from \"https://example.com/shapes/circle.js\";\nimport { name as squareName, draw } from \"./shapes/square.js\";\n```\n\n[Import maps](/en-US/docs/Web/HTML/Reference/Elements/script/type/importmap) allow developers to instead specify almost any text they want in the module specifier when importing a module; the map provides a corresponding value that will replace the text when the module URL is resolved.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules using import maps",
      "chunkIndex": 15,
      "totalChunks": 78,
      "startLineNumber": 147,
      "endLineNumber": 156
    }
  },
  {
    "content": "For example, the `imports` key in the import map below defines a \"module specifier map\" JSON object where the property names can be used as module specifiers, and the corresponding values will be substituted when the browser resolves the module URL.\nThe values must be absolute or relative URLs.\nRelative URLs are resolved to absolute URL addresses using the [base URL](/en-US/docs/Web/HTML/Reference/Elements/base) of the document containing the import map.\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"shapes\": \"./shapes/square.js\",\n      \"shapes/square\": \"./modules/shapes/square.js\",\n      \"https://example.com/shapes/square.js\": \"./shapes/square.js\",\n      \"https://example.com/shapes/\": \"/shapes/square/\",\n      \"../shapes/square\": \"./shapes/square.js\"\n    }\n  }\n</script>\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules using import maps",
      "chunkIndex": 16,
      "totalChunks": 78,
      "startLineNumber": 158,
      "endLineNumber": 174
    }
  },
  {
    "content": "The import map is defined using a [JSON object](/en-US/docs/Web/HTML/Reference/Elements/script/type/importmap#import_map_json_representation) inside a `<script>` element with the `type` attribute set to [`importmap`](/en-US/docs/Web/HTML/Reference/Elements/script/type/importmap).\nNote that an import map only applies to the document — the specification does not cover how to apply an import map in a worker or worklet context. <!-- https://github.com/WICG/import-maps/issues/2 -->\n\nWith this map you can now use the property names above as module specifiers.\nIf there is no trailing forward slash on the module specifier key then the whole module specifier key is matched and substituted.\nFor example, below we match bare module names, and remap a URL to another path.\n\n```js\n// Bare module names as module specifiers\nimport { name as squareNameOne } from \"shapes\";\nimport { name as squareNameTwo } from \"shapes/square\";",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules using import maps",
      "chunkIndex": 17,
      "totalChunks": 78,
      "startLineNumber": 176,
      "endLineNumber": 186
    }
  },
  {
    "content": "```js\n// Bare module names as module specifiers\nimport { name as squareNameOne } from \"shapes\";\nimport { name as squareNameTwo } from \"shapes/square\";\n\n// Remap a URL to another URL\nimport { name as squareNameThree } from \"https://example.com/shapes/square.js\";\n```\n\nIf the module specifier has a trailing forward slash then the value must have one as well, and the key is matched as a \"path prefix\".\nThis allows remapping of whole classes of URLs.\n\n```js\n// Remap a URL as a prefix ( https://example.com/shapes/)\nimport { name as squareNameFour } from \"https://example.com/shapes/moduleshapes/square.js\";\n```\n\nIt is possible for multiple keys in an import map to be valid matches for a module specifier.\nFor example, a module specifier of `shapes/circle/` could match the module specifier keys `shapes/` and `shapes/circle/`.\nIn this case the browser will select the most specific (longest) matching module specifier key.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules using import maps",
      "chunkIndex": 18,
      "totalChunks": 78,
      "startLineNumber": 183,
      "endLineNumber": 202
    }
  },
  {
    "content": "Import maps allow modules to be imported using bare module names (as in Node.js), and can also simulate importing modules from packages, both with and without file extensions.\nWhile not shown above, they also allow particular versions of a library to be imported, based on the path of the script that is importing the module.\nGenerally they let developers write more ergonomic import code, and make it easier to manage the different versions and dependencies of modules used by a site.\nThis can reduce the effort required to use the same JavaScript libraries in both browser and server.\n\nThe following sections expand on the various features outlined above.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules using import maps",
      "chunkIndex": 19,
      "totalChunks": 78,
      "startLineNumber": 204,
      "endLineNumber": 209
    }
  },
  {
    "content": "### Feature detection\n\nYou can check support for import maps using the [`HTMLScriptElement.supports()`](/en-US/docs/Web/API/HTMLScriptElement/supports_static) static method (which is itself broadly supported):\n\n```js\nif (HTMLScriptElement.supports?.(\"importmap\")) {\n  console.log(\"Browser supports import maps.\");\n}\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Feature detection",
      "chunkIndex": 20,
      "totalChunks": 78,
      "startLineNumber": 211,
      "endLineNumber": 219
    }
  },
  {
    "content": "### Importing modules as bare names\n\nIn some JavaScript environments, such as Node.js, you can use bare names for the module specifier.\nThis works because the environment can resolve module names to a standard location in the file system.\nFor example, you might use the following syntax to import the \"square\" module.\n\n```js\nimport { name, draw, reportArea, reportPerimeter } from \"square\";\n```\n\nTo use bare names on a browser you need an import map, which provides the information needed by the browser to resolve module specifiers to URLs (JavaScript will throw a `TypeError` if it attempts to import a module specifier that can't be resolved to a module location).\n\nBelow you can see a map that defines a `square` module specifier key, which in this case maps to a relative address value.\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"square\": \"./shapes/square.js\"\n    }\n  }\n</script>\n```\n\nWith this map we can now use a bare name when we import the module:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules as bare names",
      "chunkIndex": 21,
      "totalChunks": 78,
      "startLineNumber": 221,
      "endLineNumber": 245
    }
  },
  {
    "content": "```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"square\": \"./shapes/square.js\"\n    }\n  }\n</script>\n```\n\nWith this map we can now use a bare name when we import the module:\n\n```js\nimport { name as squareName, draw } from \"square\";\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Importing modules as bare names",
      "chunkIndex": 22,
      "totalChunks": 78,
      "startLineNumber": 235,
      "endLineNumber": 249
    }
  },
  {
    "content": "### Remapping module paths\n\nModule specifier map entries, where both the specifier key and its associated value have a trailing forward slash (`/`), can be used as a path-prefix.\nThis allows the remapping of a whole set of import URLs from one location to another.\nIt can also be used to emulate working with \"packages and modules\", such as you might see in the Node ecosystem.\n\n> [!NOTE]\n> The trailing `/` indicates that the module specifier key can be substituted as _part_ of a module specifier.\n> If this is not present, the browser will only match (and substitute) the whole module specifier key.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Remapping module paths",
      "chunkIndex": 23,
      "totalChunks": 78,
      "startLineNumber": 251,
      "endLineNumber": 259
    }
  },
  {
    "content": "#### Packages of modules\n\nThe following JSON import map definition maps `lodash` as a bare name, and the module specifier prefix `lodash/` to the path `/node_modules/lodash-es/` (resolved to the document base URL):\n\n```json\n{\n  \"imports\": {\n    \"lodash\": \"/node_modules/lodash-es/lodash.js\",\n    \"lodash/\": \"/node_modules/lodash-es/\"\n  }\n}\n```\n\nWith this mapping you can import both the whole \"package\", using the bare name, and modules within it (using the path mapping):\n\n```js\nimport _ from \"lodash\";\nimport fp from \"lodash/fp.js\";\n```\n\nIt is possible to import `fp` above without the `.js` file extension, but you would need to create a bare module specifier key for that file, such as `lodash/fp`, rather than using the path.\nThis may be reasonable for just one module, but scales poorly if you wish to import many modules.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Packages of modules",
      "chunkIndex": 24,
      "totalChunks": 78,
      "startLineNumber": 261,
      "endLineNumber": 282
    }
  },
  {
    "content": "#### General URL remapping\n\nA module specifier key doesn't have to be path — it can also be an absolute URL (or a URL-like relative path like `./`, `../`, `/`).\nThis may be useful if you want to remap a module that has absolute paths to a resource with your own local resources.\n\n```json\n{\n  \"imports\": {\n    \"https://www.unpkg.com/moment/\": \"/node_modules/moment/\"\n  }\n}\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "General URL remapping",
      "chunkIndex": 25,
      "totalChunks": 78,
      "startLineNumber": 284,
      "endLineNumber": 295
    }
  },
  {
    "content": "### Scoped modules for version management\n\nEcosystems like Node use package managers such as npm to manage modules and their dependencies.\nThe package manager ensures that each module is separated from other modules and their dependencies.\nAs a result, while a complex application might include the same module multiple times with several different versions in different parts of the module graph, users do not need to think about this complexity.\n\n> [!NOTE]\n> You can also achieve version management using relative paths, but this is subpar because, among other things, this forces a particular structure on your project, and prevents you from using bare module names.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoped modules for version management",
      "chunkIndex": 26,
      "totalChunks": 78,
      "startLineNumber": 297,
      "endLineNumber": 304
    }
  },
  {
    "content": "Import maps similarly allow you to have multiple versions of dependencies in your application and refer to them using the same module specifier.\nYou implement this with the `scopes` key, which allows you to provide module specifier maps that will be used depending on the path of the script performing the import.\nThe example below demonstrates this.\n\n```json\n{\n  \"imports\": {\n    \"cool-module\": \"/node_modules/cool-module/index.js\"\n  },\n  \"scopes\": {\n    \"/node_modules/dependency/\": {\n      \"cool-module\": \"/node_modules/some/other/location/cool-module/index.js\"\n    }\n  }\n}\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoped modules for version management",
      "chunkIndex": 27,
      "totalChunks": 78,
      "startLineNumber": 306,
      "endLineNumber": 321
    }
  },
  {
    "content": "With this mapping, if a script with an URL that contains `/node_modules/dependency/` imports `cool-module`, the version in `/node_modules/some/other/location/cool-module/index.js` will be used.\nThe map in `imports` is used as a fallback if there is no matching scope in the scoped map, or the matching scopes don't contain a matching specifier. For example, if `cool-module` is imported from a script with a non-matching scope path, then the module specifier map in `imports` will be used instead, mapping to the version in `/node_modules/cool-module/index.js`.\n\nNote that the path used to select a scope does not affect how the address is resolved.\nThe value in the mapped path does not have to match the scopes path, and relative paths are still resolved to the base URL of the script that contains the import map.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoped modules for version management",
      "chunkIndex": 28,
      "totalChunks": 78,
      "startLineNumber": 323,
      "endLineNumber": 327
    }
  },
  {
    "content": "Just as for module specifier maps, you can have many scope keys, and these may contain overlapping paths.\nIf multiple scopes match the referrer URL, then the most specific scope path is checked first (the longest scope key) for a matching specifier.\nThe browsers will fall back to the next most specific matching scoped path if there is no matching specifier, and so on.\nIf there is no matching specifier in any of the matching scopes, the browser checks for a match in the module specifier map in the `imports` key.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Scoped modules for version management",
      "chunkIndex": 29,
      "totalChunks": 78,
      "startLineNumber": 329,
      "endLineNumber": 332
    }
  },
  {
    "content": "### Improve caching by mapping away hashed filenames\n\nScript files used by websites often have hashed filenames to simplify caching.\nThe downside of this approach is that if a module changes, any modules that import it using its hashed filename will also need to be updated/regenerated.\nThis potentially results in a cascade of updates, which is wasteful of network resources.\n\nImport maps provide a convenient solution to this problem.\nRather than depending on specific hashed filenames, applications and scripts instead depend on an un-hashed version of the module name (address).\nAn import map like the one below then provides a mapping to the actual script file.\n\n```json\n{\n  \"imports\": {\n    \"main_script\": \"/node/srcs/application-fg7744e1b.js\",\n    \"dependency_script\": \"/node/srcs/dependency-3qn7e4b1q.js\"\n  }\n}\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Improve caching by mapping away hashed filenames",
      "chunkIndex": 30,
      "totalChunks": 78,
      "startLineNumber": 334,
      "endLineNumber": 351
    }
  },
  {
    "content": "```json\n{\n  \"imports\": {\n    \"main_script\": \"/node/srcs/application-fg7744e1b.js\",\n    \"dependency_script\": \"/node/srcs/dependency-3qn7e4b1q.js\"\n  }\n}\n```\n\nIf `dependency_script` changes, then its hash contained in the file name changes as well. In this case, we only need to update the import map to reflect the changed name of the module.\nWe don't have to update the source of any JavaScript code that depends on it, because the specifier in the import statement does not change.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Improve caching by mapping away hashed filenames",
      "chunkIndex": 31,
      "totalChunks": 78,
      "startLineNumber": 344,
      "endLineNumber": 354
    }
  },
  {
    "content": "## Loading non-JavaScript resources\n\nOne exciting feature that a unified module architecture brings is the ability to load non-JavaScript resources as modules. For example, you can import JSON as a JavaScript object, or import CSS as a {{domxref(\"CSSStyleSheet\")}} object.\n\nYou must explicitly declare what kind of resource you are importing. By default, the browser assumes that the resource is JavaScript, and will throw an error if the resolved resource is something else. To import JSON, CSS, or other types of resource, use the [import attributes](/en-US/docs/Web/JavaScript/Reference/Statements/import/with) syntax:\n\n```js\nimport colors from \"./colors.json\" with { type: \"json\" };\nimport styles from \"./styles.css\" with { type: \"css\" };\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loading non-JavaScript resources",
      "chunkIndex": 32,
      "totalChunks": 78,
      "startLineNumber": 356,
      "endLineNumber": 365
    }
  },
  {
    "content": "```js\nimport colors from \"./colors.json\" with { type: \"json\" };\nimport styles from \"./styles.css\" with { type: \"css\" };\n```\n\nBrowsers will also perform validation on the module type, and fail if, for example, `./data.json` does not resolve to a JSON file. This ensures that you don't accidentally execute code when you just intend to import data. Once imported successfully, you can now use the imported value as a normal JavaScript object or `CSSStyleSheet` object.\n\n```js\nconsole.log(colors.map((color) => color.value));\ndocument.adoptedStyleSheets = [styles];\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Loading non-JavaScript resources",
      "chunkIndex": 33,
      "totalChunks": 78,
      "startLineNumber": 362,
      "endLineNumber": 372
    }
  },
  {
    "content": "## Applying the module to your HTML\n\nNow we just need to apply the `main.js` module to our HTML page. This is very similar to how we apply a regular script to a page, with a few notable differences.\n\nFirst of all, you need to include `type=\"module\"` in the [`<script>`](/en-US/docs/Web/HTML/Reference/Elements/script) element, to declare this script as a module. To import the `main.js` script, we use this:\n\n```html\n<script type=\"module\" src=\"main.js\"></script>\n```\n\nYou can also embed the module's script directly into the HTML file by placing the JavaScript code within the body of the `<script>` element:\n\n```html\n<script type=\"module\">\n  /* JavaScript module code here */\n</script>\n```\n\nYou can only use `import` and `export` statements inside modules, not regular scripts. An error will be thrown if your `<script>` element doesn't have the `type=\"module\"` attribute and attempts to import other modules. For example:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Applying the module to your HTML",
      "chunkIndex": 34,
      "totalChunks": 78,
      "startLineNumber": 374,
      "endLineNumber": 392
    }
  },
  {
    "content": "```html example-bad\n<script>\n  import _ from \"lodash\"; // SyntaxError: import declarations may only appear at top level of a module\n  // …\n</script>\n<script src=\"a-module-using-import-statements.js\"></script>\n<!-- SyntaxError: import declarations may only appear at top level of a module -->\n```\n\nYou should generally define all your modules in separate files. Modules declared inline in HTML can only import other modules, but anything they export will not be accessible by other modules (because they don't have a URL).\n\n> [!NOTE]\n> Modules and their dependencies can be preloaded by specifying them in [`<link>`](/en-US/docs/Web/HTML/Reference/Elements/link) elements with [`rel=\"modulepreload\"`](/en-US/docs/Web/HTML/Reference/Attributes/rel/modulepreload).\n> This can significantly reduce load time when the modules are used.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Applying the module to your HTML",
      "chunkIndex": 35,
      "totalChunks": 78,
      "startLineNumber": 394,
      "endLineNumber": 407
    }
  },
  {
    "content": "## Other differences between modules and classic scripts",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other differences between modules and classic scripts",
      "chunkIndex": 36,
      "totalChunks": 78,
      "startLineNumber": 409,
      "endLineNumber": 409
    }
  },
  {
    "content": "- You need to pay attention to local testing — if you try to load the HTML file locally (i.e., with a `file://` URL), you'll run into CORS errors due to JavaScript module security requirements. You need to do your testing through a server.\n- Also, note that you might get different behavior from sections of script defined inside modules as opposed to in classic scripts. This is because modules use {{jsxref(\"Strict_mode\", \"strict mode\", \"\", 1)}} automatically.\n- There is no need to use the `defer` attribute (see [`<script>` attributes](/en-US/docs/Web/HTML/Reference/Elements/script#attributes)) when loading a module script; modules are deferred automatically.\n- Modules are only executed once, even if they have been referenced in multiple `<script>` tags.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other differences between modules and classic scripts",
      "chunkIndex": 37,
      "totalChunks": 78,
      "startLineNumber": 411,
      "endLineNumber": 414
    }
  },
  {
    "content": "- Modules are only executed once, even if they have been referenced in multiple `<script>` tags.\n- Last but not least, let's make this clear — module features are imported into the scope of a single script — they aren't available in the global scope. Therefore, you will only be able to access imported features in the script they are imported into, and you won't be able to access them from the JavaScript console, for example. You'll still get syntax errors shown in the DevTools, but you'll not be able to use some of the debugging techniques you might have expected to use.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other differences between modules and classic scripts",
      "chunkIndex": 38,
      "totalChunks": 78,
      "startLineNumber": 414,
      "endLineNumber": 415
    }
  },
  {
    "content": "Module-defined variables are scoped to the module unless explicitly attached to the global object. On the other hand, globally-defined variables are available within the module. For example, given the following code:\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title></title>\n    <link rel=\"stylesheet\" href=\"\" />\n  </head>\n  <body>\n    <div id=\"main\"></div>\n    <script>\n      // A var statement creates a global variable.\n      var text = \"Hello\";\n    </script>\n    <script type=\"module\" src=\"./render.js\"></script>\n  </body>\n</html>\n```\n\n```js\n/* render.js */\ndocument.getElementById(\"main\").innerText = text;\n```\n\nThe page would still render `Hello`, because the global variables `text` and `document` are available in the module. (Also note from this example that a module doesn't necessarily need an import/export statement — the only thing needed is for the entry point to have `type=\"module\"`.)",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other differences between modules and classic scripts",
      "chunkIndex": 39,
      "totalChunks": 78,
      "startLineNumber": 417,
      "endLineNumber": 443
    }
  },
  {
    "content": "## Default exports versus named exports\n\nThe functionality we've exported so far has been comprised of **named exports** — each item (be it a function, `const`, etc.) has been referred to by its name upon export, and that name has been used to refer to it on import as well.\n\nThere is also a type of export called the **default export** — this is designed to make it easy to have a default function provided by a module, and also helps JavaScript modules to interoperate with existing CommonJS and AMD module systems (as explained nicely in [ES6 In Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) by Jason Orendorff; search for \"Default exports\").\n\nLet's look at an example as we explain how it works. In our basic-modules `square.js` you can find a function called `randomSquare()` that creates a square with a random color, size, and position. We want to export this as our default, so at the bottom of the file we write this:\n\n```js\nexport default randomSquare;\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Default exports versus named exports",
      "chunkIndex": 40,
      "totalChunks": 78,
      "startLineNumber": 445,
      "endLineNumber": 455
    }
  },
  {
    "content": "```js\nexport default randomSquare;\n```\n\nNote the lack of curly braces.\n\nWe could instead prepend `export default` onto the function and define it as an anonymous function, like this:\n\n```js\nexport default function (ctx) {\n  // …\n}\n```\n\nOver in our `main.js` file, we import the default function using this line:\n\n```js\nimport randomSquare from \"./modules/square.js\";\n```\n\nAgain, note the lack of curly braces. This is because there is only one default export allowed per module, and we know that `randomSquare` is it. The above line is basically shorthand for:\n\n```js\nimport { default as randomSquare } from \"./modules/square.js\";\n```\n\n> [!NOTE]\n> The as syntax for renaming exported items is explained below in the [Renaming imports and exports](#renaming_imports_and_exports) section.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Default exports versus named exports",
      "chunkIndex": 41,
      "totalChunks": 78,
      "startLineNumber": 453,
      "endLineNumber": 480
    }
  },
  {
    "content": "## Avoiding naming conflicts\n\nSo far, our canvas shape drawing modules seem to be working OK. But what happens if we try to add a module that deals with drawing another shape, like a circle or triangle? These shapes would probably have associated functions like `draw()`, `reportArea()`, etc. too; if we tried to import different functions of the same name into the same top-level module file, we'd end up with conflicts and errors.\n\nFortunately there are a number of ways to get around this. We'll look at these in the following sections.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Avoiding naming conflicts",
      "chunkIndex": 42,
      "totalChunks": 78,
      "startLineNumber": 482,
      "endLineNumber": 486
    }
  },
  {
    "content": "## Renaming imports and exports\n\nInside your `import` and `export` statement's curly braces, you can use the keyword `as` along with a new feature name, to change the identifying name you will use for a feature inside the top-level module.\n\nSo for example, both of the following would do the same job, albeit in a slightly different way:\n\n```js\n// -- module.js --\nexport { function1 as newFunctionName, function2 as anotherNewFunctionName };\n\n// -- main.js --\nimport { newFunctionName, anotherNewFunctionName } from \"./modules/module.js\";\n```\n\n```js\n// -- module.js --\nexport { function1, function2 };\n\n// -- main.js --\nimport {\n  function1 as newFunctionName,\n  function2 as anotherNewFunctionName,\n} from \"./modules/module.js\";\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Renaming imports and exports",
      "chunkIndex": 43,
      "totalChunks": 78,
      "startLineNumber": 488,
      "endLineNumber": 511
    }
  },
  {
    "content": "```js\n// -- module.js --\nexport { function1, function2 };\n\n// -- main.js --\nimport {\n  function1 as newFunctionName,\n  function2 as anotherNewFunctionName,\n} from \"./modules/module.js\";\n```\n\nLet's look at a real example. In our [renaming](https://github.com/mdn/js-examples/tree/main/module-examples/renaming) directory you'll see the same module system as in the previous example, except that we've added `circle.js` and `triangle.js` modules to draw and report on circles and triangles.\n\nInside each of these modules, we've got features with the same names being exported, and therefore each has the same `export` statement at the bottom:\n\n```js\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nWhen importing these into `main.js`, if we tried to use",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Renaming imports and exports",
      "chunkIndex": 44,
      "totalChunks": 78,
      "startLineNumber": 502,
      "endLineNumber": 521
    }
  },
  {
    "content": "```js\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nWhen importing these into `main.js`, if we tried to use\n\n```js\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/square.js\";\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/circle.js\";\nimport { name, draw, reportArea, reportPerimeter } from \"./modules/triangle.js\";\n```\n\nThe browser would throw an error such as \"SyntaxError: redeclaration of import name\" (Firefox).\n\nInstead we need to rename the imports so that they are unique:\n\n```js\nimport {\n  name as squareName,\n  draw as drawSquare,\n  reportArea as reportSquareArea,\n  reportPerimeter as reportSquarePerimeter,\n} from \"./modules/square.js\";\n\nimport {\n  name as circleName,\n  draw as drawCircle,\n  reportArea as reportCircleArea,\n  reportPerimeter as reportCirclePerimeter,\n} from \"./modules/circle.js\";",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Renaming imports and exports",
      "chunkIndex": 45,
      "totalChunks": 78,
      "startLineNumber": 517,
      "endLineNumber": 546
    }
  },
  {
    "content": "import {\n  name as circleName,\n  draw as drawCircle,\n  reportArea as reportCircleArea,\n  reportPerimeter as reportCirclePerimeter,\n} from \"./modules/circle.js\";\n\nimport {\n  name as triangleName,\n  draw as drawTriangle,\n  reportArea as reportTriangleArea,\n  reportPerimeter as reportTrianglePerimeter,\n} from \"./modules/triangle.js\";\n```\n\nNote that you could solve the problem in the module files instead, e.g.\n\n```js\n// in square.js\nexport {\n  name as squareName,\n  draw as drawSquare,\n  reportArea as reportSquareArea,\n  reportPerimeter as reportSquarePerimeter,\n};\n```\n\n```js\n// in main.js\nimport {\n  squareName,\n  drawSquare,\n  reportSquareArea,\n  reportSquarePerimeter,\n} from \"./modules/square.js\";\n```\n\nAnd it would work just the same. What style you use is up to you, however it arguably makes more sense to leave your module code alone, and make the changes in the imports. This especially makes sense when you are importing from third party modules that you don't have any control over.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Renaming imports and exports",
      "chunkIndex": 46,
      "totalChunks": 78,
      "startLineNumber": 541,
      "endLineNumber": 578
    }
  },
  {
    "content": "## Creating a module object\n\nThe above method works OK, but it's a little messy and long-winded. An even better solution is to import each module's features inside a module object. The following syntax form does that:\n\n```js\nimport * as Module from \"./modules/module.js\";\n```\n\nThis grabs all the exports available inside `module.js`, and makes them available as members of an object `Module`, effectively giving it its own namespace. So for example:\n\n```js\nModule.function1();\nModule.function2();\n```\n\nAgain, let's look at a real example. If you go to our [module-objects](https://github.com/mdn/js-examples/tree/main/module-examples/module-objects) directory, you'll see the same example again, but rewritten to take advantage of this new syntax. In the modules, the exports are all in the following simple form:\n\n```js\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nThe imports on the other hand look like this:\n\n```js\nimport * as Canvas from \"./modules/canvas.js\";",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating a module object",
      "chunkIndex": 47,
      "totalChunks": 78,
      "startLineNumber": 580,
      "endLineNumber": 604
    }
  },
  {
    "content": "```js\nexport { name, draw, reportArea, reportPerimeter };\n```\n\nThe imports on the other hand look like this:\n\n```js\nimport * as Canvas from \"./modules/canvas.js\";\n\nimport * as Square from \"./modules/square.js\";\nimport * as Circle from \"./modules/circle.js\";\nimport * as Triangle from \"./modules/triangle.js\";\n```\n\nIn each case, you can now access the module's imports underneath the specified object name, for example:\n\n```js\nconst square = Square.draw(myCanvas.ctx, 50, 50, 100, \"blue\");\nSquare.reportArea(square.length, reportList);\nSquare.reportPerimeter(square.length, reportList);\n```\n\nSo you can now write the code just the same as before (as long as you include the object names where needed), and the imports are much neater.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating a module object",
      "chunkIndex": 48,
      "totalChunks": 78,
      "startLineNumber": 597,
      "endLineNumber": 619
    }
  },
  {
    "content": "## Modules and classes\n\nAs we hinted at earlier, you can also export and import classes; this is another option for avoiding conflicts in your code, and is especially useful if you've already got your module code written in an object-oriented style.\n\nYou can see an example of our shape drawing module rewritten with ES classes in our [classes](https://github.com/mdn/js-examples/tree/main/module-examples/classes) directory. As an example, the [`square.js`](https://github.com/mdn/js-examples/blob/main/module-examples/classes/modules/square.js) file now contains all its functionality in a single class:\n\n```js\nclass Square {\n  constructor(ctx, listId, length, x, y, color) {\n    // …\n  }\n\n  draw() {\n    // …\n  }\n\n  // …\n}\n```\n\nwhich we then export:\n\n```js\nexport { Square };\n```\n\nOver in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/classes/main.js), we import it like this:\n\n```js\nimport { Square } from \"./modules/square.js\";\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Modules and classes",
      "chunkIndex": 49,
      "totalChunks": 78,
      "startLineNumber": 621,
      "endLineNumber": 651
    }
  },
  {
    "content": "Over in [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/classes/main.js), we import it like this:\n\n```js\nimport { Square } from \"./modules/square.js\";\n```\n\nAnd then use the class to draw our square:\n\n```js\nconst square = new Square(myCanvas.ctx, myCanvas.listId, 50, 50, 100, \"blue\");\nsquare.draw();\nsquare.reportArea();\nsquare.reportPerimeter();\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Modules and classes",
      "chunkIndex": 50,
      "totalChunks": 78,
      "startLineNumber": 647,
      "endLineNumber": 660
    }
  },
  {
    "content": "## Aggregating modules\n\nThere will be times where you'll want to aggregate modules together. You might have multiple levels of dependencies, where you want to simplify things, combining several submodules into one parent module. This is possible using export syntax of the following forms in the parent module:\n\n```js\nexport * from \"x.js\";\nexport { name } from \"x.js\";\n```\n\nFor an example, see our [module-aggregation](https://github.com/mdn/js-examples/tree/main/module-examples/module-aggregation) directory. In this example (based on our earlier classes example) we've got an extra module called `shapes.js`, which aggregates all the functionality from `circle.js`, `square.js`, and `triangle.js` together. We've also moved our submodules inside a subdirectory inside the `modules` directory called `shapes`. So the module structure in this example is:\n\n```plain\nmodules/\n  canvas.js\n  shapes.js\n  shapes/\n    circle.js\n    square.js\n    triangle.js\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aggregating modules",
      "chunkIndex": 51,
      "totalChunks": 78,
      "startLineNumber": 662,
      "endLineNumber": 681
    }
  },
  {
    "content": "```plain\nmodules/\n  canvas.js\n  shapes.js\n  shapes/\n    circle.js\n    square.js\n    triangle.js\n```\n\nIn each of the submodules, the export is of the same form, e.g.\n\n```js\nexport { Square };\n```\n\nNext up comes the aggregation part. Inside [`shapes.js`](https://github.com/mdn/js-examples/blob/main/module-examples/module-aggregation/modules/shapes.js), we include the following lines:\n\n```js\nexport { Square } from \"./shapes/square.js\";\nexport { Triangle } from \"./shapes/triangle.js\";\nexport { Circle } from \"./shapes/circle.js\";\n```\n\nThese grab the exports from the individual submodules and effectively make them available from the `shapes.js` module.\n\n> [!NOTE]\n> The exports referenced in `shapes.js` basically get redirected through the file and don't really exist there, so you won't be able to write any useful related code inside the same file.\n\nSo now in the `main.js` file, we can get access to all three module classes by replacing",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aggregating modules",
      "chunkIndex": 52,
      "totalChunks": 78,
      "startLineNumber": 673,
      "endLineNumber": 702
    }
  },
  {
    "content": "So now in the `main.js` file, we can get access to all three module classes by replacing\n\n```js\nimport { Square } from \"./modules/square.js\";\nimport { Circle } from \"./modules/circle.js\";\nimport { Triangle } from \"./modules/triangle.js\";\n```\n\nwith the following single line:\n\n```js\nimport { Square, Circle, Triangle } from \"./modules/shapes.js\";\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Aggregating modules",
      "chunkIndex": 53,
      "totalChunks": 78,
      "startLineNumber": 702,
      "endLineNumber": 714
    }
  },
  {
    "content": "## Dynamic module loading\n\nA recent addition to JavaScript modules functionality is dynamic module loading. This allows you to dynamically load modules only when they are needed, rather than having to load everything up front. This has some obvious performance advantages; let's read on and see how it works.\n\nThis new functionality allows you to call [`import()`](/en-US/docs/Web/JavaScript/Reference/Operators/import) as a function, passing it the path to the module as a parameter. It returns a {{jsxref(\"Promise\")}}, which fulfills with a module object (see [Creating a module object](#creating_a_module_object)) giving you access to that object's exports. For example:\n\n```js\nimport(\"./modules/myModule.js\").then((module) => {\n  // Do something with the module.\n});\n```\n\n> [!NOTE]\n> Dynamic import is permitted in the browser main thread, and in shared and dedicated workers.\n> However `import()` will throw if called in a service worker or worklet.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic module loading",
      "chunkIndex": 54,
      "totalChunks": 78,
      "startLineNumber": 716,
      "endLineNumber": 730
    }
  },
  {
    "content": "> [!NOTE]\n> Dynamic import is permitted in the browser main thread, and in shared and dedicated workers.\n> However `import()` will throw if called in a service worker or worklet.\n\n<!-- https://whatpr.org/html/6395/webappapis.html#hostimportmoduledynamically(referencingscriptormodule,-specifier,-promisecapability) -->\n\nLet's look at an example. In the [dynamic-module-imports](https://github.com/mdn/js-examples/tree/main/module-examples/dynamic-module-imports) directory we've got another example based on our classes example. This time however we are not drawing anything on the canvas when the example loads. Instead, we include three buttons — \"Circle\", \"Square\", and \"Triangle\" — that, when pressed, dynamically load the required module and then use it to draw the associated shape.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic module loading",
      "chunkIndex": 55,
      "totalChunks": 78,
      "startLineNumber": 728,
      "endLineNumber": 734
    }
  },
  {
    "content": "In this example we've only made changes to our [`index.html`](https://github.com/mdn/js-examples/blob/main/module-examples/dynamic-module-imports/index.html) and [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/dynamic-module-imports/main.js) files — the module exports remain the same as before.\n\nOver in `main.js` we've grabbed a reference to each button using a [`document.querySelector()`](/en-US/docs/Web/API/Document/querySelector) call, for example:\n\n```js\nconst squareBtn = document.querySelector(\".square\");\n```\n\nWe then attach an event listener to each button so that when pressed, the relevant module is dynamically loaded and used to draw the shape:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic module loading",
      "chunkIndex": 56,
      "totalChunks": 78,
      "startLineNumber": 736,
      "endLineNumber": 744
    }
  },
  {
    "content": "We then attach an event listener to each button so that when pressed, the relevant module is dynamically loaded and used to draw the shape:\n\n```js\nsquareBtn.addEventListener(\"click\", () => {\n  import(\"./modules/square.js\").then((Module) => {\n    const square = new Module.Square(\n      myCanvas.ctx,\n      myCanvas.listId,\n      50,\n      50,\n      100,\n      \"blue\",\n    );\n    square.draw();\n    square.reportArea();\n    square.reportPerimeter();\n  });\n});\n```\n\nNote that, because the promise fulfillment returns a module object, the class is then made a subfeature of the object, hence we now need to access the constructor with `Module.` prepended to it, e.g., `Module.Square( /* … */ )`.\n\nAnother advantage of dynamic imports is that they are always available, even in script environments. Therefore, if you have an existing `<script>` tag in your HTML that doesn't have `type=\"module\"`, you can still reuse code distributed as modules by dynamically importing it.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic module loading",
      "chunkIndex": 57,
      "totalChunks": 78,
      "startLineNumber": 744,
      "endLineNumber": 766
    }
  },
  {
    "content": "```html\n<script>\n  import(\"./modules/square.js\").then((module) => {\n    // Do something with the module.\n  });\n  // Other code that operates on the global scope and is not\n  // ready to be refactored into modules yet.\n  var btn = document.querySelector(\".square\");\n</script>\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Dynamic module loading",
      "chunkIndex": 58,
      "totalChunks": 78,
      "startLineNumber": 768,
      "endLineNumber": 777
    }
  },
  {
    "content": "## Top level await\n\nTop level await is a feature available within modules. This means the `await` keyword can be used. It allows modules to act as big [asynchronous functions](/en-US/docs/Learn_web_development/Extensions/Async_JS/Introducing) meaning code can be evaluated before use in parent modules, but without blocking sibling modules from loading.\n\nLet's take a look at an example. You can find all the files and code described in this section within the [`top-level-await`](https://github.com/mdn/js-examples/tree/main/module-examples/top-level-await) directory, which extends from the previous examples.\n\nFirstly we'll declare our color palette in a separate [`colors.json`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/data/colors.json) file:\n\n```json\n{\n  \"yellow\": \"#F4D03F\",\n  \"green\": \"#52BE80\",\n  \"blue\": \"#5499C7\",\n  \"red\": \"#CD6155\",\n  \"orange\": \"#F39C12\"\n}\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Top level await",
      "chunkIndex": 59,
      "totalChunks": 78,
      "startLineNumber": 779,
      "endLineNumber": 795
    }
  },
  {
    "content": "```json\n{\n  \"yellow\": \"#F4D03F\",\n  \"green\": \"#52BE80\",\n  \"blue\": \"#5499C7\",\n  \"red\": \"#CD6155\",\n  \"orange\": \"#F39C12\"\n}\n```\n\nThen we'll create a module called [`getColors.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/getColors.js) which uses a fetch request to load the [`colors.json`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/data/colors.json) file and return the data as an object.\n\n```js\n// fetch request\nconst colors = fetch(\"../data/colors.json\").then((response) => response.json());\n\nexport default await colors;\n```\n\nNotice the last export line here.\n\nWe're using the keyword `await` before specifying the constant `colors` to export. This means any other modules which include this one will wait until `colors` has been downloaded and parsed before using it.\n\nLet's include this module in our [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/main.js) file:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Top level await",
      "chunkIndex": 60,
      "totalChunks": 78,
      "startLineNumber": 787,
      "endLineNumber": 810
    }
  },
  {
    "content": "Let's include this module in our [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/main.js) file:\n\n```js\nimport colors from \"./modules/getColors.js\";\nimport { Canvas } from \"./modules/canvas.js\";\n\nconst circleBtn = document.querySelector(\".circle\");\n\n// …\n```\n\nWe'll use `colors` instead of the previously used strings when calling our shape functions:\n\n```js\nconst square = new Module.Square(\n  myCanvas.ctx,\n  myCanvas.listId,\n  50,\n  50,\n  100,\n  colors.blue,\n);\n\nconst circle = new Module.Circle(\n  myCanvas.ctx,\n  myCanvas.listId,\n  75,\n  200,\n  100,\n  colors.green,\n);\n\nconst triangle = new Module.Triangle(\n  myCanvas.ctx,\n  myCanvas.listId,\n  100,\n  75,\n  190,\n  colors.yellow,\n);\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Top level await",
      "chunkIndex": 61,
      "totalChunks": 78,
      "startLineNumber": 810,
      "endLineNumber": 850
    }
  },
  {
    "content": "const triangle = new Module.Triangle(\n  myCanvas.ctx,\n  myCanvas.listId,\n  100,\n  75,\n  190,\n  colors.yellow,\n);\n```\n\nThis is useful because the code within [`main.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/main.js) won't execute until the code in [`getColors.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/getColors.js) has run. However it won't block other modules being loaded. For instance our [`canvas.js`](https://github.com/mdn/js-examples/blob/main/module-examples/top-level-await/modules/canvas.js) module will continue to load while `colors` is being fetched.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Top level await",
      "chunkIndex": 62,
      "totalChunks": 78,
      "startLineNumber": 842,
      "endLineNumber": 852
    }
  },
  {
    "content": "## Import declarations are hoisted\n\nImport declarations are [hoisted](/en-US/docs/Glossary/Hoisting). In this case, it means that the imported values are available in the module's code even before the place that declares them, and that the imported module's side effects are produced before the rest of the module's code starts running.\n\nSo for example, in `main.js`, importing `Canvas` in the middle of the code would still work:\n\n```js\n// …\nconst myCanvas = new Canvas(\"myCanvas\", document.body, 480, 320);\nmyCanvas.create();\nimport { Canvas } from \"./modules/canvas.js\";\nmyCanvas.createReportList();\n// …\n```\n\nStill, it is considered good practice to put all your imports at the top of the code, which makes it easier to analyze dependencies.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Import declarations are hoisted",
      "chunkIndex": 63,
      "totalChunks": 78,
      "startLineNumber": 854,
      "endLineNumber": 869
    }
  },
  {
    "content": "## Cyclic imports\n\nModules can import other modules, and those modules can import other modules, and so on. This forms a [directed graph](https://en.wikipedia.org/wiki/Directed_graph) called the \"dependency graph\". In an ideal world, this graph is [acyclic](https://en.wikipedia.org/wiki/Directed_acyclic_graph). In this case, the graph can be evaluated using a depth-first traversal.\n\nHowever, cycles are often inevitable. Cyclic import arises if module `a` imports module `b`, but `b` directly or indirectly depends on `a`. For example:\n\n```js\n// -- a.js --\nimport { b } from \"./b.js\";\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\n// Cycle:\n// a.js ───> b.js\n//  ^         │\n//  └─────────┘\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cyclic imports",
      "chunkIndex": 64,
      "totalChunks": 78,
      "startLineNumber": 871,
      "endLineNumber": 888
    }
  },
  {
    "content": "```js\n// -- a.js --\nimport { b } from \"./b.js\";\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\n// Cycle:\n// a.js ───> b.js\n//  ^         │\n//  └─────────┘\n```\n\nCyclic imports don't always fail. The imported variable's value is only retrieved when the variable is actually used (hence allowing [live bindings](/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter)), and only if the variable remains uninitialized at that time will a [`ReferenceError`](/en-US/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init) be thrown.\n\n```js\n// -- a.js --\nimport { b } from \"./b.js\";\n\nsetTimeout(() => {\n  console.log(b); // 1\n}, 10);\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\n\nexport const b = 1;\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cyclic imports",
      "chunkIndex": 65,
      "totalChunks": 78,
      "startLineNumber": 877,
      "endLineNumber": 910
    }
  },
  {
    "content": "setTimeout(() => {\n  console.log(b); // 1\n}, 10);\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\n\nexport const b = 1;\n```\n\nIn this example, both `a` and `b` are used asynchronously. Therefore, at the time the module is evaluated, neither `b` nor `a` is actually read, so the rest of the code is executed as normal, and the two `export` declarations produce the values of `a` and `b`. Then, after the timeout, both `a` and `b` are available, so the two `console.log` statements also execute as normal.\n\nIf you change the code to use `a` synchronously, the module evaluation fails:\n\n```js\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\nexport const b = 1;\n```",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cyclic imports",
      "chunkIndex": 66,
      "totalChunks": 78,
      "startLineNumber": 896,
      "endLineNumber": 927
    }
  },
  {
    "content": "export const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nconsole.log(a); // ReferenceError: Cannot access 'a' before initialization\nexport const b = 1;\n```\n\nThis is because when JavaScript evaluates `a.js`, it needs to first evaluate `b.js`, the dependency of `a.js`. However, `b.js` uses `a`, which is not yet available.\n\nOn the other hand, if you change the code to use `b` synchronously but `a` asynchronously, the module evaluation succeeds:\n\n```js\n// -- a.js (entry module) --\nimport { b } from \"./b.js\";\n\nconsole.log(b); // 1\nexport const a = 2;\n\n// -- b.js --\nimport { a } from \"./a.js\";\n\nsetTimeout(() => {\n  console.log(a); // 2\n}, 10);\nexport const b = 1;\n```\n\nThis is because the evaluation of `b.js` completes normally, so the value of `b` is available when `a.js` is evaluated.\n\nYou should usually avoid cyclic imports in your project, because they make your code more error-prone. Some common cycle-elimination techniques are:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cyclic imports",
      "chunkIndex": 67,
      "totalChunks": 78,
      "startLineNumber": 920,
      "endLineNumber": 951
    }
  },
  {
    "content": "You should usually avoid cyclic imports in your project, because they make your code more error-prone. Some common cycle-elimination techniques are:\n\n- Merge the two modules into one.\n- Move the shared code into a third module.\n- Move some code from one module to the other.\n\nHowever, cyclic imports can also occur if the libraries depend on each other, which is harder to fix.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cyclic imports",
      "chunkIndex": 68,
      "totalChunks": 78,
      "startLineNumber": 951,
      "endLineNumber": 957
    }
  },
  {
    "content": "## Authoring \"isomorphic\" modules\n\nThe introduction of modules encourages the JavaScript ecosystem to distribute and reuse code in a modular fashion. However, that doesn't necessarily mean a piece of JavaScript code can run in every environment. Suppose you discovered a module that generates SHA hashes of your user's password. Can you use it in the browser front end? Can you use it on your Node.js server? The answer is: it depends.\n\nModules still have access to global variables, as demonstrated previously. If the module references globals like `window`, it can run in the browser, but will throw an error in your Node.js server, because `window` is not available there. Similarly, if the code requires access to `process` to be functional, it can only be used in Node.js.\n\nIn order to maximize the reusability of a module, it is often advised to make the code \"isomorphic\" — that is, exhibits the same behavior in every runtime. This is commonly achieved in three ways:",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Authoring \"isomorphic\" modules",
      "chunkIndex": 69,
      "totalChunks": 78,
      "startLineNumber": 959,
      "endLineNumber": 965
    }
  },
  {
    "content": "- Separate your modules into \"core\" and \"binding\". For the \"core\", focus on pure JavaScript logic like computing the hash, without any DOM, network, filesystem access, and expose utility functions. For the \"binding\" part, you can read from and write to the global context. For example, the \"browser binding\" may choose to read the value from an input box, while the \"Node binding\" may read it from `process.env`, but values read from either place will be piped to the same core function and handled in the same way. The core can be imported in every environment and used in the same way, while only the binding, which is usually lightweight, needs to be platform-specific.\n- Detect whether a particular global exists before using it. For example, if you test that `typeof window === \"undefined\"`, you know that you are probably in a Node.js environment, and should not read DOM.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Authoring \"isomorphic\" modules",
      "chunkIndex": 70,
      "totalChunks": 78,
      "startLineNumber": 967,
      "endLineNumber": 968
    }
  },
  {
    "content": "```js\n  // myModule.js\n  let password;\n  if (typeof process !== \"undefined\") {\n    // We are running in Node.js; read it from `process.env`\n    password = process.env.PASSWORD;\n  } else if (typeof window !== \"undefined\") {\n    // We are running in the browser; read it from the input box\n    password = document.getElementById(\"password\").value;\n  }\n  ```\n\n  This is preferable if the two branches actually end up with the same behavior (\"isomorphic\"). If it's impossible to provide the same functionality, or if doing so involves loading significant amounts of code while a large part remains unused, better use different \"bindings\" instead.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Authoring \"isomorphic\" modules",
      "chunkIndex": 71,
      "totalChunks": 78,
      "startLineNumber": 970,
      "endLineNumber": 982
    }
  },
  {
    "content": "- Use a polyfill to provide a fallback for missing features. For example, if you want to use the [`fetch`](/en-US/docs/Web/API/Fetch_API) function, which is only supported in Node.js since v18, you can use a similar API, like the one provided by [`node-fetch`](https://www.npmjs.com/package/node-fetch). You can do so conditionally through dynamic imports:\n\n  ```js\n  // myModule.js\n  if (typeof fetch === \"undefined\") {\n    // We are running in Node.js; use node-fetch\n    globalThis.fetch = (await import(\"node-fetch\")).default;\n  }\n  // …\n  ```\n\n  The [`globalThis`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) variable is a global object that is available in every environment and is useful if you want to read or create global variables within modules.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Authoring \"isomorphic\" modules",
      "chunkIndex": 72,
      "totalChunks": 78,
      "startLineNumber": 984,
      "endLineNumber": 995
    }
  },
  {
    "content": "These practices are not unique to modules. Still, with the trend of code reusability and modularization, you are encouraged to make your code cross-platform so that it can be enjoyed by as many people as possible. Runtimes like Node.js are also actively implementing web APIs where possible to improve interoperability with the web.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Authoring \"isomorphic\" modules",
      "chunkIndex": 73,
      "totalChunks": 78,
      "startLineNumber": 997,
      "endLineNumber": 997
    }
  },
  {
    "content": "## Troubleshooting\n\nHere are a few tips that may help you if you are having trouble getting your modules to work. Feel free to add to the list if you discover more!",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Troubleshooting",
      "chunkIndex": 74,
      "totalChunks": 78,
      "startLineNumber": 999,
      "endLineNumber": 1001
    }
  },
  {
    "content": "- We mentioned this before, but to reiterate: `.mjs` files need to be loaded with a MIME-type of `text/javascript` (or another JavaScript-compatible MIME-type, but `text/javascript` is recommended), otherwise you'll get a strict MIME type checking error like \"The server responded with a non-JavaScript MIME type\".\n- If you try to load the HTML file locally (i.e., with a `file://` URL), you'll run into CORS errors due to JavaScript module security requirements. You need to do your testing through a server. GitHub pages is ideal as it also serves `.mjs` files with the correct MIME type.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Troubleshooting",
      "chunkIndex": 75,
      "totalChunks": 78,
      "startLineNumber": 1003,
      "endLineNumber": 1004
    }
  },
  {
    "content": "- Because `.mjs` is a non-standard file extension, some operating systems might not recognize it, or try to replace it with something else. For example, we found that macOS was silently adding on `.js` to the end of `.mjs` files and then automatically hiding the file extension. So all of our files were actually coming out as `x.mjs.js`. Once we turned off automatically hiding file extensions, and trained it to accept `.mjs`, it was OK.",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Troubleshooting",
      "chunkIndex": 76,
      "totalChunks": 78,
      "startLineNumber": 1005,
      "endLineNumber": 1005
    }
  },
  {
    "content": "## See also\n\n- [JavaScript modules](https://v8.dev/features/modules) on v8.dev (2018)\n- [ES modules: A cartoon deep-dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/) on hacks.mozilla.org (2018)\n- [ES6 in Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) on hacks.mozilla.org (2015)\n- [Exploring JS, Ch.16: Modules](https://exploringjs.com/es6/ch_modules.html) by Dr. Axel Rauschmayer\n\n{{Previous(\"Web/JavaScript/Guide/Internationalization\")}}",
    "metadata": {
      "source": "modules/index.md",
      "documentSlug": "Web/JavaScript/Guide/Modules",
      "documentTitle": "JavaScript modules",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 77,
      "totalChunks": 78,
      "startLineNumber": 1007,
      "endLineNumber": 1014
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Expressions_and_operators\", \"Web/JavaScript/Guide/Representing_dates_times\")}}\n\nThis chapter introduces the two most fundamental data types in JavaScript: numbers and strings. We will introduce their underlying representations, and functions used to work with and perform calculations on them.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 33,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "## Numbers\n\nIn JavaScript, numbers are implemented in [double-precision 64-bit binary format IEEE 754](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) (i.e., a number between ±2^−1022 and ±2^+1023, or about ±10^−308 to ±10^+308, with a numeric precision of 53 bits). Integer values up to ±2^53 − 1 can be represented exactly.\n\nIn addition to being able to represent floating-point numbers, the number type has three symbolic values: {{jsxref(\"Infinity\")}}, `-Infinity`, and {{jsxref(\"NaN\")}} (not-a-number).\n\nSee also [JavaScript data types and structures](/en-US/docs/Web/JavaScript/Guide/Data_structures) for context with other primitive types in JavaScript.\n\nYou can use four types of number literals: decimal, binary, octal, and hexadecimal.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Numbers",
      "chunkIndex": 1,
      "totalChunks": 33,
      "startLineNumber": 12,
      "endLineNumber": 20
    }
  },
  {
    "content": "### Decimal numbers\n\n```js-nolint\n1234567890\n42\n```\n\nDecimal literals can start with a zero (`0`) followed by another decimal digit, but if all digits after the leading `0` are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with `0`, whether interpreted as octal or decimal, cause a syntax error in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode#legacy_octal_literals) — so, use the `0o` prefix instead.\n\n```js-nolint example-bad\n0888 // 888 parsed as decimal\n0777 // parsed as octal, 511 in decimal\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Decimal numbers",
      "chunkIndex": 2,
      "totalChunks": 33,
      "startLineNumber": 22,
      "endLineNumber": 34
    }
  },
  {
    "content": "### Binary numbers\n\nBinary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"B\" (`0b` or `0B`). If the digits after the `0b` are not 0 or 1, the following {{jsxref(\"SyntaxError\")}} is thrown: \"Missing binary digits after 0b\".\n\n```js-nolint\n0b10000000000000000000000000000000 // 2147483648\n0b01111111100000000000000000000000 // 2139095040\n0B00000000011111111111111111111111 // 8388607\n```\n\n### Octal numbers\n\nThe standard syntax for octal numbers is to prefix them with `0o`. For example:\n\n```js-nolint\n0O755 // 493\n0o644 // 420\n```\n\nThere's also a legacy syntax for octal numbers — by prefixing the octal number with a zero: `0644 === 420` and `\"\\045\" === \"%\"`. If the digits after the `0` are outside the range 0 through 7, the number will be interpreted as a decimal number.\n\n```js\nconst n = 0755; // 493\nconst m = 0644; // 420\n```\n\n[Strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) forbids this octal syntax.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Binary numbers",
      "chunkIndex": 3,
      "totalChunks": 33,
      "startLineNumber": 36,
      "endLineNumber": 62
    }
  },
  {
    "content": "### Hexadecimal numbers\n\nHexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"X\" (`0x` or `0X`). If the digits after 0x are outside the range (0123456789ABCDEF), the following {{jsxref(\"SyntaxError\")}} is thrown: \"Identifier starts immediately after numeric literal\".\n\n```js-nolint\n0xFFFFFFFFFFFFF // 4503599627370495\n0xabcdef123456  // 188900967593046\n0XA             // 10\n```\n\n### Exponentiation\n\n```js-nolint\n0e-5   // 0\n0e+5   // 0\n5e1    // 50\n175e-2 // 1.75\n1e3    // 1000\n1e-3   // 0.001\n1E3    // 1000\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Hexadecimal numbers",
      "chunkIndex": 4,
      "totalChunks": 33,
      "startLineNumber": 64,
      "endLineNumber": 84
    }
  },
  {
    "content": "## Number object\n\nThe built-in {{jsxref(\"Number\")}} object has properties for numerical constants, such as maximum value, not-a-number, and infinity. You cannot change the values of these properties and you use them as follows:\n\n```js\nconst biggestNum = Number.MAX_VALUE;\nconst smallestNum = Number.MIN_VALUE;\nconst infiniteNum = Number.POSITIVE_INFINITY;\nconst negInfiniteNum = Number.NEGATIVE_INFINITY;\nconst notANum = Number.NaN;\n```\n\nYou always refer to a property of the predefined `Number` object as shown above, and not as a property of a `Number` object you create yourself.\n\nThe following table summarizes the `Number` object's properties.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 5,
      "totalChunks": 33,
      "startLineNumber": 86,
      "endLineNumber": 100
    }
  },
  {
    "content": "| Property                               | Description                                                                                                                                |\n| -------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| {{jsxref(\"Number.MAX_VALUE\")}}         | The largest positive representable number (`1.7976931348623157e+308`)                                                                      |\n| {{jsxref(\"Number.MIN_VALUE\")}}         | The smallest positive representable number (`5e-324`)                                                                                      |\n| {{jsxref(\"Number.NaN\")}}               | Special \"not a number\" value                                                                                                               |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 6,
      "totalChunks": 33,
      "startLineNumber": 102,
      "endLineNumber": 106
    }
  },
  {
    "content": "| {{jsxref(\"Number.NaN\")}}               | Special \"not a number\" value                                                                                                               |\n| {{jsxref(\"Number.NEGATIVE_INFINITY\")}} | Special negative infinite value; returned on overflow                                                                                      |\n| {{jsxref(\"Number.POSITIVE_INFINITY\")}} | Special positive infinite value; returned on overflow                                                                                      |\n| {{jsxref(\"Number.EPSILON\")}}           | Difference between `1` and the smallest value greater than `1` that can be represented as a {{jsxref(\"Number\")}} (`2.220446049250313e-16`) |\n| {{jsxref(\"Number.MIN_SAFE_INTEGER\")}}  | Minimum safe integer in JavaScript (−2^53 + 1, or `−9007199254740991`)                                                                     |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 7,
      "totalChunks": 33,
      "startLineNumber": 106,
      "endLineNumber": 110
    }
  },
  {
    "content": "| {{jsxref(\"Number.MIN_SAFE_INTEGER\")}}  | Minimum safe integer in JavaScript (−2^53 + 1, or `−9007199254740991`)                                                                     |\n| {{jsxref(\"Number.MAX_SAFE_INTEGER\")}}  | Maximum safe integer in JavaScript (+2^53 − 1, or `+9007199254740991`)                                                                     |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 8,
      "totalChunks": 33,
      "startLineNumber": 110,
      "endLineNumber": 111
    }
  },
  {
    "content": "| Method                               | Description                                                                                                                           |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------- |\n| {{jsxref(\"Number.parseFloat()\")}}    | Parses a string argument and returns a floating point number. Same as the global {{jsxref(\"parseFloat()\")}} function.                 |\n| {{jsxref(\"Number.parseInt()\")}}      | Parses a string argument and returns an integer of the specified radix or base. Same as the global {{jsxref(\"parseInt()\")}} function. |\n| {{jsxref(\"Number.isFinite()\")}}      | Determines whether the passed value is a finite number.                                                                               |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 9,
      "totalChunks": 33,
      "startLineNumber": 113,
      "endLineNumber": 117
    }
  },
  {
    "content": "| {{jsxref(\"Number.isFinite()\")}}      | Determines whether the passed value is a finite number.                                                                               |\n| {{jsxref(\"Number.isInteger()\")}}     | Determines whether the passed value is an integer.                                                                                    |\n| {{jsxref(\"Number.isNaN()\")}}         | Determines whether the passed value is {{jsxref(\"NaN\")}}. More robust version of the original global {{jsxref(\"isNaN()\")}}.           |\n| {{jsxref(\"Number.isSafeInteger()\")}} | Determines whether the provided value is a number that is a _safe integer_.                                                           |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 10,
      "totalChunks": 33,
      "startLineNumber": 117,
      "endLineNumber": 120
    }
  },
  {
    "content": "The `Number` prototype provides methods for retrieving information from `Number` objects in various formats. The following table summarizes the methods of `Number.prototype`.\n\n| Method                                                | Description                                                                                |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n| {{jsxref(\"Number/toExponential\", \"toExponential()\")}} | Returns a string representing the number in exponential notation.                          |\n| {{jsxref(\"Number/toFixed\", \"toFixed()\")}}             | Returns a string representing the number in fixed-point notation.                          |\n| {{jsxref(\"Number/toPrecision\", \"toPrecision()\")}}     | Returns a string representing the number to a specified precision in fixed-point notation. |",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Number object",
      "chunkIndex": 11,
      "totalChunks": 33,
      "startLineNumber": 122,
      "endLineNumber": 128
    }
  },
  {
    "content": "## Math object\n\nThe built-in {{jsxref(\"Math\")}} object has properties and methods for mathematical constants and functions. For example, the `Math` object's `PI` property has the value of pi (3.141…), which you would use in an application as\n\n```js\nMath.PI;\n```\n\nSimilarly, standard mathematical functions are methods of `Math`. These include trigonometric, logarithmic, exponential, and other functions. For example, if you want to use the trigonometric function sine, you would write\n\n```js\nMath.sin(1.56);\n```\n\nNote that all trigonometric methods of `Math` take arguments in radians.\n\nThe following table summarizes the `Math` object's methods.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 12,
      "totalChunks": 33,
      "startLineNumber": 130,
      "endLineNumber": 146
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <caption>\n    Methods of\n    <code>Math</code>\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Method</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>{{jsxref(\"Math.abs\", \"abs()\")}}</td>\n      <td>Absolute value</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.sin\", \"sin()\")}},\n        {{jsxref(\"Math.cos\", \"cos()\")}},\n        {{jsxref(\"Math.tan\", \"tan()\")}}\n      </td>\n      <td>Standard trigonometric functions; with the argument in radians.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.asin\", \"asin()\")}},\n        {{jsxref(\"Math.acos\", \"acos()\")}},\n        {{jsxref(\"Math.atan\", \"atan()\")}},\n        {{jsxref(\"Math.atan2\", \"atan2()\")}}\n      </td>\n      <td>Inverse trigonometric functions; return values in radians.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.sinh\", \"sinh()\")}},\n        {{jsxref(\"Math.cosh\", \"cosh()\")}},\n        {{jsxref(\"Math.tanh\", \"tanh()\")}}",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 13,
      "totalChunks": 33,
      "startLineNumber": 148,
      "endLineNumber": 185
    }
  },
  {
    "content": "</tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.sinh\", \"sinh()\")}},\n        {{jsxref(\"Math.cosh\", \"cosh()\")}},\n        {{jsxref(\"Math.tanh\", \"tanh()\")}}\n      </td>\n      <td>Hyperbolic functions; argument in hyperbolic angle.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.asinh\", \"asinh()\")}},\n        {{jsxref(\"Math.acosh\", \"acosh()\")}},\n        {{jsxref(\"Math.atanh\", \"atanh()\")}}\n      </td>\n      <td>Inverse hyperbolic functions; return values in hyperbolic angle.</td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          {{jsxref(\"Math.pow\", \"pow()\")}},\n          {{jsxref(\"Math.exp\", \"exp()\")}},\n          {{jsxref(\"Math.expm1\", \"expm1()\")}},\n          {{jsxref(\"Math.log\", \"log()\")}},\n          {{jsxref(\"Math.log10\", \"log10()\")}},\n          {{jsxref(\"Math.log1p\", \"log1p()\")}},\n          {{jsxref(\"Math.log2\", \"log2()\")}}\n        </p>\n      </td>\n      <td>Exponential and logarithmic functions.</td>\n    </tr>\n    <tr>\n      <td>",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 14,
      "totalChunks": 33,
      "startLineNumber": 180,
      "endLineNumber": 212
    }
  },
  {
    "content": "{{jsxref(\"Math.log1p\", \"log1p()\")}},\n          {{jsxref(\"Math.log2\", \"log2()\")}}\n        </p>\n      </td>\n      <td>Exponential and logarithmic functions.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.floor\", \"floor()\")}},\n        {{jsxref(\"Math.ceil\", \"ceil()\")}}\n      </td>\n      <td>\n        Returns the largest/smallest integer less/greater than or equal to an\n        argument.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.min\", \"min()\")}},\n        {{jsxref(\"Math.max\", \"max()\")}}\n      </td>\n      <td>\n        Returns the minimum or maximum (respectively) value of a comma separated\n        list of numbers as arguments.\n      </td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Math.random\", \"random()\")}}</td>\n      <td>Returns a random number between 0 and 1.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.round\", \"round()\")}},\n        {{jsxref(\"Math.fround\", \"fround()\")}},\n        {{jsxref(\"Math.trunc\", \"trunc()\")}},\n      </td>",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 15,
      "totalChunks": 33,
      "startLineNumber": 205,
      "endLineNumber": 240
    }
  },
  {
    "content": "</tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.round\", \"round()\")}},\n        {{jsxref(\"Math.fround\", \"fround()\")}},\n        {{jsxref(\"Math.trunc\", \"trunc()\")}},\n      </td>\n      <td>Rounding and truncation functions.</td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.sqrt\", \"sqrt()\")}},\n        {{jsxref(\"Math.cbrt\", \"cbrt()\")}},\n        {{jsxref(\"Math.hypot\", \"hypot()\")}}\n      </td>\n      <td>\n        Square root, cube root, Square root of the sum of square arguments.\n      </td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Math.sign\", \"sign()\")}}</td>\n      <td>\n        The sign of a number, indicating whether the number is positive,\n        negative or zero.\n      </td>\n    </tr>\n    <tr>\n      <td>\n        {{jsxref(\"Math.clz32\", \"clz32()\")}},<br />{{jsxref(\"Math.imul\", \"imul()\")}}\n      </td>\n      <td>\n        Number of leading zero bits in the 32-bit binary representation.<br />The\n        result of the C-like 32-bit multiplication of the two arguments.\n      </td>",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 16,
      "totalChunks": 33,
      "startLineNumber": 234,
      "endLineNumber": 267
    }
  },
  {
    "content": "</td>\n      <td>\n        Number of leading zero bits in the 32-bit binary representation.<br />The\n        result of the C-like 32-bit multiplication of the two arguments.\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 17,
      "totalChunks": 33,
      "startLineNumber": 263,
      "endLineNumber": 270
    }
  },
  {
    "content": "Unlike many other objects, you never create a `Math` object of your own. You always use the built-in `Math` object.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Math object",
      "chunkIndex": 18,
      "totalChunks": 33,
      "startLineNumber": 272,
      "endLineNumber": 272
    }
  },
  {
    "content": "## BigInts\n\nOne shortcoming of number values is they only have 64 bits. In practice, due to using IEEE 754 encoding, they cannot represent any integer larger than [`Number.MAX_SAFE_INTEGER`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) (which is 2<sup>53</sup> - 1) accurately. To solve the need of encoding binary data and to interoperate with other languages that offer wide integers like `i64` (64-bit integers) and `i128` (128-bit integers), JavaScript also offers another data type to represent _arbitrarily large integers_: [`BigInt`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\n\nA BigInt can be defined as an integer literal suffixed by `n`:\n\n```js\nconst b1 = 123n;\n// Can be arbitrarily large.\nconst b2 = -1234567890987654321n;\n```\n\nBigInts can also be constructed from number values or string values using the [`BigInt`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInts",
      "chunkIndex": 19,
      "totalChunks": 33,
      "startLineNumber": 274,
      "endLineNumber": 286
    }
  },
  {
    "content": "BigInts can also be constructed from number values or string values using the [`BigInt`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) constructor.\n\n```js\nconst b1 = BigInt(123);\n// Using a string prevents loss of precision, since long number\n// literals don't represent what they seem like.\nconst b2 = BigInt(\"-1234567890987654321\");\n```\n\nConceptually, a BigInt is just an arbitrarily long sequence of bits which encodes an integer. You can safely do any arithmetic operations without losing precision or over-/underflowing.\n\n```js\nconst integer = 12 ** 34; // 4.9222352429520264e+36; only has limited precision\nconst bigint = 12n ** 34n; // 4922235242952026704037113243122008064n\n```\n\nCompared to numbers, BigInt values yield higher precision when representing large _integers_; however, they cannot represent _floating-point numbers_. For example, division would round to zero:\n\n```js\nconst bigintDiv = 5n / 2n; // 2n, because there's no 2.5 in BigInt\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInts",
      "chunkIndex": 20,
      "totalChunks": 33,
      "startLineNumber": 286,
      "endLineNumber": 306
    }
  },
  {
    "content": "```js\nconst bigintDiv = 5n / 2n; // 2n, because there's no 2.5 in BigInt\n```\n\n`Math` functions cannot be used on BigInt values; they only work with numbers.\n\nChoosing between BigInt and number depends on your use-case and your input's range. The precision of numbers should be able to accommodate most day-to-day tasks already, and BigInts are most suitable for handling binary data.\n\nRead more about what you can do with BigInt values in the [Expressions and Operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bigint_operators) section, or the [BigInt reference](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "BigInts",
      "chunkIndex": 21,
      "totalChunks": 33,
      "startLineNumber": 304,
      "endLineNumber": 312
    }
  },
  {
    "content": "## Strings\n\nJavaScript's [String](/en-US/docs/Glossary/String) type is used to represent textual data. It is a set of \"elements\" of 16-bit unsigned integer values (UTF-16 code units). Each element in the String occupies a position in the String. The first element is at index 0, the next at index 1, and so on. The length of a String is the number of elements in it. You can create strings using string literals or string objects.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Strings",
      "chunkIndex": 22,
      "totalChunks": 33,
      "startLineNumber": 314,
      "endLineNumber": 316
    }
  },
  {
    "content": "### String literals\n\nYou can declare strings in source code using either single or double quotes:\n\n```js-nolint\n'foo'\n\"bar\"\n```\n\nWithin a string literal, most characters can be entered literally. The only exceptions are the backslash (`\\`, which starts an escape sequence), the quote character being used to enclose the string, which terminates the string, and the newline character, which is a syntax error if not preceded by a backslash.\n\nMore advanced strings can be created using escape sequences:\n\n#### Hexadecimal escape sequences\n\nThe number after \\x is interpreted as a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) number.\n\n```js-nolint\n\"\\xA9\" // \"©\"\n```\n\n#### Unicode escape sequences\n\nThe Unicode escape sequences require at least four hexadecimal digits following `\\u`.\n\n```js-nolint\n\"\\u00A9\" // \"©\"\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String literals",
      "chunkIndex": 23,
      "totalChunks": 33,
      "startLineNumber": 318,
      "endLineNumber": 345
    }
  },
  {
    "content": "#### Unicode escape sequences\n\nThe Unicode escape sequences require at least four hexadecimal digits following `\\u`.\n\n```js-nolint\n\"\\u00A9\" // \"©\"\n```\n\n#### Unicode code point escapes\n\nWith Unicode code point escapes, any character can be escaped using hexadecimal numbers so that it is possible to use Unicode code points up to `0x10FFFF`. With the four-digit Unicode escapes it is often necessary to write the surrogate halves separately to achieve the same result.\n\nSee also {{jsxref(\"String.fromCodePoint()\")}} or {{jsxref(\"String.prototype.codePointAt()\")}}.\n\n```js-nolint\n\"\\u{2F804}\"\n\n// the same with simple Unicode escapes\n\"\\uD87E\\uDC04\"\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Unicode escape sequences",
      "chunkIndex": 24,
      "totalChunks": 33,
      "startLineNumber": 339,
      "endLineNumber": 358
    }
  },
  {
    "content": "## String object\n\nYou can call methods directly on a string value:\n\n```js\nconsole.log(\"hello\".toUpperCase()); // HELLO\n```\n\nThe following methods are available on {{jsxref(\"String\")}} values:",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String object",
      "chunkIndex": 25,
      "totalChunks": 33,
      "startLineNumber": 360,
      "endLineNumber": 368
    }
  },
  {
    "content": "- Query: get the character or character code at a particular string index. Methods include {{jsxref(\"String/at\", \"at()\")}}, {{jsxref(\"String/charAt\", \"charAt()\")}}, {{jsxref(\"String/charCodeAt\", \"charCodeAt()\")}}, and {{jsxref(\"String/codePointAt\", \"codePointAt()\")}}.\n- Search: get information about a substring that conforms to a pattern, or test if a particular substring exists. Methods include {{jsxref(\"String/indexOf\", \"indexOf()\")}}, {{jsxref(\"String/lastIndexOf\", \"lastIndexOf()\")}}, {{jsxref(\"String/startsWith\", \"startsWith()\")}}, {{jsxref(\"String/endsWith\", \"endsWith()\")}}, {{jsxref(\"String/includes\", \"includes()\")}}, {{jsxref(\"String/match\", \"match()\")}}, {{jsxref(\"String/matchAll\", \"matchAll()\")}}, and {{jsxref(\"String/search\", \"search()\")}}",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String object",
      "chunkIndex": 26,
      "totalChunks": 33,
      "startLineNumber": 370,
      "endLineNumber": 371
    }
  },
  {
    "content": "- Composition: combine strings into a longer string. Methods include {{jsxref(\"String/padStart\", \"padStart()\")}}, {{jsxref(\"String/padEnd\", \"padEnd()\")}}, {{jsxref(\"String/concat\", \"concat()\")}}, and {{jsxref(\"String/repeat\", \"repeat()\")}}.\n- Decomposition: break a string into smaller strings. Methods include {{jsxref(\"String/split\", \"split()\")}}, {{jsxref(\"String/slice\", \"slice()\")}}, {{jsxref(\"String/substring\", \"substring()\")}}, {{jsxref(\"String/substr\", \"substr()\")}}, {{jsxref(\"String/trim\", \"trim()\")}}, {{jsxref(\"String/trimStart\", \"trimStart()\")}}, and {{jsxref(\"String/trimEnd\", \"trimEnd()\")}}.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String object",
      "chunkIndex": 27,
      "totalChunks": 33,
      "startLineNumber": 372,
      "endLineNumber": 373
    }
  },
  {
    "content": "- Transformation: return a new string based on the current string's content. Methods include {{jsxref(\"String/toLowerCase\", \"toLowerCase()\")}}, {{jsxref(\"String/toUpperCase\", \"toUpperCase()\")}}, {{jsxref(\"String/toLocaleLowerCase\", \"toLocaleLowerCase()\")}}, {{jsxref(\"String/toLocaleUpperCase\", \"toLocaleUpperCase()\")}}, {{jsxref(\"String/normalize\", \"normalize()\")}}, and {{jsxref(\"String/toWellFormed\", \"toWellFormed()\")}}.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String object",
      "chunkIndex": 28,
      "totalChunks": 33,
      "startLineNumber": 374,
      "endLineNumber": 374
    }
  },
  {
    "content": "When working with strings, there are two other objects that provide important functionality for string manipulation: {{jsxref(\"RegExp\")}} and {{jsxref(\"Intl\")}}. They are introduced in [regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) and [internationalization](/en-US/docs/Web/JavaScript/Guide/Internationalization) respectively.",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "String object",
      "chunkIndex": 29,
      "totalChunks": 33,
      "startLineNumber": 376,
      "endLineNumber": 376
    }
  },
  {
    "content": "## Template literals\n\n[Template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals) are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.\n\nTemplate literals are enclosed by backtick ([grave accent](https://en.wikipedia.org/wiki/Grave_accent)) characters (`` ` ``) instead of double or single quotes. Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (`${expression}`).",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Template literals",
      "chunkIndex": 30,
      "totalChunks": 33,
      "startLineNumber": 378,
      "endLineNumber": 382
    }
  },
  {
    "content": "### Multi-lines\n\nAny new line characters inserted in the source are part of the template literal. Using normal strings, you would have to use the following syntax in order to get multi-line strings:\n\n```js\nconsole.log(\n  \"string text line 1\\n\\\nstring text line 2\",\n);\n// \"string text line 1\n// string text line 2\"\n```\n\nTo get the same effect with multi-line strings, you can now write:\n\n```js\nconsole.log(`string text line 1\nstring text line 2`);\n// \"string text line 1\n// string text line 2\"\n```",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multi-lines",
      "chunkIndex": 31,
      "totalChunks": 33,
      "startLineNumber": 384,
      "endLineNumber": 404
    }
  },
  {
    "content": "### Embedded expressions\n\nIn order to embed expressions within normal strings, you would use the following syntax:\n\n```js\nconst five = 5;\nconst ten = 10;\nconsole.log(\n  \"Fifteen is \" + (five + ten) + \" and not \" + (2 * five + ten) + \".\",\n);\n// \"Fifteen is 15 and not 20.\"\n```\n\nNow, with template literals, you are able to make use of the syntactic sugar making substitutions like this more readable:\n\n```js\nconst five = 5;\nconst ten = 10;\nconsole.log(`Fifteen is ${five + ten} and not ${2 * five + ten}.`);\n// \"Fifteen is 15 and not 20.\"\n```\n\nFor more information, read about [Template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals) in the [JavaScript reference](/en-US/docs/Web/JavaScript/Reference).\n\n{{PreviousNext(\"Web/JavaScript/Guide/Expressions_and_operators\", \"Web/JavaScript/Guide/Representing_dates_times\")}}",
    "metadata": {
      "source": "numbers_and_strings/index.md",
      "documentSlug": "Web/JavaScript/Guide/Numbers_and_strings",
      "documentTitle": "Numbers and strings",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Embedded expressions",
      "chunkIndex": 32,
      "totalChunks": 33,
      "startLineNumber": 406,
      "endLineNumber": 430
    }
  },
  {
    "content": "Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).\n\n{{InteractiveExample(\"JavaScript Demo: RegExp Assertions\", \"taller\")}}\n\n```js interactive-example\nconst text = \"A quick fox\";\n\nconst regexpLastWord = /\\w+$/;\nconsole.log(text.match(regexpLastWord));\n// Expected output: Array [\"fox\"]\n\nconst regexpWords = /\\b\\w+\\b/g;\nconsole.log(text.match(regexpWords));\n// Expected output: Array [\"A\", \"quick\", \"fox\"]\n\nconst regexpFoxQuality = /\\w+(?= fox)/;\nconsole.log(text.match(regexpFoxQuality));\n// Expected output: Array [\"quick\"]\n```",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 27,
      "startLineNumber": 8,
      "endLineNumber": 26
    }
  },
  {
    "content": "## Types",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 1,
      "totalChunks": 27,
      "startLineNumber": 28,
      "endLineNumber": 28
    }
  },
  {
    "content": "### Boundary-type assertions",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 2,
      "totalChunks": 27,
      "startLineNumber": 30,
      "endLineNumber": 30
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>^</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\"><strong>Input boundary beginning assertion:</strong></a>\n          Matches the beginning of input. If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>multiline</code></a> (m) flag is enabled,\n          also matches immediately after a line break character. For example,\n          <code>/^A/</code> does not match the \"A\" in \"an A\", but does match the\n          first \"A\" in \"An A\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> This character has a different meaning when\n            it appears at the start of a\n            <a",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 3,
      "totalChunks": 27,
      "startLineNumber": 32,
      "endLineNumber": 54
    }
  },
  {
    "content": "</p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> This character has a different meaning when\n            it appears at the start of a\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n              >character class</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>$</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\"><strong>Input boundary end assertion:</strong></a>\n          Matches the end of input. If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>multiline</code></a> (m) flag is enabled, also\n          matches immediately before a line break character. For example,\n          <code>/t$/</code> does not match the \"t\" in \"eater\", but does match it\n          in \"eat\".\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 4,
      "totalChunks": 27,
      "startLineNumber": 49,
      "endLineNumber": 74
    }
  },
  {
    "content": "<code>/t$/</code> does not match the \"t\" in \"eater\", but does match it\n          in \"eat\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\"><strong>Word boundary assertion:</strong></a>\n          Matches a word boundary. This is the position where a word character\n          is not followed or preceded by another word-character, such as between\n          a letter and a space. Note that a matched word boundary is not\n          included in the match. In other words, the length of a matched word\n          boundary is zero.\n        </p>\n        <p>Examples:</p>\n        <ul>\n          <li><code>/\\bm/</code> matches the \"m\" in \"moon\".</li>\n          <li>\n            <code>/oo\\b/</code> does not match the \"oo\" in \"moon\", because \"oo\"\n            is followed by \"n\" which is a word character.\n          </li>\n          <li>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 5,
      "totalChunks": 27,
      "startLineNumber": 69,
      "endLineNumber": 92
    }
  },
  {
    "content": "<li>\n            <code>/oo\\b/</code> does not match the \"oo\" in \"moon\", because \"oo\"\n            is followed by \"n\" which is a word character.\n          </li>\n          <li>\n            <code>/oon\\b/</code> matches the \"oon\" in \"moon\", because \"oon\" is\n            the end of the string, thus not followed by a word character.\n          </li>\n          <li>\n            <code>/\\w\\b\\w/</code> will never match anything, because a word\n            character can never be followed by both a non-word and a word\n            character.\n          </li>\n        </ul>\n        <p>\n          To match a backspace character (<code>[\\b]</code>), see\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n            >Character Classes</a\n          >.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 6,
      "totalChunks": 27,
      "startLineNumber": 88,
      "endLineNumber": 114
    }
  },
  {
    "content": ">Character Classes</a\n          >.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\"><strong>Non-word-boundary assertion:</strong></a>\n          Matches a non-word boundary. This is a position where the previous and\n          next character are of the same type: Either both must be words, or\n          both must be non-words, for example between two letters or between two\n          spaces. The beginning and end of a string are considered non-words.\n          Same as the matched word boundary, the matched non-word boundary is\n          also not included in the match. For example,\n          <code>/\\Bon/</code> matches \"on\" in \"at noon\", and\n          <code>/ye\\B/</code> matches \"ye\" in \"possibly yesterday\".\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 7,
      "totalChunks": 27,
      "startLineNumber": 106,
      "endLineNumber": 128
    }
  },
  {
    "content": "### Other assertions\n\n> [!NOTE]\n> The `?` character may also be used as a quantifier.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 8,
      "totalChunks": 27,
      "startLineNumber": 130,
      "endLineNumber": 133
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>x(?=y)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Lookahead assertion:</strong></a>\n          Matches \"x\" only if \"x\" is\n          followed by \"y\". For example, <code>/Jack(?=Sprat)/</code> matches\n          \"Jack\" only if it is followed by \"Sprat\".<br /><code\n            >/Jack(?=Sprat|Frost)/</code\n          >\n          matches \"Jack\" only if it is followed by \"Sprat\" or \"Frost\". However,\n          neither \"Sprat\" nor \"Frost\" is part of the match results.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>x(?!y)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Negative lookahead assertion:</strong></a>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 9,
      "totalChunks": 27,
      "startLineNumber": 135,
      "endLineNumber": 162
    }
  },
  {
    "content": "<td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Negative lookahead assertion:</strong></a>\n          Matches \"x\" only if \"x\"\n          is not followed by \"y\". For example, <code>/\\d+(?!\\.)/</code> matches\n          a number only if it is not followed by a decimal point. <code\n            >/\\d+(?!\\.)/.exec('3.141')</code\n          >\n          matches \"141\" but not \"3\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;=y)x</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"><strong>Lookbehind assertion:</strong></a>\n          Matches \"x\" only if \"x\" is\n          preceded by \"y\". For example,\n          <code>/(?&#x3C;=Jack)Sprat/</code> matches \"Sprat\" only if it is\n          preceded by \"Jack\". <code>/(?&#x3C;=Jack|Tom)Sprat/</code> matches",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 10,
      "totalChunks": 27,
      "startLineNumber": 160,
      "endLineNumber": 180
    }
  },
  {
    "content": "preceded by \"y\". For example,\n          <code>/(?&#x3C;=Jack)Sprat/</code> matches \"Sprat\" only if it is\n          preceded by \"Jack\". <code>/(?&#x3C;=Jack|Tom)Sprat/</code> matches\n          \"Sprat\" only if it is preceded by \"Jack\" or \"Tom\". However, neither\n          \"Jack\" nor \"Tom\" is part of the match results.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;!y)x</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"><strong>Negative lookbehind assertion:</strong></a>\n          Matches \"x\" only if\n          \"x\" is not preceded by \"y\". For example,\n          <code>/(?&#x3C;!-)\\d+/</code> matches a number only if it is not\n          preceded by a minus sign. <code>/(?&#x3C;!-)\\d+/.exec('3')</code>\n          matches \"3\". <code>/(?&#x3C;!-)\\d+/.exec('-3')</code>  match is not\n          found because the number is preceded by the minus sign.\n        </p>\n      </td>\n    </tr>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 11,
      "totalChunks": 27,
      "startLineNumber": 178,
      "endLineNumber": 199
    }
  },
  {
    "content": "matches \"3\". <code>/(?&#x3C;!-)\\d+/.exec('-3')</code>  match is not\n          found because the number is preceded by the minus sign.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 12,
      "totalChunks": 27,
      "startLineNumber": 195,
      "endLineNumber": 201
    }
  },
  {
    "content": "## Examples",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 13,
      "totalChunks": 27,
      "startLineNumber": 203,
      "endLineNumber": 203
    }
  },
  {
    "content": "### General boundary-type overview example\n\n<!-- cSpell:ignore greon -->\n\n```js\n// Using Regex boundaries to fix buggy string.\nbuggyMultiline = `tey, ihe light-greon apple\ntangs on ihe greon traa`;\n\n// 1) Use ^ to fix the matching at the beginning of the string, and right after newline.\nbuggyMultiline = buggyMultiline.replace(/^t/gim, \"h\");\nconsole.log(1, buggyMultiline); // fix 'tey' => 'hey' and 'tangs' => 'hangs' but do not touch 'traa'.\n\n// 2) Use $ to fix matching at the end of the text.\nbuggyMultiline = buggyMultiline.replace(/aa$/gim, \"ee.\");\nconsole.log(2, buggyMultiline); // fix 'traa' => 'tree.'.\n\n// 3) Use \\b to match characters right on border between a word and a space.\nbuggyMultiline = buggyMultiline.replace(/\\bi/gim, \"t\");\nconsole.log(3, buggyMultiline); // fix 'ihe' => 'the' but do not touch 'light'.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "General boundary-type overview example",
      "chunkIndex": 14,
      "totalChunks": 27,
      "startLineNumber": 205,
      "endLineNumber": 224
    }
  },
  {
    "content": "// 4) Use \\B to match characters inside borders of an entity.\nfixedMultiline = buggyMultiline.replace(/\\Bo/gim, \"e\");\nconsole.log(4, fixedMultiline); // fix 'greon' => 'green' but do not touch 'on'.\n```",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "General boundary-type overview example",
      "chunkIndex": 15,
      "totalChunks": 27,
      "startLineNumber": 226,
      "endLineNumber": 229
    }
  },
  {
    "content": "### Matching the beginning of input using a ^ control character\n\nUse `^` for matching at the beginning of input. In this example, we can get the fruits that start with 'A' by a `/^A/` regex. For selecting appropriate fruits we can use the [`filter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) method with an [arrow](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) function.\n\n```js\nconst fruits = [\"Apple\", \"Watermelon\", \"Orange\", \"Avocado\", \"Strawberry\"];\n\n// Select fruits started with 'A' by /^A/ Regex.\n// Here '^' control symbol used only in one role: Matching beginning of an input.\n\nconst fruitsStartsWithA = fruits.filter((fruit) => /^A/.test(fruit));\nconsole.log(fruitsStartsWithA); // [ 'Apple', 'Avocado' ]\n```",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Matching the beginning of input using a ^ control character",
      "chunkIndex": 16,
      "totalChunks": 27,
      "startLineNumber": 231,
      "endLineNumber": 243
    }
  },
  {
    "content": "const fruitsStartsWithA = fruits.filter((fruit) => /^A/.test(fruit));\nconsole.log(fruitsStartsWithA); // [ 'Apple', 'Avocado' ]\n```\n\nIn the second example `^` is used both for matching at the beginning of input and for creating negated or complemented character class when used within [character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n\n```js\nconst fruits = [\"Apple\", \"Watermelon\", \"Orange\", \"Avocado\", \"Strawberry\"];\n\n// Selecting fruits that do not start by 'A' with a /^[^A]/ regex.\n// In this example, two meanings of '^' control symbol are represented:\n// 1) Matching beginning of the input\n// 2) A negated or complemented character class: [^A]\n// That is, it matches anything that is not enclosed in the square brackets.\n\nconst fruitsStartsWithNotA = fruits.filter((fruit) => /^[^A]/.test(fruit));\n\nconsole.log(fruitsStartsWithNotA); // [ 'Watermelon', 'Orange', 'Strawberry' ]\n```",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Matching the beginning of input using a ^ control character",
      "chunkIndex": 17,
      "totalChunks": 27,
      "startLineNumber": 241,
      "endLineNumber": 259
    }
  },
  {
    "content": "const fruitsStartsWithNotA = fruits.filter((fruit) => /^[^A]/.test(fruit));\n\nconsole.log(fruitsStartsWithNotA); // [ 'Watermelon', 'Orange', 'Strawberry' ]\n```\n\nSee more examples in the [input boundary assertion](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion) reference.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Matching the beginning of input using a ^ control character",
      "chunkIndex": 18,
      "totalChunks": 27,
      "startLineNumber": 256,
      "endLineNumber": 261
    }
  },
  {
    "content": "### Matching a word boundary\n\nIn this example, we match fruit names containing a word that ends in \"en\" or \"ed\".\n\n```js\nconst fruitsWithDescription = [\"Red apple\", \"Orange orange\", \"Green Avocado\"];\n\n// Select descriptions that contains 'en' or 'ed' words endings:\nconst enEdSelection = fruitsWithDescription.filter((description) =>\n  /(?:en|ed)\\b/.test(description),\n);\n\nconsole.log(enEdSelection); // [ 'Red apple', 'Green Avocado' ]\n```\n\nSee more examples in the [word boundary assertion](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion) reference.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Matching a word boundary",
      "chunkIndex": 19,
      "totalChunks": 27,
      "startLineNumber": 263,
      "endLineNumber": 278
    }
  },
  {
    "content": "### Lookahead assertion\n\nIn this example, we match the word \"First\" only if it is followed by the word \"test\", but we do not include \"test\" in the match results.\n\n```js\nconst regex = /First(?= test)/g;\n\nconsole.log(\"First test\".match(regex)); // [ 'First' ]\nconsole.log(\"First peach\".match(regex)); // null\nconsole.log(\"This is a First test in a year.\".match(regex)); // [ 'First' ]\nconsole.log(\"This is a First peach in a month.\".match(regex)); // null\n```\n\nSee more examples in the [lookahead assertion](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) reference.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Lookahead assertion",
      "chunkIndex": 20,
      "totalChunks": 27,
      "startLineNumber": 280,
      "endLineNumber": 293
    }
  },
  {
    "content": "### Basic negative lookahead assertion\n\nFor example, `/\\d+(?!\\.)/` matches a number only if it is not followed by a decimal point. `/\\d+(?!\\.)/.exec('3.141')` matches \"141\" but not \"3.\n\n```js\nconsole.log(/\\d+(?!\\.)/g.exec(\"3.141\")); // [ '141', index: 2, input: '3.141' ]\n```\n\nSee more examples in the [lookahead assertion](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion) reference.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Basic negative lookahead assertion",
      "chunkIndex": 21,
      "totalChunks": 27,
      "startLineNumber": 295,
      "endLineNumber": 303
    }
  },
  {
    "content": "### Different meaning of '?!' combination usage in assertions and character classes\n\nThe `?!` combination has different meanings in assertions like `/x(?!y)/` and [character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) like `[^?!]`.\n\n```js\nconst orangeNotLemon =\n  \"Do you want to have an orange? Yes, I do not want to have a lemon!\";\n\n// Different meaning of '?!' combination usage in Assertions /x(?!y)/ and Ranges /[^?!]/\nconst selectNotLemonRegex = /[^?!]+have(?! a lemon)[^?!]+[?!]/gi;\nconsole.log(orangeNotLemon.match(selectNotLemonRegex)); // [ 'Do you want to have an orange?' ]\n\nconst selectNotOrangeRegex = /[^?!]+have(?! an orange)[^?!]+[?!]/gi;\nconsole.log(orangeNotLemon.match(selectNotOrangeRegex)); // [ ' Yes, I do not want to have a lemon!' ]\n```",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Different meaning of '?!' combination usage in assertions and character classes",
      "chunkIndex": 22,
      "totalChunks": 27,
      "startLineNumber": 305,
      "endLineNumber": 319
    }
  },
  {
    "content": "### Lookbehind assertion\n\nIn this example, we replace the word \"orange\" with \"apple\" only if it is preceded by the word \"ripe\".\n\n```js\nconst oranges = [\"ripe orange A\", \"green orange B\", \"ripe orange C\"];\n\nconst newFruits = oranges.map((fruit) =>\n  fruit.replace(/(?<=ripe )orange/, \"apple\"),\n);\nconsole.log(newFruits); // ['ripe apple A', 'green orange B', 'ripe apple C']\n```\n\nSee more examples in the [lookbehind assertion](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion) reference.",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Lookbehind assertion",
      "chunkIndex": 23,
      "totalChunks": 27,
      "startLineNumber": 321,
      "endLineNumber": 334
    }
  },
  {
    "content": "## See also",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 24,
      "totalChunks": 27,
      "startLineNumber": 336,
      "endLineNumber": 336
    }
  },
  {
    "content": "- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n- [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide\n- [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n- [`RegExp`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) reference\n- [Input boundary assertion: `^`, `$`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion)\n- [Lookahead assertion: `(?=...)`, `(?!...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion)\n- [Lookbehind assertion: `(?<=...)`, `(?<!...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion)",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 25,
      "totalChunks": 27,
      "startLineNumber": 338,
      "endLineNumber": 346
    }
  },
  {
    "content": "- [Lookbehind assertion: `(?<=...)`, `(?<!...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion)\n- [Word boundary assertion: `\\b`, `\\B`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion)",
    "metadata": {
      "source": "regular_expressions/assertions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Assertions",
      "documentTitle": "Assertions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 26,
      "totalChunks": 27,
      "startLineNumber": 346,
      "endLineNumber": 347
    }
  },
  {
    "content": "Character classes distinguish kinds of characters such as, for example, distinguishing between letters and digits.\n\n{{InteractiveExample(\"JavaScript Demo: RegExp Character classes\")}}\n\n```js interactive-example\nconst chessStory = \"He played the King in a8 and she moved her Queen in c2.\";\nconst regexpCoordinates = /\\w\\d/g;\nconsole.log(chessStory.match(regexpCoordinates));\n// Expected output: Array [ 'a8', 'c2']\n\nconst moods = \"happy 🙂, confused 😕, sad 😢\";\nconst regexpEmoticons = /[\\u{1F600}-\\u{1F64F}]/gu;\nconsole.log(moods.match(regexpEmoticons));\n// Expected output: Array ['🙂', '😕', '😢']\n```",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 25,
      "startLineNumber": 8,
      "endLineNumber": 22
    }
  },
  {
    "content": "## Types",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 1,
      "totalChunks": 25,
      "startLineNumber": 24,
      "endLineNumber": 24
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code>[xyz]<br />[a-c]</code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\"><strong>Character class:</strong></a>\n          Matches any one of the enclosed characters. You can\n          specify a range of characters by using a hyphen, but if the hyphen\n          appears as the first or last character enclosed in the square brackets,\n          it is taken as a literal hyphen to be included in the character class\n          as a normal character.\n        </p>\n        <p>\n          For example, <code>[abcd]</code> is the same as <code>[a-d]</code>.\n          They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 2,
      "totalChunks": 25,
      "startLineNumber": 26,
      "endLineNumber": 52
    }
  },
  {
    "content": "They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the\n          \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in\n          \"non-profit\".\n        </p>\n        <p>\n          For example, <code>[\\w-]</code> is the same as\n          <code>[A-Za-z0-9_-]</code>. They both match the \"b\" in \"brisket\", the\n          \"c\" in \"chop\", and the \"n\" in \"non-profit\".\n        </p>\n        <p>\n          When the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets\"><code>unicodeSets</code></a> (<code>v</code>) flag is enabled, the character class has some additional features. See the <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\">character class</a> reference for more information.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code>[^xyz]<br />[^a-c]</code>\n        </p>\n      </td>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 3,
      "totalChunks": 25,
      "startLineNumber": 49,
      "endLineNumber": 71
    }
  },
  {
    "content": "</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code>[^xyz]<br />[^a-c]</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\"><strong>Negated character class:</strong></a>\n          Matches anything that is not enclosed in the square brackets. You can specify a range\n          of characters by using a hyphen, but if the hyphen appears as the\n          first character after the <code>^</code> or the last character enclosed in the square brackets, it is taken as\n          a literal hyphen to be included in the character class as a normal\n          character. For example, <code>[^abc]</code> is the same as\n          <code>[^a-c]</code>. They initially match \"o\" in \"bacon\" and \"h\" in\n          \"chop\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> The ^ character may also indicate the\n            <a",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 4,
      "totalChunks": 25,
      "startLineNumber": 63,
      "endLineNumber": 86
    }
  },
  {
    "content": "\"chop\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> The ^ character may also indicate the\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n              >beginning of input</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard\"><strong>Wildcard:</strong></a>\n          Matches any single character <em>except</em> line terminators:\n          <code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or\n          <code>\\u2029</code>. For example, <code>/.y/</code> matches \"my\" and",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 5,
      "totalChunks": 25,
      "startLineNumber": 81,
      "endLineNumber": 101
    }
  },
  {
    "content": "<code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or\n          <code>\\u2029</code>. For example, <code>/.y/</code> matches \"my\" and\n          \"ay\", but not \"yes\", in \"yes make my day\", as there is no character before \"y\" in \"yes\". If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>dotAll</code></a> (s) flag is enabled, also matches line terminators.\n          Inside a character class, the dot loses its special meaning and\n          matches a literal dot.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Digit character class escape:</strong></a>\n          Matches any digit (Arabic numeral). Equivalent to <code>[0-9]</code>.\n          For example, <code>/\\d/</code> or <code>/[0-9]/</code> matches \"2\" in\n          \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 6,
      "totalChunks": 25,
      "startLineNumber": 100,
      "endLineNumber": 119
    }
  },
  {
    "content": "For example, <code>/\\d/</code> or <code>/[0-9]/</code> matches \"2\" in\n          \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-digit character class escape:</strong></a>\n          Matches any character that is not a digit (Arabic numeral). Equivalent\n          to <code>[^0-9]</code>. For example, <code>/\\D/</code> or\n          <code>/[^0-9]/</code> matches \"B\" in \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Word character class escape:</strong></a>\n          Matches any alphanumeric character from the basic Latin alphabet,\n          including the underscore. Equivalent to <code>[A-Za-z0-9_]</code>. For",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 7,
      "totalChunks": 25,
      "startLineNumber": 114,
      "endLineNumber": 136
    }
  },
  {
    "content": "Matches any alphanumeric character from the basic Latin alphabet,\n          including the underscore. Equivalent to <code>[A-Za-z0-9_]</code>. For\n          example, <code>/\\w/</code> matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\"\n          in \"3D\" and \"m\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-word character class escape:</strong></a>\n          Matches any character that is not a word character from the basic\n          Latin alphabet. Equivalent to <code>[^A-Za-z0-9_]</code>. For example,\n          <code>/\\W/</code> or <code>/[^A-Za-z0-9_]/</code> matches \"%\" in \"50%\"\n          and \"É\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 8,
      "totalChunks": 25,
      "startLineNumber": 135,
      "endLineNumber": 157
    }
  },
  {
    "content": "and \"É\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>White space character class escape:</strong></a>\n          Matches a single white space character, including space, tab, form\n          feed, line feed, and other Unicode spaces. Equivalent to\n          <code>[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>. For example, <code>/\\s\\w*/</code> matches \" bar\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-white space character class escape:</strong></a>\n          Matches a single character other than white space. Equivalent to",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 9,
      "totalChunks": 25,
      "startLineNumber": 150,
      "endLineNumber": 170
    }
  },
  {
    "content": "Matches a single character other than white space. Equivalent to\n          <code>[^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>. For example, <code>/\\S\\w*/</code> matches \"foo\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Matches a horizontal tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Matches a carriage return.</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Matches a linefeed.</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Matches a vertical tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Matches a form-feed.</td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>\n        Matches a backspace. If you're looking for the word-boundary assertion\n        (<code>\\b</code>), see\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n          >Assertions</a",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 10,
      "totalChunks": 25,
      "startLineNumber": 170,
      "endLineNumber": 202
    }
  },
  {
    "content": "(<code>\\b</code>), see\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n          >Assertions</a\n        >.\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Matches a NUL character. Do not follow this with another digit.</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\c<em>X</em></code>\n      </td>\n      <td>\n        <p>\n          Matches a control character using\n          <a href=\"https://en.wikipedia.org/wiki/Caret_notation\"\n            >caret notation</a\n          >, where \"X\" is a letter from A–Z (corresponding to code points\n          <code>U+0001</code><em>–</em><code>U+001A</code>). For example,\n          <code>/\\cM\\cJ/</code> matches \"\\r\\n\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\x<em>hh</em></code>\n      </td>\n      <td>\n        Matches the character with the code <code><em>hh</em></code> (two\n        hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 11,
      "totalChunks": 25,
      "startLineNumber": 199,
      "endLineNumber": 235
    }
  },
  {
    "content": "</td>\n      <td>\n        Matches the character with the code <code><em>hh</em></code> (two\n        hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>hhhh</em></code>\n      </td>\n      <td>\n        Matches a UTF-16 code-unit with the value\n        <code><em>hhhh</em></code> (four hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>{hhhh}</em> or <em>\\u{hhhhh}</em></code>\n      </td>\n      <td>\n        (Only when the <code>u</code> flag is set.) Matches the character with\n        the Unicode value <code>U+<em>hhhh</em></code> or <code\n          >U+<em>hhhhh</em></code\n        >\n        (hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 12,
      "totalChunks": 25,
      "startLineNumber": 228,
      "endLineNumber": 261
    }
  },
  {
    "content": "</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape\"><strong>Unicode character class escape:</strong></a>\n          Matches a character based on its Unicode character properties: for example, emoji characters, or Japanese\n          <em>katakana</em> characters, or Chinese/Japanese Han/Kanji characters,\n          etc.).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Indicates that the following character should be treated specially, or\n          \"escaped\". It behaves one of two ways.\n        </p>\n        <ul>\n          <li>\n            For characters that are usually treated literally, indicates that\n            the next character is special and not to be interpreted literally.",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 13,
      "totalChunks": 25,
      "startLineNumber": 253,
      "endLineNumber": 279
    }
  },
  {
    "content": "</p>\n        <ul>\n          <li>\n            For characters that are usually treated literally, indicates that\n            the next character is special and not to be interpreted literally.\n            For example, <code>/b/</code> matches the character \"b\". By placing\n            a backslash in front of \"b\", that is by using <code>/\\b/</code>, the\n            character becomes special to mean match a word boundary.\n          </li>\n          <li>\n            For characters that are usually treated specially, indicates that\n            the next character is not special and should be interpreted\n            literally. For example, \"*\" is a special character that means 0 or\n            more occurrences of the preceding character should be matched; for\n            example, <code>/a*/</code> means match 0 or more \"a\"s. To match\n            <code>*</code> literally, precede it with a backslash; for example,\n            <code>/a\\*/</code> matches \"a*\".\n          </li>\n        </ul>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 14,
      "totalChunks": 25,
      "startLineNumber": 275,
      "endLineNumber": 293
    }
  },
  {
    "content": "<code>*</code> literally, precede it with a backslash; for example,\n            <code>/a\\*/</code> matches \"a*\".\n          </li>\n        </ul>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> To match this character literally, escape it\n            with itself. In other words to search for <code>\\</code> use\n            <code>/\\\\/</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>|<em>y</em></code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"><strong>Disjunction:</strong></a>\n          Matches either \"x\" or \"y\". Each component, separated by a pipe (<code>|</code>), is called an <em>alternative</em>. For example,\n          <code>/green|red/</code> matches \"green\" in \"green apple\" and \"red\" in\n          \"red apple\".\n        </p>\n        <div class=\"notecard note\">\n          <p>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 15,
      "totalChunks": 25,
      "startLineNumber": 290,
      "endLineNumber": 315
    }
  },
  {
    "content": "<code>/green|red/</code> matches \"green\" in \"green apple\" and \"red\" in\n          \"red apple\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">group</a> to make it part of a bigger pattern. <code>[abc]</code> is functionally equivalent to <code>(?:a|b|c)</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 16,
      "totalChunks": 25,
      "startLineNumber": 311,
      "endLineNumber": 322
    }
  },
  {
    "content": "## Examples\n\n### Looking for a series of digits\n\nIn this example, we match a sequence of 4 digits with `\\d{4}`. `\\b` indicates a [word boundary](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) (i.e., do not start or end matching in the middle of a number sequence).\n\n```js\nconst randomData = \"015 354 8787 687351 3512 8735\";\nconst regexpFourDigits = /\\b\\d{4}\\b/g;\n\nconsole.table(randomData.match(regexpFourDigits));\n// ['8787', '3512', '8735']\n```\n\nSee more examples in the [character class escape](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) reference.",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 17,
      "totalChunks": 25,
      "startLineNumber": 324,
      "endLineNumber": 338
    }
  },
  {
    "content": "### Looking for a word (from the latin alphabet) starting with A\n\nIn this example, we match a word starting with the letter A. `\\b` indicates a [word boundary](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) (i.e., do not start matching in the middle of a word). `[aA]` indicates the letter \"a\" or \"A\". `\\w+` indicates any character _from the Latin alphabet_, multiple times (`+` is a [quantifier](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)). Note that because we already match until there are no more word characters, an end `\\b` boundary is not necessary.\n\n```js\nconst aliceExcerpt =\n  \"I'm sure I'm not Ada,' she said, 'for her hair goes in such long ringlets, and mine doesn't go in ringlets at all.\";\nconst regexpWordStartingWithA = /\\b[aA]\\w+/g;\n\nconsole.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Looking for a word (from the latin alphabet) starting with A",
      "chunkIndex": 18,
      "totalChunks": 25,
      "startLineNumber": 340,
      "endLineNumber": 351
    }
  },
  {
    "content": "console.table(aliceExcerpt.match(regexpWordStartingWithA));\n// ['Ada', 'and', 'at', 'all']\n```\n\nSee more examples in the [character class escape](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape) reference.",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Looking for a word (from the latin alphabet) starting with A",
      "chunkIndex": 19,
      "totalChunks": 25,
      "startLineNumber": 349,
      "endLineNumber": 353
    }
  },
  {
    "content": "### Looking for a word (from Unicode characters)\n\nInstead of the Latin alphabet, we can use a range of Unicode characters to identify a word (thus being able to deal with text in other languages like Russian or Arabic). The \"Basic Multilingual Plane\" of Unicode contains most of the characters used around the world and we can use character classes and ranges to match words written with those characters.\n\n```js\nconst nonEnglishText = \"Приключения Алисы в Стране чудес\";\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu;\n// BMP goes through U+0000 to U+FFFF but space is U+0020\n\nconsole.table(nonEnglishText.match(regexpBMPWord));\n[\"Приключения\", \"Алисы\", \"в\", \"Стране\", \"чудес\"];\n```\n\nSee more examples in the [Unicode character class escape](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) reference.",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Looking for a word (from Unicode characters)",
      "chunkIndex": 20,
      "totalChunks": 25,
      "startLineNumber": 355,
      "endLineNumber": 368
    }
  },
  {
    "content": "### Counting vowels\n\nIn this example, we count the number of vowels (A, E, I, O, U, Y) in a text. The `g` flag is used to match all occurrences of the pattern in the text. The `i` flag is used to make the pattern case-insensitive, so it matches both uppercase and lowercase vowels.\n\n```js\nconst aliceExcerpt =\n  \"There was a long silence after this, and Alice could only hear whispers now and then.\";\nconst regexpVowels = /[aeiouy]/gi;\n\nconsole.log(\"Number of vowels:\", aliceExcerpt.match(regexpVowels).length);\n// Number of vowels: 26\n```",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Counting vowels",
      "chunkIndex": 21,
      "totalChunks": 25,
      "startLineNumber": 370,
      "endLineNumber": 381
    }
  },
  {
    "content": "## See also",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 22,
      "totalChunks": 25,
      "startLineNumber": 383,
      "endLineNumber": 383
    }
  },
  {
    "content": "- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) guide\n- [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide\n- [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n- [`RegExp`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) reference\n- [Character class: `[...]`, `[^...]`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)\n- [Character class escape: `\\d`, `\\D`, `\\w`, `\\W`, `\\s`, `\\S`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape)\n- [Character escape: `\\n`, `\\u{...}`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape)\n- [Disjunction: `|`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 23,
      "totalChunks": 25,
      "startLineNumber": 385,
      "endLineNumber": 394
    }
  },
  {
    "content": "- [Disjunction: `|`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)\n- [Unicode character class escape: `\\p{...}`, `\\P{...}`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape)\n- [Wildcard: `.`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard)",
    "metadata": {
      "source": "regular_expressions/character_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Character_classes",
      "documentTitle": "Character classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 24,
      "totalChunks": 25,
      "startLineNumber": 394,
      "endLineNumber": 396
    }
  },
  {
    "content": "This page provides an overall cheat sheet of all the capabilities of `RegExp` syntax by aggregating the content of the articles in the `RegExp` guide. If you need more information on a specific topic, please follow the link on the corresponding heading to access the full article or head to [the guide](/en-US/docs/Web/JavaScript/Guide/Regular_expressions).",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 42,
      "startLineNumber": 8,
      "endLineNumber": 8
    }
  },
  {
    "content": "## Character classes\n\n[Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) distinguish kinds of characters such as, for example, distinguishing between letters and digits.",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 1,
      "totalChunks": 42,
      "startLineNumber": 10,
      "endLineNumber": 12
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code>[xyz]<br />[a-c]</code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\"><strong>Character class:</strong></a>\n          Matches any one of the enclosed characters. You can\n          specify a range of characters by using a hyphen, but if the hyphen\n          appears as the first or last character enclosed in the square brackets,\n          it is taken as a literal hyphen to be included in the character class\n          as a normal character.\n        </p>\n        <p>\n          For example, <code>[abcd]</code> is the same as <code>[a-d]</code>.\n          They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 2,
      "totalChunks": 42,
      "startLineNumber": 14,
      "endLineNumber": 40
    }
  },
  {
    "content": "They match the \"b\" in \"brisket\", and the \"c\" in \"chop\".\n        </p>\n        <p>\n          For example, <code>[abcd-]</code> and <code>[-abcd]</code> match the\n          \"b\" in \"brisket\", the \"c\" in \"chop\", and the \"-\" (hyphen) in\n          \"non-profit\".\n        </p>\n        <p>\n          For example, <code>[\\w-]</code> is the same as\n          <code>[A-Za-z0-9_-]</code>. They both match the \"b\" in \"brisket\", the\n          \"c\" in \"chop\", and the \"n\" in \"non-profit\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code>[^xyz]<br />[^a-c]</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class\"><strong>Negated character class:</strong></a>\n          Matches anything that is not enclosed in the square brackets. You can specify a range\n          of characters by using a hyphen, but if the hyphen appears as the",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 3,
      "totalChunks": 42,
      "startLineNumber": 37,
      "endLineNumber": 61
    }
  },
  {
    "content": "Matches anything that is not enclosed in the square brackets. You can specify a range\n          of characters by using a hyphen, but if the hyphen appears as the\n          first character after the <code>^</code> or the last character enclosed in the square brackets, it is taken as\n          a literal hyphen to be included in the character class as a normal\n          character. For example, <code>[^abc]</code> is the same as\n          <code>[^a-c]</code>. They initially match \"o\" in \"bacon\" and \"h\" in\n          \"chop\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> The ^ character may also indicate the\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n              >beginning of input</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 4,
      "totalChunks": 42,
      "startLineNumber": 60,
      "endLineNumber": 82
    }
  },
  {
    "content": ">beginning of input</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard\"><strong>Wildcard:</strong></a>\n          Matches any single character <em>except</em> line terminators:\n          <code>\\n</code>, <code>\\r</code>, <code>\\u2028</code> or\n          <code>\\u2029</code>. For example, <code>/.y/</code> matches \"my\" and\n          \"ay\", but not \"yes\", in \"yes make my day\", as there is no character before \"y\" in \"yes\". If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>dotAll</code></a> (s) flag is enabled, also matches line terminators.\n          Inside a character class, the dot loses its special meaning and\n          matches a literal dot.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 5,
      "totalChunks": 42,
      "startLineNumber": 73,
      "endLineNumber": 96
    }
  },
  {
    "content": "matches a literal dot.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Digit character class escape:</strong></a>\n          Matches any digit (Arabic numeral). Equivalent to <code>[0-9]</code>.\n          For example, <code>/\\d/</code> or <code>/[0-9]/</code> matches \"2\" in\n          \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-digit character class escape:</strong></a>\n          Matches any character that is not a digit (Arabic numeral). Equivalent\n          to <code>[^0-9]</code>. For example, <code>/\\D/</code> or\n          <code>/[^0-9]/</code> matches \"B\" in \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 6,
      "totalChunks": 42,
      "startLineNumber": 89,
      "endLineNumber": 115
    }
  },
  {
    "content": "to <code>[^0-9]</code>. For example, <code>/\\D/</code> or\n          <code>/[^0-9]/</code> matches \"B\" in \"B2 is the suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Word character class escape:</strong></a>\n          Matches any alphanumeric character from the basic Latin alphabet,\n          including the underscore. Equivalent to <code>[A-Za-z0-9_]</code>. For\n          example, <code>/\\w/</code> matches \"a\" in \"apple\", \"5\" in \"$5.28\", \"3\"\n          in \"3D\" and \"m\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-word character class escape:</strong></a>\n          Matches any character that is not a word character from the basic",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 7,
      "totalChunks": 42,
      "startLineNumber": 110,
      "endLineNumber": 132
    }
  },
  {
    "content": "Matches any character that is not a word character from the basic\n          Latin alphabet. Equivalent to <code>[^A-Za-z0-9_]</code>. For example,\n          <code>/\\W/</code> or <code>/[^A-Za-z0-9_]/</code> matches \"%\" in \"50%\"\n          and \"É\" in \"Émanuel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>White space character class escape:</strong></a>\n          Matches a single white space character, including space, tab, form\n          feed, line feed, and other Unicode spaces. Equivalent to\n          <code>[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>. For example, <code>/\\s\\w*/</code> matches \" bar\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 8,
      "totalChunks": 42,
      "startLineNumber": 132,
      "endLineNumber": 153
    }
  },
  {
    "content": "</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"><strong>Non-white space character class escape:</strong></a>\n          Matches a single character other than white space. Equivalent to\n          <code>[^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>. For example, <code>/\\S\\w*/</code> matches \"foo\" in \"foo bar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Matches a horizontal tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Matches a carriage return.</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Matches a linefeed.</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Matches a vertical tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Matches a form-feed.</td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 9,
      "totalChunks": 42,
      "startLineNumber": 147,
      "endLineNumber": 180
    }
  },
  {
    "content": "</tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Matches a vertical tab.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Matches a form-feed.</td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>\n        Matches a backspace. If you're looking for the word-boundary assertion\n        (<code>\\b</code>), see\n        <a\n          href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n          >Assertions</a\n        >.\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Matches a NUL character. Do not follow this with another digit.</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\c<em>X</em></code>\n      </td>\n      <td>\n        <p>\n          Matches a control character using\n          <a href=\"https://en.wikipedia.org/wiki/Caret_notation\"\n            >caret notation</a\n          >, where \"X\" is a letter from A–Z (corresponding to code points",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 10,
      "totalChunks": 42,
      "startLineNumber": 171,
      "endLineNumber": 204
    }
  },
  {
    "content": "<a href=\"https://en.wikipedia.org/wiki/Caret_notation\"\n            >caret notation</a\n          >, where \"X\" is a letter from A–Z (corresponding to code points\n          <code>U+0001</code><em>–</em><code>U+001A</code>). For example,\n          <code>/\\cM\\cJ/</code> matches \"\\r\\n\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\x<em>hh</em></code>\n      </td>\n      <td>\n        Matches the character with the code <code><em>hh</em></code> (two\n        hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>hhhh</em></code>\n      </td>\n      <td>\n        Matches a UTF-16 code-unit with the value\n        <code><em>hhhh</em></code> (four hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\u<em>{hhhh}</em> or <em>\\u{hhhhh}</em></code>\n      </td>\n      <td>\n        (Only when the <code>u</code> flag is set.) Matches the character with\n        the Unicode value <code>U+<em>hhhh</em></code> or <code",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 11,
      "totalChunks": 42,
      "startLineNumber": 202,
      "endLineNumber": 234
    }
  },
  {
    "content": "</td>\n      <td>\n        (Only when the <code>u</code> flag is set.) Matches the character with\n        the Unicode value <code>U+<em>hhhh</em></code> or <code\n          >U+<em>hhhhh</em></code\n        >\n        (hexadecimal digits).\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\p{<em>UnicodeProperty</em>}</code>,\n        <code>\\P{<em>UnicodeProperty</em>}</code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape\"><strong>Unicode character class escape:</strong></a>\n          Matches a character based on its Unicode character properties: for example, emoji characters, or Japanese\n          <em>katakana</em> characters, or Chinese/Japanese Han/Kanji characters,\n          etc.).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Indicates that the following character should be treated specially, or",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 12,
      "totalChunks": 42,
      "startLineNumber": 231,
      "endLineNumber": 258
    }
  },
  {
    "content": "etc.).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Indicates that the following character should be treated specially, or\n          \"escaped\". It behaves one of two ways.\n        </p>\n        <ul>\n          <li>\n            For characters that are usually treated literally, indicates that\n            the next character is special and not to be interpreted literally.\n            For example, <code>/b/</code> matches the character \"b\". By placing\n            a backslash in front of \"b\", that is by using <code>/\\b/</code>, the\n            character becomes special to mean match a word boundary.\n          </li>\n          <li>\n            For characters that are usually treated specially, indicates that\n            the next character is not special and should be interpreted\n            literally. For example, \"*\" is a special character that means 0 or",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 13,
      "totalChunks": 42,
      "startLineNumber": 250,
      "endLineNumber": 272
    }
  },
  {
    "content": "the next character is not special and should be interpreted\n            literally. For example, \"*\" is a special character that means 0 or\n            more occurrences of the preceding character should be matched; for\n            example, <code>/a*/</code> means match 0 or more \"a\"s. To match\n            <code>*</code> literally, precede it with a backslash; for example,\n            <code>/a\\*/</code> matches \"a*\".\n          </li>\n        </ul>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> To match this character literally, escape it\n            with itself. In other words to search for <code>\\</code> use\n            <code>/\\\\/</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>|<em>y</em></code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"><strong>Disjunction:</strong></a>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 14,
      "totalChunks": 42,
      "startLineNumber": 271,
      "endLineNumber": 294
    }
  },
  {
    "content": "</td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"><strong>Disjunction:</strong></a>\n          Matches either \"x\" or \"y\". Each component, separated by a pipe (<code>|</code>), is called an <em>alternative</em>. For example,\n          <code>/green|red/</code> matches \"green\" in \"green apple\" and \"red\" in\n          \"red apple\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> A disjunction is another way to specify \"a set of choices\", but it's not a character class. Disjunctions are not atoms — you need to use a <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\">group</a> to make it part of a bigger pattern. <code>[abc]</code> is functionally equivalent to <code>(?:a|b|c)</code>.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Character classes",
      "chunkIndex": 15,
      "totalChunks": 42,
      "startLineNumber": 291,
      "endLineNumber": 307
    }
  },
  {
    "content": "## Assertions\n\n[Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Assertions",
      "chunkIndex": 16,
      "totalChunks": 42,
      "startLineNumber": 309,
      "endLineNumber": 311
    }
  },
  {
    "content": "### Boundary-type assertions",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 17,
      "totalChunks": 42,
      "startLineNumber": 313,
      "endLineNumber": 313
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>^</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\"><strong>Input boundary beginning assertion:</strong></a>\n          Matches the beginning of input. If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>multiline</code></a> (m) flag is enabled,\n          also matches immediately after a line break character. For example,\n          <code>/^A/</code> does not match the \"A\" in \"an A\", but does match the\n          first \"A\" in \"An A\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> This character has a different meaning when\n            it appears at the start of a\n            <a",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 18,
      "totalChunks": 42,
      "startLineNumber": 315,
      "endLineNumber": 337
    }
  },
  {
    "content": "</p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> This character has a different meaning when\n            it appears at the start of a\n            <a\n              href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n              >character class</a\n            >.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>$</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion\"><strong>Input boundary end assertion:</strong></a>\n          Matches the end of input. If the <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>multiline</code></a> (m) flag is enabled, also\n          matches immediately before a line break character. For example,\n          <code>/t$/</code> does not match the \"t\" in \"eater\", but does match it\n          in \"eat\".\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 19,
      "totalChunks": 42,
      "startLineNumber": 332,
      "endLineNumber": 357
    }
  },
  {
    "content": "<code>/t$/</code> does not match the \"t\" in \"eater\", but does match it\n          in \"eat\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\"><strong>Word boundary assertion:</strong></a>\n          Matches a word boundary. This is the position where a word character\n          is not followed or preceded by another word-character, such as between\n          a letter and a space. Note that a matched word boundary is not\n          included in the match. In other words, the length of a matched word\n          boundary is zero.\n        </p>\n        <p>Examples:</p>\n        <ul>\n          <li><code>/\\bm/</code> matches the \"m\" in \"moon\".</li>\n          <li>\n            <code>/oo\\b/</code> does not match the \"oo\" in \"moon\", because \"oo\"\n            is followed by \"n\" which is a word character.\n          </li>\n          <li>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 20,
      "totalChunks": 42,
      "startLineNumber": 352,
      "endLineNumber": 375
    }
  },
  {
    "content": "<li>\n            <code>/oo\\b/</code> does not match the \"oo\" in \"moon\", because \"oo\"\n            is followed by \"n\" which is a word character.\n          </li>\n          <li>\n            <code>/oon\\b/</code> matches the \"oon\" in \"moon\", because \"oon\" is\n            the end of the string, thus not followed by a word character.\n          </li>\n          <li>\n            <code>/\\w\\b\\w/</code> will never match anything, because a word\n            character can never be followed by both a non-word and a word\n            character.\n          </li>\n        </ul>\n        <p>\n          To match a backspace character (<code>[\\b]</code>), see\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n            >Character Classes</a\n          >.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 21,
      "totalChunks": 42,
      "startLineNumber": 371,
      "endLineNumber": 397
    }
  },
  {
    "content": ">Character Classes</a\n          >.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion\"><strong>Non-word-boundary assertion:</strong></a>\n          Matches a non-word boundary. This is a position where the previous and\n          next character are of the same type: Either both must be words, or\n          both must be non-words, for example between two letters or between two\n          spaces. The beginning and end of a string are considered non-words.\n          Same as the matched word boundary, the matched non-word boundary is\n          also not included in the match. For example,\n          <code>/\\Bon/</code> matches \"on\" in \"at noon\", and\n          <code>/ye\\B/</code> matches \"ye\" in \"possibly yesterday\".\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Boundary-type assertions",
      "chunkIndex": 22,
      "totalChunks": 42,
      "startLineNumber": 389,
      "endLineNumber": 411
    }
  },
  {
    "content": "### Other assertions\n\n> [!NOTE]\n> The `?` character may also be used as a quantifier.",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 23,
      "totalChunks": 42,
      "startLineNumber": 413,
      "endLineNumber": 416
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>x(?=y)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Lookahead assertion:</strong></a>\n          Matches \"x\" only if \"x\" is\n          followed by \"y\". For example, <code>/Jack(?=Sprat)/</code> matches\n          \"Jack\" only if it is followed by \"Sprat\".<br /><code\n            >/Jack(?=Sprat|Frost)/</code\n          >\n          matches \"Jack\" only if it is followed by \"Sprat\" or \"Frost\". However,\n          neither \"Sprat\" nor \"Frost\" is part of the match results.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>x(?!y)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Negative lookahead assertion:</strong></a>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 24,
      "totalChunks": 42,
      "startLineNumber": 418,
      "endLineNumber": 445
    }
  },
  {
    "content": "<td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"><strong>Negative lookahead assertion:</strong></a>\n          Matches \"x\" only if \"x\"\n          is not followed by \"y\". For example, <code>/\\d+(?!\\.)/</code> matches\n          a number only if it is not followed by a decimal point. <code\n            >/\\d+(?!\\.)/.exec('3.141')</code\n          >\n          matches \"141\" but not \"3\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;=y)x</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"><strong>Lookbehind assertion:</strong></a>\n          Matches \"x\" only if \"x\" is\n          preceded by \"y\". For example,\n          <code>/(?&#x3C;=Jack)Sprat/</code> matches \"Sprat\" only if it is\n          preceded by \"Jack\". <code>/(?&#x3C;=Jack|Tom)Sprat/</code> matches",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 25,
      "totalChunks": 42,
      "startLineNumber": 443,
      "endLineNumber": 463
    }
  },
  {
    "content": "preceded by \"y\". For example,\n          <code>/(?&#x3C;=Jack)Sprat/</code> matches \"Sprat\" only if it is\n          preceded by \"Jack\". <code>/(?&#x3C;=Jack|Tom)Sprat/</code> matches\n          \"Sprat\" only if it is preceded by \"Jack\" or \"Tom\". However, neither\n          \"Jack\" nor \"Tom\" is part of the match results.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;!y)x</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"><strong>Negative lookbehind assertion:</strong></a>\n          Matches \"x\" only if\n          \"x\" is not preceded by \"y\". For example,\n          <code>/(?&#x3C;!-)\\d+/</code> matches a number only if it is not\n          preceded by a minus sign. <code>/(?&#x3C;!-)\\d+/.exec('3')</code>\n          matches \"3\". <code>/(?&#x3C;!-)\\d+/.exec('-3')</code>  match is not\n          found because the number is preceded by the minus sign.\n        </p>\n      </td>\n    </tr>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 26,
      "totalChunks": 42,
      "startLineNumber": 461,
      "endLineNumber": 482
    }
  },
  {
    "content": "matches \"3\". <code>/(?&#x3C;!-)\\d+/.exec('-3')</code>  match is not\n          found because the number is preceded by the minus sign.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Other assertions",
      "chunkIndex": 27,
      "totalChunks": 42,
      "startLineNumber": 478,
      "endLineNumber": 484
    }
  },
  {
    "content": "## Groups and backreferences\n\n[Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) indicate groups of expression characters.",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 28,
      "totalChunks": 42,
      "startLineNumber": 486,
      "endLineNumber": 488
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>(<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\"><strong>Capturing group:</strong></a>\n          Matches <code><em>x</em></code> and\n          remembers the match. For example, <code>/(foo)/</code> matches and\n          remembers \"foo\" in \"foo bar\".\n        </p>\n        <p>\n          A regular expression may have multiple capturing groups. In results,\n          matches to capturing groups typically in an array whose members are in\n          the same order as the left parentheses in the capturing group. This is\n          usually just the order of the capturing groups themselves. This\n          becomes important when capturing groups are nested. Matches are",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 29,
      "totalChunks": 42,
      "startLineNumber": 490,
      "endLineNumber": 512
    }
  },
  {
    "content": "usually just the order of the capturing groups themselves. This\n          becomes important when capturing groups are nested. Matches are\n          accessed using the index of the result's elements (<code\n            >[1], …, [n]</code\n          >) or from the predefined <code>RegExp</code> object's properties\n          (<code>$1, …, $9</code>).\n        </p>\n        <p>\n          Capturing groups have a performance penalty. If you don't need the\n          matched substring to be recalled, prefer non-capturing parentheses\n          (see below).\n        </p>\n        <p>\n          <code\n            ><a\n              href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"\n              >String.prototype.match()</a\n            ></code\n          >\n          won't return groups if the <code>/.../g</code> flag is set. However,\n          you can still use\n          <code\n            ><a",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 30,
      "totalChunks": 42,
      "startLineNumber": 511,
      "endLineNumber": 533
    }
  },
  {
    "content": "></code\n          >\n          won't return groups if the <code>/.../g</code> flag is set. However,\n          you can still use\n          <code\n            ><a\n              href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"\n              >String.prototype.matchAll()</a\n            ></code\n          >\n          to get all matches.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;Name>x)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\"><strong>Named capturing group:</strong></a>\n          Matches \"x\" and stores it on\n          the groups property of the returned matches under the name specified\n          by <code>&#x3C;Name></code>. The angle brackets (<code>&#x3C;</code>\n          and <code>></code>) are required for group name.\n        </p>\n        <p>\n          For example, to extract the United States area code from a phone",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 31,
      "totalChunks": 42,
      "startLineNumber": 528,
      "endLineNumber": 553
    }
  },
  {
    "content": "and <code>></code>) are required for group name.\n        </p>\n        <p>\n          For example, to extract the United States area code from a phone\n          number, we could use <code>/\\((?&#x3C;area>\\d\\d\\d)\\)/</code>. The\n          resulting number would appear under <code>matches.groups.area</code>.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?:<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\"><strong>Non-capturing group:</strong></a>\n          Matches \"x\" but does not remember\n          the match. The matched substring cannot be recalled from the resulting\n          array's elements (<code>[1], …, [n]</code>) or from the predefined\n          <code>RegExp</code> object's properties (<code>$1, …, $9</code>).\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 32,
      "totalChunks": 42,
      "startLineNumber": 550,
      "endLineNumber": 571
    }
  },
  {
    "content": "array's elements (<code>[1], …, [n]</code>) or from the predefined\n          <code>RegExp</code> object's properties (<code>$1, …, $9</code>).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?<em>flags</em>:<em>x</em>)</code>, <code>(?:<em>flags</em>-<em>flags</em>:<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier\"><strong>Modifier:</strong></a>\n          Enables or disables the specified flags only to the enclosed pattern. Only the <code>i</code>, <code>m</code>, and <code>s</code> flags can be used in a modifier.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\<em>n</em></code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference\"><strong>Backreference:</strong></a>\n          Where \"n\" is a positive integer. Matches the same substring matched by",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 33,
      "totalChunks": 42,
      "startLineNumber": 566,
      "endLineNumber": 587
    }
  },
  {
    "content": "Where \"n\" is a positive integer. Matches the same substring matched by\n          the nth capturing group in the regular expression\n          (counting left parentheses). For example,\n          <code>/apple(,)\\sorange\\1/</code> matches \"apple, orange,\" in \"apple,\n          orange, cherry, peach\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\k&#x3C;Name></code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference\"><strong>Named backreference:</strong></a>\n          A back reference to the last substring matching the\n          <strong>Named capture group</strong> specified by\n          <code>&#x3C;Name></code>.\n        </p>\n        <p>\n          For example,\n          <code>/(?&#x3C;title>\\w+), yes \\k&#x3C;title>/</code> matches \"Sir,\n          yes Sir\" in \"Do you copy? Sir, yes Sir!\".\n        </p>\n        <div class=\"notecard note\">\n          <p>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 34,
      "totalChunks": 42,
      "startLineNumber": 587,
      "endLineNumber": 610
    }
  },
  {
    "content": "<code>/(?&#x3C;title>\\w+), yes \\k&#x3C;title>/</code> matches \"Sir,\n          yes Sir\" in \"Do you copy? Sir, yes Sir!\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> <code>\\k</code> is used literally here to\n            indicate the beginning of a back reference to a Named capture group.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Groups and backreferences",
      "chunkIndex": 35,
      "totalChunks": 42,
      "startLineNumber": 606,
      "endLineNumber": 618
    }
  },
  {
    "content": "## Quantifiers\n\n[Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) indicate numbers of characters or expressions to match.\n\n> [!NOTE]\n> In the following, _item_ refers not only to singular characters, but also includes [character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) and [groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences).",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 36,
      "totalChunks": 42,
      "startLineNumber": 620,
      "endLineNumber": 625
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code><em>x</em>*</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or more times. For example,\n          <code>/bo*/</code> matches \"boooo\" in \"A ghost booooed\" and \"b\" in \"A\n          bird warbled\", but nothing in \"A goat grunted\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>+</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 1 or more times. Equivalent to\n          <code>{1,}</code>. For example, <code>/a+/</code> matches the \"a\" in\n          \"candy\" and all the \"a\"'s in \"caaaaaaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>?</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or 1 times. For example,",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 37,
      "totalChunks": 42,
      "startLineNumber": 627,
      "endLineNumber": 665
    }
  },
  {
    "content": "</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>?</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or 1 times. For example,\n          <code>/e?le?/</code> matches the \"el\" in \"angel\" and the \"le\" in\n          \"angle.\"\n        </p>\n        <p>\n          If used immediately after any of the quantifiers <code>*</code>,\n          <code>+</code>, <code>?</code>, or <code>{}</code>, makes the\n          quantifier non-greedy (matching the minimum number of times), as\n          opposed to the default, which is greedy (matching the maximum number\n          of times).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>}</code>\n      </td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2}/</code> doesn't match",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 38,
      "totalChunks": 42,
      "startLineNumber": 656,
      "endLineNumber": 685
    }
  },
  {
    "content": "</td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2}/</code> doesn't match\n          the \"a\" in \"candy\", but it matches all of the \"a\"'s in \"caandy\", and\n          the first two \"a\"'s in \"caaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>,}</code>\n      </td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches at least \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2,}/</code> doesn't\n          match the \"a\" in \"candy\", but matches all of the a's in \"caandy\" and\n          in \"caaaaaaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>,<em>m</em>}</code>\n      </td>\n      <td>\n        <!-- cSpell:ignore cndy -->\n        <p>\n          Where \"n\" and \"m\" are non-negative integers and <code>m >= n</code>,",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 39,
      "totalChunks": 42,
      "startLineNumber": 681,
      "endLineNumber": 711
    }
  },
  {
    "content": "</td>\n      <td>\n        <!-- cSpell:ignore cndy -->\n        <p>\n          Where \"n\" and \"m\" are non-negative integers and <code>m >= n</code>,\n          matches at least \"n\" and at most \"m\" occurrences of the preceding\n          item \"x\". For example, <code>/a{1,3}/</code> matches nothing in\n          \"cndy\", the \"a\" in \"candy\", the two \"a\"'s in \"caandy\", and the first\n          three \"a\"'s in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\",\n          the match is \"aaa\", even though the original string had more \"a\"s in\n          it.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code><em>x</em>*?</code><br /><code><em>x</em>+?</code><br /><code\n            ><em>x</em>??</code\n          ><br /><code><em>x</em>{n}?</code><br /><code><em>x</em>{n,}?</code\n          ><br /><code><em>x</em>{n,m}?</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          By default quantifiers like <code>*</code> and <code>+</code> are",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 40,
      "totalChunks": 42,
      "startLineNumber": 707,
      "endLineNumber": 732
    }
  },
  {
    "content": "><br /><code><em>x</em>{n,m}?</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          By default quantifiers like <code>*</code> and <code>+</code> are\n          \"greedy\", meaning that they try to match as much of the string as\n          possible. The <code>?</code> character after the quantifier makes the\n          quantifier \"non-greedy\": meaning that it will stop as soon as it finds\n          a match. For example, given a string like \"some &#x3C;foo> &#x3C;bar>\n          new &#x3C;/bar> &#x3C;/foo> thing\":\n        </p>\n        <ul>\n          <li>\n            <code>/&#x3C;.*>/</code> will match \"&#x3C;foo> &#x3C;bar> new\n            &#x3C;/bar> &#x3C;/foo>\"\n          </li>\n          <li><code>/&#x3C;.*?>/</code> will match \"&#x3C;foo>\"</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/cheatsheet/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Cheatsheet",
      "documentTitle": "Regular expression syntax cheat sheet",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Quantifiers",
      "chunkIndex": 41,
      "totalChunks": 42,
      "startLineNumber": 727,
      "endLineNumber": 749
    }
  },
  {
    "content": "Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.\n\n{{InteractiveExample(\"JavaScript Demo: RegExp Groups and backreferences\")}}\n\n```js interactive-example\n// Groups\nconst imageDescription = \"This image has a resolution of 1440×900 pixels.\";\nconst regexpSize = /(\\d+)×(\\d+)/;\nconst match = imageDescription.match(regexpSize);\nconsole.log(`Width: ${match[1]} / Height: ${match[2]}.`);\n// Expected output: \"Width: 1440 / Height: 900.\"\n\n// Backreferences\nconst findDuplicates = \"foo foo bar\";\nconst regex = /\\b(\\w+)\\s+\\1\\b/g;\nconsole.log(findDuplicates.match(regex));\n// Expected output: Array [\"foo foo\"]\n```",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 16,
      "startLineNumber": 8,
      "endLineNumber": 25
    }
  },
  {
    "content": "## Types",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 1,
      "totalChunks": 16,
      "startLineNumber": 27,
      "endLineNumber": 27
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>(<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\"><strong>Capturing group:</strong></a>\n          Matches <code><em>x</em></code> and\n          remembers the match. For example, <code>/(foo)/</code> matches and\n          remembers \"foo\" in \"foo bar\".\n        </p>\n        <p>\n          A regular expression may have multiple capturing groups. In results,\n          matches to capturing groups typically in an array whose members are in\n          the same order as the left parentheses in the capturing group. This is\n          usually just the order of the capturing groups themselves. This\n          becomes important when capturing groups are nested. Matches are",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 2,
      "totalChunks": 16,
      "startLineNumber": 29,
      "endLineNumber": 51
    }
  },
  {
    "content": "usually just the order of the capturing groups themselves. This\n          becomes important when capturing groups are nested. Matches are\n          accessed using the index of the result's elements (<code\n            >[1], …, [n]</code\n          >) or from the predefined <code>RegExp</code> object's properties\n          (<code>$1, …, $9</code>).\n        </p>\n        <p>\n          Capturing groups have a performance penalty. If you don't need the\n          matched substring to be recalled, prefer non-capturing parentheses\n          (see below).\n        </p>\n        <p>\n          <code\n            ><a\n              href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"\n              >String.prototype.match()</a\n            ></code\n          >\n          won't return groups if the <code>/.../g</code> flag is set. However,\n          you can still use\n          <code\n            ><a",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 3,
      "totalChunks": 16,
      "startLineNumber": 50,
      "endLineNumber": 72
    }
  },
  {
    "content": "></code\n          >\n          won't return groups if the <code>/.../g</code> flag is set. However,\n          you can still use\n          <code\n            ><a\n              href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"\n              >String.prototype.matchAll()</a\n            ></code\n          >\n          to get all matches.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&#x3C;Name>x)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group\"><strong>Named capturing group:</strong></a>\n          Matches \"x\" and stores it on\n          the groups property of the returned matches under the name specified\n          by <code>&#x3C;Name></code>. The angle brackets (<code>&#x3C;</code>\n          and <code>></code>) are required for group name.\n        </p>\n        <p>\n          For example, to extract the United States area code from a phone",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 4,
      "totalChunks": 16,
      "startLineNumber": 67,
      "endLineNumber": 92
    }
  },
  {
    "content": "and <code>></code>) are required for group name.\n        </p>\n        <p>\n          For example, to extract the United States area code from a phone\n          number, we could use <code>/\\((?&#x3C;area>\\d\\d\\d)\\)/</code>. The\n          resulting number would appear under <code>matches.groups.area</code>.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?:<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\"><strong>Non-capturing group:</strong></a>\n          Matches \"x\" but does not remember\n          the match. The matched substring cannot be recalled from the resulting\n          array's elements (<code>[1], …, [n]</code>) or from the predefined\n          <code>RegExp</code> object's properties (<code>$1, …, $9</code>).\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 5,
      "totalChunks": 16,
      "startLineNumber": 89,
      "endLineNumber": 110
    }
  },
  {
    "content": "array's elements (<code>[1], …, [n]</code>) or from the predefined\n          <code>RegExp</code> object's properties (<code>$1, …, $9</code>).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?<em>flags</em>:<em>x</em>)</code>, <code>(?:<em>flags</em>-<em>flags</em>:<em>x</em>)</code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier\"><strong>Modifier:</strong></a>\n          Enables or disables the specified flags only to the enclosed pattern. Only the <code>i</code>, <code>m</code>, and <code>s</code> flags can be used in a modifier.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>\\<em>n</em></code>\n      </td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference\"><strong>Backreference:</strong></a>\n          Where \"n\" is a positive integer. Matches the same substring matched by",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 6,
      "totalChunks": 16,
      "startLineNumber": 105,
      "endLineNumber": 126
    }
  },
  {
    "content": "Where \"n\" is a positive integer. Matches the same substring matched by\n          the nth capturing group in the regular expression\n          (counting left parentheses). For example,\n          <code>/apple(,)\\sorange\\1/</code> matches \"apple, orange,\" in \"apple,\n          orange, cherry, peach\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\k&#x3C;Name></code></td>\n      <td>\n        <p>\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference\"><strong>Named backreference:</strong></a>\n          A back reference to the last substring matching the\n          <strong>Named capture group</strong> specified by\n          <code>&#x3C;Name></code>.\n        </p>\n        <p>\n          For example,\n          <code>/(?&#x3C;title>\\w+), yes \\k&#x3C;title>/</code> matches \"Sir,\n          yes Sir\" in \"Do you copy? Sir, yes Sir!\".\n        </p>\n        <div class=\"notecard note\">\n          <p>",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 7,
      "totalChunks": 16,
      "startLineNumber": 126,
      "endLineNumber": 149
    }
  },
  {
    "content": "<code>/(?&#x3C;title>\\w+), yes \\k&#x3C;title>/</code> matches \"Sir,\n          yes Sir\" in \"Do you copy? Sir, yes Sir!\".\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> <code>\\k</code> is used literally here to\n            indicate the beginning of a back reference to a Named capture group.\n          </p>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 8,
      "totalChunks": 16,
      "startLineNumber": 145,
      "endLineNumber": 157
    }
  },
  {
    "content": "## Examples\n\n### Using groups\n\nIn this example, we match two words in a structured format by using capturing groups to remember them. `\\w+` matches one or more word characters, and the parentheses `()` create a capturing group. The `g` flag is used to match all occurrences.\n\n```js\nconst personList = `First_Name: John, Last_Name: Doe\nFirst_Name: Jane, Last_Name: Smith`;\n\nconst regexpNames = /First_Name: (\\w+), Last_Name: (\\w+)/g;\nfor (const match of personList.matchAll(regexpNames)) {\n  console.log(`Hello ${match[1]} ${match[2]}`);\n}\n```\n\nSee more examples in the [capturing group](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group) reference.",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 9,
      "totalChunks": 16,
      "startLineNumber": 159,
      "endLineNumber": 175
    }
  },
  {
    "content": "### Using named groups\n\nThis example is the same as above, but we use named capturing groups to remember the matched words instead. This way, we can access the matched words by their meanings.\n\n```js\nconst personList = `First_Name: John, Last_Name: Doe\nFirst_Name: Jane, Last_Name: Smith`;\n\nconst regexpNames =\n  /First_Name: (?<firstName>\\w+), Last_Name: (?<lastName>\\w+)/g;\nfor (const match of personList.matchAll(regexpNames)) {\n  console.log(`Hello ${match.groups.firstName} ${match.groups.lastName}`);\n}\n```\n\nSee more examples in the [named capturing group](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group) reference.",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using named groups",
      "chunkIndex": 10,
      "totalChunks": 16,
      "startLineNumber": 177,
      "endLineNumber": 192
    }
  },
  {
    "content": "### Using groups and back references\n\nIn this example, we first match a single or double quote character with `['\"]`, remember it, match an arbitrary number of characters with `.*?` (`*?` is a [non-greedy quantifier](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)), until we match the remembered quote character again with `\\1`. The `\\1` is a backreference to the first capturing group, which matches the same type of quote. The result will therefore be two strings: `\"'\"` and `'\"'`.\n\n```js\nconst quote = `Single quote \"'\" and double quote '\"'`;\nconst regexpQuotes = /(['\"]).*?\\1/g;\nfor (const match of quote.matchAll(regexpQuotes)) {\n  console.log(match[0]);\n}\n```\n\nSee more examples in the [backreference](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference) reference.",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using groups and back references",
      "chunkIndex": 11,
      "totalChunks": 16,
      "startLineNumber": 194,
      "endLineNumber": 206
    }
  },
  {
    "content": "### Using groups and match indices\n\nBy providing the `d` flag, the indices of each capturing group is returned. This is especially useful if you are correlating each matched group with the original text — for example, to provide compiler diagnostics.\n\n```js\nconst code = `function add(x, y) {\n  return x + y;\n}`;\nconst functionRegexp =\n  /(function\\s+)(?<name>[$_\\p{ID_Start}][$\\p{ID_Continue}]*)/du;\nconst match = functionRegexp.exec(code);\nconst lines = code.split(\"\\n\");\nlines.splice(\n  1,\n  0,\n  \" \".repeat(match.indices[1][1] - match.indices[1][0]) +\n    \"^\".repeat(match.indices.groups.name[1] - match.indices.groups.name[0]),\n);\nconsole.log(lines.join(\"\\n\"));\n// function add(x, y) {\n//          ^^^\n//   return x + y;\n// }\n```",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using groups and match indices",
      "chunkIndex": 12,
      "totalChunks": 16,
      "startLineNumber": 208,
      "endLineNumber": 231
    }
  },
  {
    "content": "## See also",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 13,
      "totalChunks": 16,
      "startLineNumber": 233,
      "endLineNumber": 233
    }
  },
  {
    "content": "- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n- [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) guide\n- [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide\n- [`RegExp`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) reference\n- [Backreference: `\\1`, `\\2`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference)\n- [Capturing group: `(...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group)\n- [Named backreference: `\\k<name>`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference)\n- [Named capturing group: `(?<name>...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 14,
      "totalChunks": 16,
      "startLineNumber": 235,
      "endLineNumber": 244
    }
  },
  {
    "content": "- [Named capturing group: `(?<name>...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)\n- [Non-capturing group: `(?:...)`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group)",
    "metadata": {
      "source": "regular_expressions/groups_and_backreferences/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences",
      "documentTitle": "Groups and backreferences",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 15,
      "totalChunks": 16,
      "startLineNumber": 244,
      "endLineNumber": 245
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Representing_dates_times\", \"Web/JavaScript/Guide/Indexed_collections\")}}\n\nRegular expressions are patterns used to match character combinations in strings.\nIn JavaScript, regular expressions are also objects. These patterns are used with the {{jsxref(\"RegExp/exec\", \"exec()\")}} and {{jsxref(\"RegExp/test\", \"test()\")}} methods of {{jsxref(\"RegExp\")}}, and with the {{jsxref(\"String/match\", \"match()\")}}, {{jsxref(\"String/matchAll\", \"matchAll()\")}}, {{jsxref(\"String/replace\", \"replace()\")}}, {{jsxref(\"String/replaceAll\", \"replaceAll()\")}}, {{jsxref(\"String/search\", \"search()\")}}, and {{jsxref(\"String/split\", \"split()\")}} methods of {{jsxref(\"String\")}}.\nThis chapter describes JavaScript regular expressions. It provides a brief overview of each syntax element. For a detailed explanation of each one's semantics, read the [regular expressions](/en-US/docs/Web/JavaScript/Reference/Regular_expressions) reference.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 36,
      "startLineNumber": 8,
      "endLineNumber": 12
    }
  },
  {
    "content": "## Creating a regular expression\n\nYou construct a regular expression in one of two ways:\n\n- Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows:\n\n  ```js\n  const re = /ab+c/;\n  ```\n\n  Regular expression literals provide compilation of the regular expression when the script is loaded.\n  If the regular expression remains constant, using this can improve performance.\n\n- Or calling the constructor function of the {{jsxref(\"RegExp\")}} object, as follows:\n\n  ```js\n  const re = new RegExp(\"ab+c\");\n  ```\n\n  Using the constructor function provides runtime compilation of the regular expression.\n  Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating a regular expression",
      "chunkIndex": 1,
      "totalChunks": 36,
      "startLineNumber": 14,
      "endLineNumber": 34
    }
  },
  {
    "content": "## Writing a regular expression pattern\n\nA regular expression pattern is composed of simple characters, such as `/abc/`, or a combination of simple and special characters, such as `/ab*c/` or `/Chapter (\\d+)\\.\\d*/`.\nThe last example includes parentheses, which are used as a memory device.\nThe match made with this part of the pattern is remembered for later use, as described in [Using groups](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences#using_groups).",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Writing a regular expression pattern",
      "chunkIndex": 2,
      "totalChunks": 36,
      "startLineNumber": 36,
      "endLineNumber": 40
    }
  },
  {
    "content": "### Using simple patterns\n\nSimple patterns are constructed of characters for which you want to find a direct match. For example, the pattern `/abc/` matches character combinations in strings only when the exact sequence `\"abc\"` occurs (all characters together and in that order).\nSuch a match would succeed in the strings `\"Hi, do you know your abc's?\"` and `\"The latest airplane designs evolved from slabcraft.\"`.\nIn both cases the match is with the substring `\"abc\"`.\nThere is no match in the string `\"Grab crab\"` because while it contains the substring `\"ab c\"`, it does not contain the exact substring `\"abc\"`.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using simple patterns",
      "chunkIndex": 3,
      "totalChunks": 36,
      "startLineNumber": 42,
      "endLineNumber": 47
    }
  },
  {
    "content": "### Using special characters\n\nWhen the search for a match requires something more than a direct match, such as finding one or more b's, or finding white space, you can include special characters in the pattern.\nFor example, to match _a single `\"a\"` followed by zero or more `\"b\"`s followed by `\"c\"`_, you'd use the pattern `/ab*c/`: the `*` after `\"b\"` means \"0 or more occurrences of the preceding item.\"\nIn the string `\"cbbabbbbcdebc\"`, this pattern will match the substring `\"abbbbc\"`.\n\nThe following pages provide lists of the different special characters that fit into each category, along with descriptions and examples.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 4,
      "totalChunks": 36,
      "startLineNumber": 49,
      "endLineNumber": 55
    }
  },
  {
    "content": "- [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) guide\n  - : Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).\n- [Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n  - : Distinguish different types of characters. For example, distinguishing between letters and digits.\n- [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n  - : Groups group multiple patterns as a whole, and capturing groups provide extra submatch information when using a regular expression pattern to match against a string. Backreferences refer to a previously captured group in the same regular expression.\n- [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 5,
      "totalChunks": 36,
      "startLineNumber": 57,
      "endLineNumber": 63
    }
  },
  {
    "content": "- [Quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers) guide\n  - : Indicate numbers of characters or expressions to match.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 6,
      "totalChunks": 36,
      "startLineNumber": 63,
      "endLineNumber": 64
    }
  },
  {
    "content": "If you want to look at all the special characters that can be used in regular expressions in a single table, see the following:",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 7,
      "totalChunks": 36,
      "startLineNumber": 66,
      "endLineNumber": 66
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <caption>\n    Special characters in regular expressions.\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters / constructs</th>\n      <th scope=\"col\">Corresponding article</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code>[xyz]</code>, <code>[^xyz]</code>, <code>.</code>,\n        <code>\\d</code>, <code>\\D</code>, <code>\\w</code>, <code>\\W</code>,\n        <code>\\s</code>, <code>\\S</code>, <code>\\t</code>, <code>\\r</code>,\n        <code>\\n</code>, <code>\\v</code>, <code>\\f</code>, <code>[\\b]</code>,\n        <code>\\0</code>, <code>\\c<em>X</em></code>, <code>\\x<em>hh</em></code>,\n        <code>\\u<em>hhhh</em></code>, <code>\\u<em>{hhhh}</em></code>,\n        <code><em>x</em>|<em>y</em></code>\n      </td>\n      <td>\n        <p>\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n            >Character classes</a\n          >\n        </p>\n      </td>\n    </tr>\n    <tr>",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 8,
      "totalChunks": 36,
      "startLineNumber": 68,
      "endLineNumber": 98
    }
  },
  {
    "content": "<a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\n            >Character classes</a\n          >\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>^</code>, <code>$</code>, <code>\\b</code>, <code>\\B</code>,\n        <code>x(?=y)</code>, <code>x(?!y)</code>, <code>(?&#x3C;=y)x</code>,\n        <code>(?&#x3C;!y)x</code>\n      </td>\n      <td>\n        <p>\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\n            >Assertions</a\n          >\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code>(<em>x</em>)</code>, <code>(?&#x3C;Name>x)</code>, <code>(?:<em>x</em>)</code>,\n        <code>\\<em>n</em></code>, <code>\\k&#x3C;Name></code>\n      </td>\n      <td>\n        <p>\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\n            >Groups and backreferences</a\n          >\n        </p>\n      </td>",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 9,
      "totalChunks": 36,
      "startLineNumber": 91,
      "endLineNumber": 125
    }
  },
  {
    "content": "<a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\n            >Groups and backreferences</a\n          >\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>*</code>, <code><em>x</em>+</code>, <code><em>x</em>?</code>,\n        <code><em>x</em>{<em>n</em>}</code>, <code><em>x</em>{<em>n</em>,}</code>,\n        <code><em>x</em>{<em>n</em>,<em>m</em>}</code>\n      </td>\n      <td>\n        <p>\n          <a\n            href=\"/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers\"\n            >Quantifiers</a\n          >\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 10,
      "totalChunks": 36,
      "startLineNumber": 120,
      "endLineNumber": 143
    }
  },
  {
    "content": "> [!NOTE]\n> [A larger cheat sheet is also available](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet) (only aggregating parts of those individual articles).",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters",
      "chunkIndex": 11,
      "totalChunks": 36,
      "startLineNumber": 145,
      "endLineNumber": 146
    }
  },
  {
    "content": "### Escaping\n\nIf you need to use any of the special characters literally (actually searching for a `\"*\"`, for instance), you should escape it by putting a backslash in front of it. For instance, to search for `\"a\"` followed by `\"*\"` followed by `\"b\"`, you'd use `/a\\*b/` — the backslash \"escapes\" the `\"*\"`, making it literal instead of special.\n\n> [!NOTE]\n> In many cases, when trying match a special character, you can wrap it in a [character class](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) as an alternative to escaping, for example `/a[*]b/`.\n\nSimilarly, if you're writing a regular expression literal and need to match a slash (\"/\"), you need to escape that (otherwise, it terminates the pattern).\nFor instance, to search for the string \"/example/\" followed by one or more alphabetic characters, you'd use `/\\/example\\/[a-z]+/i`—the backslashes before each slash make them literal.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Escaping",
      "chunkIndex": 12,
      "totalChunks": 36,
      "startLineNumber": 148,
      "endLineNumber": 156
    }
  },
  {
    "content": "To match a literal backslash, you need to escape the backslash.\nFor instance, to match the string \"C:\\\\\" where \"C\" can be any letter, you'd use `/[A-Z]:\\\\/` — the first backslash escapes the one after it, so the expression searches for a single literal backslash.\n\nIf using the `RegExp` constructor with a string literal, remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level.\n`/a\\*b/` and `new RegExp(\"a\\\\*b\")` create the same expression, which searches for \"a\" followed by a literal \"\\*\" followed by \"b\".\n\nThe {{jsxref(\"RegExp.escape()\")}} function returns a new string where all special characters in regex syntax are escaped. This allows you to do `new RegExp(RegExp.escape(\"a*b\"))` to create a regular expression that matches only the string `\"a*b\"`.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Escaping",
      "chunkIndex": 13,
      "totalChunks": 36,
      "startLineNumber": 158,
      "endLineNumber": 164
    }
  },
  {
    "content": "### Using parentheses\n\nParentheses around any part of the regular expression pattern causes that part of the matched substring to be remembered.\nOnce remembered, the substring can be recalled for other use. See [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences#using_groups) for more details.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using parentheses",
      "chunkIndex": 14,
      "totalChunks": 36,
      "startLineNumber": 166,
      "endLineNumber": 169
    }
  },
  {
    "content": "## Using regular expressions in JavaScript\n\nRegular expressions are used with the {{jsxref(\"RegExp\")}} methods {{jsxref(\"RegExp/test\", \"test()\")}} and {{jsxref(\"RegExp/exec\", \"exec()\")}} and with the {{jsxref(\"String\")}} methods {{jsxref(\"String/match\", \"match()\")}}, {{jsxref(\"String/matchAll\", \"matchAll()\")}}, {{jsxref(\"String/replace\", \"replace()\")}}, {{jsxref(\"String/replaceAll\", \"replaceAll()\")}}, {{jsxref(\"String/search\", \"search()\")}}, and {{jsxref(\"String/split\", \"split()\")}}.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 15,
      "totalChunks": 36,
      "startLineNumber": 171,
      "endLineNumber": 173
    }
  },
  {
    "content": "| Method                                          | Description                                                                                                      |\n| ----------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| {{jsxref(\"RegExp/exec\", \"exec()\")}}             | Executes a search for a match in a string. It returns an array of information or `null` on a mismatch.           |\n| {{jsxref(\"RegExp/test\", \"test()\")}}             | Tests for a match in a string. It returns `true` or `false`.                                                     |\n| {{jsxref(\"String/match\", \"match()\")}}           | Returns an array containing all of the matches, including capturing groups, or `null` if no match is found.      |",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 16,
      "totalChunks": 36,
      "startLineNumber": 175,
      "endLineNumber": 179
    }
  },
  {
    "content": "| {{jsxref(\"String/match\", \"match()\")}}           | Returns an array containing all of the matches, including capturing groups, or `null` if no match is found.      |\n| {{jsxref(\"String/matchAll\", \"matchAll()\")}}     | Returns an iterator containing all of the matches, including capturing groups.                                   |\n| {{jsxref(\"String/search\", \"search()\")}}         | Tests for a match in a string. It returns the index of the match, or `-1` if the search fails.                   |\n| {{jsxref(\"String/replace\", \"replace()\")}}       | Executes a search for a match in a string, and replaces the matched substring with a replacement substring.      |\n| {{jsxref(\"String/replaceAll\", \"replaceAll()\")}} | Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring. |",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 17,
      "totalChunks": 36,
      "startLineNumber": 179,
      "endLineNumber": 183
    }
  },
  {
    "content": "| {{jsxref(\"String/replaceAll\", \"replaceAll()\")}} | Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring. |\n| {{jsxref(\"String/split\", \"split()\")}}           | Uses a regular expression or a fixed string to break a string into an array of substrings.                       |",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 18,
      "totalChunks": 36,
      "startLineNumber": 183,
      "endLineNumber": 184
    }
  },
  {
    "content": "When you want to know whether a pattern is found in a string, use the `test()` or `search()` methods; for more information (but slower execution) use the `exec()` or `match()` methods.\nIf you use `exec()` or `match()` and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, `RegExp`.\nIf the match fails, the `exec()` method returns `null` (which coerces to `false`).\n\nIn the following example, the script uses the `exec()` method to find a match in a string.\n\n```js\nconst myRe = /d(b+)d/g;\nconst myArray = myRe.exec(\"cdbbdbsbz\");\n```\n\nIf you do not need to access the properties of the regular expression, an alternative way of creating `myArray` is with this script:",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 19,
      "totalChunks": 36,
      "startLineNumber": 186,
      "endLineNumber": 197
    }
  },
  {
    "content": "If you do not need to access the properties of the regular expression, an alternative way of creating `myArray` is with this script:\n\n```js\nconst myArray = /d(b+)d/g.exec(\"cdbbdbsbz\");\n// similar to 'cdbbdbsbz'.match(/d(b+)d/g); however,\n// 'cdbbdbsbz'.match(/d(b+)d/g) outputs [ \"dbbd\" ]\n// while /d(b+)d/g.exec('cdbbdbsbz') outputs [ 'dbbd', 'bb', index: 1, input: 'cdbbdbsbz' ]\n```\n\n(See [Using the global search flag with `exec()`](#using_the_global_search_flag_with_exec) for further info about the different behaviors.)\n\nIf you want to construct the regular expression from a string, yet another alternative is this script:\n\n```js\nconst myRe = new RegExp(\"d(b+)d\", \"g\");\nconst myArray = myRe.exec(\"cdbbdbsbz\");\n```\n\nWith these scripts, the match succeeds and returns the array and updates the properties shown in the following table.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 20,
      "totalChunks": 36,
      "startLineNumber": 197,
      "endLineNumber": 215
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <caption>\n    Results of regular expression execution.\n  </caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Object</th>\n      <th scope=\"col\">Property or index</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">In this example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\"><code>myArray</code></td>\n      <td></td>\n      <td>The matched string and all remembered substrings.</td>\n      <td><code>['dbbd', 'bb', index: 1, input: 'cdbbdbsbz']</code></td>\n    </tr>\n    <tr>\n      <td><code>index</code></td>\n      <td>The 0-based index of the match in the input string.</td>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <td><code>input</code></td>\n      <td>The original string.</td>\n      <td><code>'cdbbdbsbz'</code></td>\n    </tr>\n    <tr>\n      <td><code>[0]</code></td>\n      <td>The last matched characters.</td>\n      <td><code>'dbbd'</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\"><code>myRe</code></td>",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 21,
      "totalChunks": 36,
      "startLineNumber": 217,
      "endLineNumber": 252
    }
  },
  {
    "content": "</tr>\n    <tr>\n      <td><code>[0]</code></td>\n      <td>The last matched characters.</td>\n      <td><code>'dbbd'</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\"><code>myRe</code></td>\n      <td><code>lastIndex</code></td>\n      <td>The index at which to start the next match.\n        (This property is set only if the regular expression uses the g option, described in\n        <a href=\"#advanced_searching_with_flags\">Advanced Searching With Flags</a>.)\n      </td>\n      <td><code>5</code></td>\n    </tr>\n    <tr>\n      <td><code>source</code></td>\n      <td>\n        The text of the pattern. Updated at the time that the regular expression is created, not executed.\n      </td>\n      <td><code>'d(b+)d'</code></td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 22,
      "totalChunks": 36,
      "startLineNumber": 245,
      "endLineNumber": 268
    }
  },
  {
    "content": "As shown in the second form of this example, you can use a regular expression created with an object initializer without assigning it to a variable.\nIf you do, however, every occurrence is a new regular expression.\nFor this reason, if you use this form without assigning it to a variable, you cannot subsequently access the properties of that regular expression.\nFor example, assume you have this script:\n\n```js\nconst myRe = /d(b+)d/g;\nconst myArray = myRe.exec(\"cdbbdbsbz\");\nconsole.log(`The value of lastIndex is ${myRe.lastIndex}`);\n\n// \"The value of lastIndex is 5\"\n```\n\nHowever, if you have this script:\n\n```js\nconst myArray = /d(b+)d/g.exec(\"cdbbdbsbz\");\nconsole.log(`The value of lastIndex is ${/d(b+)d/g.lastIndex}`);\n\n// \"The value of lastIndex is 0\"\n```",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 23,
      "totalChunks": 36,
      "startLineNumber": 270,
      "endLineNumber": 290
    }
  },
  {
    "content": "However, if you have this script:\n\n```js\nconst myArray = /d(b+)d/g.exec(\"cdbbdbsbz\");\nconsole.log(`The value of lastIndex is ${/d(b+)d/g.lastIndex}`);\n\n// \"The value of lastIndex is 0\"\n```\n\nThe occurrences of `/d(b+)d/g` in the two statements are different regular expression objects and hence have different values for their `lastIndex` property.\nIf you need to access the properties of a regular expression created with an object initializer, you should first assign it to a variable.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using regular expressions in JavaScript",
      "chunkIndex": 24,
      "totalChunks": 36,
      "startLineNumber": 283,
      "endLineNumber": 293
    }
  },
  {
    "content": "### Advanced searching with flags\n\nRegular expressions have optional flags that allow for functionality like global searching and case-insensitive searching.\nThese flags can be used separately or together in any order, and are included as part of the regular expression.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced searching with flags",
      "chunkIndex": 25,
      "totalChunks": 36,
      "startLineNumber": 295,
      "endLineNumber": 298
    }
  },
  {
    "content": "| Flag | Description                                                                                   | Corresponding property                          |\n| ---- | --------------------------------------------------------------------------------------------- | ----------------------------------------------- |\n| `d`  | Generate indices for substring matches.                                                       | {{jsxref(\"RegExp/hasIndices\", \"hasIndices\")}}   |\n| `g`  | Global search.                                                                                | {{jsxref(\"RegExp/global\", \"global\")}}           |\n| `i`  | Case-insensitive search.                                                                      | {{jsxref(\"RegExp/ignoreCase\", \"ignoreCase\")}}   |\n| `m`  | Makes `^` and `$` match the start and end of each line instead of those of the entire string. | {{jsxref(\"RegExp/multiline\", \"multiline\")}}     |",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced searching with flags",
      "chunkIndex": 26,
      "totalChunks": 36,
      "startLineNumber": 300,
      "endLineNumber": 305
    }
  },
  {
    "content": "| `m`  | Makes `^` and `$` match the start and end of each line instead of those of the entire string. | {{jsxref(\"RegExp/multiline\", \"multiline\")}}     |\n| `s`  | Allows `.` to match newline characters.                                                       | {{jsxref(\"RegExp/dotAll\", \"dotAll\")}}           |\n| `u`  | \"Unicode\"; treat a pattern as a sequence of Unicode code points.                              | {{jsxref(\"RegExp/unicode\", \"unicode\")}}         |\n| `v`  | An upgrade to the `u` mode with more Unicode features.                                        | {{jsxref(\"RegExp/unicodeSets\", \"unicodeSets\")}} |\n| `y`  | Perform a \"sticky\" search that matches starting at the current position in the target string. | {{jsxref(\"RegExp/sticky\", \"sticky\")}}           |",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced searching with flags",
      "chunkIndex": 27,
      "totalChunks": 36,
      "startLineNumber": 305,
      "endLineNumber": 309
    }
  },
  {
    "content": "To include a flag with the regular expression, use this syntax:\n\n```js\nconst re = /pattern/flags;\n```\n\nor\n\n```js\nconst re = new RegExp(\"pattern\", \"flags\");\n```\n\nNote that the flags are an integral part of a regular expression. They cannot be added or removed later.\n\nFor example, `re = /\\w+\\s/g` creates a regular expression that looks for one or more characters followed by a space, and it looks for this combination throughout the string.\n\n```js\nconst re = /\\w+\\s/g;\nconst str = \"fee fi fo fum\";\nconst myArray = str.match(re);\nconsole.log(myArray);\n\n// [\"fee \", \"fi \", \"fo \"]\n```\n\nYou could replace the line:\n\n```js\nconst re = /\\w+\\s/g;\n```\n\nwith:\n\n```js\nconst re = new RegExp(\"\\\\w+\\\\s\", \"g\");\n```\n\nand get the same result.\n\nThe `m` flag is used to specify that a multiline input string should be treated as multiple lines.\nIf the `m` flag is used, `^` and `$` match at the start or end of any line within the input string instead of the start or end of the entire string.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced searching with flags",
      "chunkIndex": 28,
      "totalChunks": 36,
      "startLineNumber": 311,
      "endLineNumber": 351
    }
  },
  {
    "content": "The `i`, `m`, and `s` flags can be enabled or disabled for specific parts of a regex using the [modifier](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Modifier) syntax.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Advanced searching with flags",
      "chunkIndex": 29,
      "totalChunks": 36,
      "startLineNumber": 353,
      "endLineNumber": 353
    }
  },
  {
    "content": "#### Using the global search flag with exec()\n\n{{jsxref(\"RegExp.prototype.exec()\")}} method with the `g` flag returns each match and its position iteratively.\n\n```js\nconst str = \"fee fi fo fum\";\nconst re = /\\w+\\s/g;\n\nconsole.log(re.exec(str)); // [\"fee \", index: 0, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // [\"fi \", index: 4, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // [\"fo \", index: 7, input: \"fee fi fo fum\"]\nconsole.log(re.exec(str)); // null\n```\n\nIn contrast, {{jsxref(\"String.prototype.match()\")}} method returns all matches at once, but without their position.\n\n```js\nconsole.log(str.match(re)); // [\"fee \", \"fi \", \"fo \"]\n```",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using the global search flag with exec()",
      "chunkIndex": 30,
      "totalChunks": 36,
      "startLineNumber": 355,
      "endLineNumber": 373
    }
  },
  {
    "content": "#### Using unicode regular expressions\n\nThe `u` flag is used to create \"unicode\" regular expressions; that is, regular expressions which support matching against unicode text. An important feature that's enabled in unicode mode is [Unicode property escapes](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape). For example, the following regular expression might be used to match against an arbitrary unicode \"word\":\n\n```js\n/\\p{L}*/u;\n```\n\nUnicode regular expressions have different execution behavior as well. [`RegExp.prototype.unicode`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) contains more explanation about this.",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using unicode regular expressions",
      "chunkIndex": 31,
      "totalChunks": 36,
      "startLineNumber": 375,
      "endLineNumber": 383
    }
  },
  {
    "content": "## Examples\n\n> [!NOTE]\n> Several examples are also available in:\n>\n> - The reference pages for {{jsxref(\"RegExp/exec\", \"exec()\")}}, {{jsxref(\"RegExp/test\", \"test()\")}}, {{jsxref(\"String/match\", \"match()\")}}, {{jsxref(\"String/matchAll\", \"matchAll()\")}}, {{jsxref(\"String/search\", \"search()\")}}, {{jsxref(\"String/replace\", \"replace()\")}}, {{jsxref(\"String/split\", \"split()\")}}\n> - The guide articles: [character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes), [assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions), [groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences), [quantifiers](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers)",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 32,
      "totalChunks": 36,
      "startLineNumber": 385,
      "endLineNumber": 391
    }
  },
  {
    "content": "### Using special characters to verify input\n\nIn the following example, the user is expected to enter a phone number.\nWhen the user presses the \"Check\" button, the script checks the validity of the number.\nIf the number is valid (matches the character sequence specified by the regular expression), the script shows a message thanking the user and confirming the number.\nIf the number is invalid, the script informs the user that the phone number is not valid.\n\nThe regular expression looks for:\n\n1. the beginning of the line of data: `^`\n2. followed by three numeric characters `\\d{3}` OR `|` a left parenthesis `\\(`, followed by three digits `\\d{3}`, followed by a close parenthesis `\\)`, in a non-capturing group `(?:)`\n3. followed by one dash, forward slash, or decimal point in a capturing group `()`\n4. followed by three digits `\\d{3}`\n5. followed by the match remembered in the (first) captured group `\\1`\n6. followed by four digits `\\d{4}`\n7. followed by the end of the line of data: `$`",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using special characters to verify input",
      "chunkIndex": 33,
      "totalChunks": 36,
      "startLineNumber": 393,
      "endLineNumber": 408
    }
  },
  {
    "content": "#### HTML\n\n```html\n<p>\n  Enter your phone number (with area code) and then click \"Check\".\n  <br />\n  The expected format is like ###-###-####.\n</p>\n<form id=\"form\">\n  <input id=\"phone\" />\n  <button type=\"submit\">Check</button>\n</form>\n<p id=\"output\"></p>\n```\n\n#### JavaScript\n\n```js\nconst form = document.querySelector(\"#form\");\nconst input = document.querySelector(\"#phone\");\nconst output = document.querySelector(\"#output\");\n\nconst re = /^(?:\\d{3}|\\(\\d{3}\\))([-/.])\\d{3}\\1\\d{4}$/;\n\nfunction testInfo(phoneInput) {\n  const ok = re.exec(phoneInput.value);\n\n  output.textContent = ok\n    ? `Thanks, your phone number is ${ok[0]}`\n    : `${phoneInput.value} isn't a phone number with area code!`;\n}\n\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n  testInfo(input);\n});\n```\n\n#### Result\n\n{{EmbedLiveSample(\"Using_special_characters_to_verify_input\")}}",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "HTML",
      "chunkIndex": 34,
      "totalChunks": 36,
      "startLineNumber": 410,
      "endLineNumber": 450
    }
  },
  {
    "content": "## Tools\n\n- [RegExr](https://regexr.com/)\n  - : An online tool to learn, build, & test Regular Expressions.\n- [Regex tester](https://regex101.com/)\n  - : An online regex builder/debugger\n- [Regex interactive tutorial](https://regexlearn.com/)\n  - : An online interactive tutorials, Cheat sheet, & Playground.\n- [Regex visualizer](https://extendsclass.com/regex-tester.html)\n  - : An online visual regex tester.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Representing_dates_times\", \"Web/JavaScript/Guide/Indexed_collections\")}}",
    "metadata": {
      "source": "regular_expressions/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions",
      "documentTitle": "Regular expressions",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Tools",
      "chunkIndex": 35,
      "totalChunks": 36,
      "startLineNumber": 452,
      "endLineNumber": 463
    }
  },
  {
    "content": "Quantifiers indicate numbers of characters or expressions to match.\n\n{{InteractiveExample(\"JavaScript Demo: RegExp quantifiers\", \"taller\")}}\n\n```js interactive-example\nconst ghostSpeak = \"booh boooooooh\";\nconst regexpSpooky = /bo{3,}h/;\nconsole.log(ghostSpeak.match(regexpSpooky));\n// Expected output: Array [\"boooooooh\"]\n\nconst modifiedQuote = \"[He] ha[s] to go read this novel [Alice in Wonderland].\";\nconst regexpModifications = /\\[.*?\\]/g;\nconsole.log(modifiedQuote.match(regexpModifications));\n// Expected output: Array [\"[He]\", \"[s]\", \"[Alice in Wonderland]\"]\n\nconst regexpTooGreedy = /\\[.*\\]/g;\nconsole.log(modifiedQuote.match(regexpTooGreedy));\n// Expected output: Array [\"[He] ha[s] to go read this novel [Alice in Wonderland]\"]\n```",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 11,
      "startLineNumber": 8,
      "endLineNumber": 26
    }
  },
  {
    "content": "## Types\n\n> [!NOTE]\n> In the following, _item_ refers not only to singular characters, but also includes [character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) and [groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences).",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 1,
      "totalChunks": 11,
      "startLineNumber": 28,
      "endLineNumber": 31
    }
  },
  {
    "content": "<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Characters</th>\n      <th scope=\"col\">Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <code><em>x</em>*</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or more times. For example,\n          <code>/bo*/</code> matches \"boooo\" in \"A ghost booooed\" and \"b\" in \"A\n          bird warbled\", but nothing in \"A goat grunted\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>+</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 1 or more times. Equivalent to\n          <code>{1,}</code>. For example, <code>/a+/</code> matches the \"a\" in\n          \"candy\" and all the \"a\"'s in \"caaaaaaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>?</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or 1 times. For example,",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 2,
      "totalChunks": 11,
      "startLineNumber": 33,
      "endLineNumber": 71
    }
  },
  {
    "content": "</p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>?</code>\n      </td>\n      <td>\n        <p>\n          Matches the preceding item \"x\" 0 or 1 times. For example,\n          <code>/e?le?/</code> matches the \"el\" in \"angel\" and the \"le\" in\n          \"angle.\"\n        </p>\n        <p>\n          If used immediately after any of the quantifiers <code>*</code>,\n          <code>+</code>, <code>?</code>, or <code>{}</code>, makes the\n          quantifier non-greedy (matching the minimum number of times), as\n          opposed to the default, which is greedy (matching the maximum number\n          of times).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>}</code>\n      </td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2}/</code> doesn't match",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 3,
      "totalChunks": 11,
      "startLineNumber": 62,
      "endLineNumber": 91
    }
  },
  {
    "content": "</td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches exactly \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2}/</code> doesn't match\n          the \"a\" in \"candy\", but it matches all of the \"a\"'s in \"caandy\", and\n          the first two \"a\"'s in \"caaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>,}</code>\n      </td>\n      <td>\n        <p>\n          Where \"n\" is a non-negative integer, matches at least \"n\" occurrences of\n          the preceding item \"x\". For example, <code>/a{2,}/</code> doesn't\n          match the \"a\" in \"candy\", but matches all of the a's in \"caandy\" and\n          in \"caaaaaaandy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <code><em>x</em>{<em>n</em>,<em>m</em>}</code>\n      </td>\n      <td>\n        <!-- cSpell:ignore cndy -->\n        <p>\n          Where \"n\" and \"m\" are non-negative integers and <code>m >= n</code>,",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 4,
      "totalChunks": 11,
      "startLineNumber": 87,
      "endLineNumber": 117
    }
  },
  {
    "content": "</td>\n      <td>\n        <!-- cSpell:ignore cndy -->\n        <p>\n          Where \"n\" and \"m\" are non-negative integers and <code>m >= n</code>,\n          matches at least \"n\" and at most \"m\" occurrences of the preceding\n          item \"x\". For example, <code>/a{1,3}/</code> matches nothing in\n          \"cndy\", the \"a\" in \"candy\", the two \"a\"'s in \"caandy\", and the first\n          three \"a\"'s in \"caaaaaaandy\". Notice that when matching \"caaaaaaandy\",\n          the match is \"aaa\", even though the original string had more \"a\"s in\n          it.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p>\n          <code><em>x</em>*?</code><br /><code><em>x</em>+?</code><br /><code\n            ><em>x</em>??</code\n          ><br /><code><em>x</em>{n}?</code><br /><code><em>x</em>{n,}?</code\n          ><br /><code><em>x</em>{n,m}?</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          By default quantifiers like <code>*</code> and <code>+</code> are",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 5,
      "totalChunks": 11,
      "startLineNumber": 113,
      "endLineNumber": 138
    }
  },
  {
    "content": "><br /><code><em>x</em>{n,m}?</code>\n        </p>\n      </td>\n      <td>\n        <p>\n          By default quantifiers like <code>*</code> and <code>+</code> are\n          \"greedy\", meaning that they try to match as much of the string as\n          possible. The <code>?</code> character after the quantifier makes the\n          quantifier \"non-greedy\": meaning that it will stop as soon as it finds\n          a match. For example, given a string like \"some &#x3C;foo> &#x3C;bar>\n          new &#x3C;/bar> &#x3C;/foo> thing\":\n        </p>\n        <ul>\n          <li>\n            <code>/&#x3C;.*>/</code> will match \"&#x3C;foo> &#x3C;bar> new\n            &#x3C;/bar> &#x3C;/foo>\"\n          </li>\n          <li><code>/&#x3C;.*?>/</code> will match \"&#x3C;foo>\"</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Types",
      "chunkIndex": 6,
      "totalChunks": 11,
      "startLineNumber": 133,
      "endLineNumber": 155
    }
  },
  {
    "content": "## Examples\n\n### Repeated pattern\n\nIn this example, we match one or more word characters with `\\w+`, then one or more characters \"a\" with `a+`, and finally end at a word boundary with `\\b`.\n\n```js\nconst wordEndingWithAs = /\\w+a+\\b/;\nconst delicateMessage = \"This is Spartaaaaaaa\";\n\nconsole.table(delicateMessage.match(wordEndingWithAs)); // [ \"Spartaaaaaaa\" ]\n```\n\n### Counting characters\n\nIn this example, we match words that have a single letter, words that have between 2 and 6 letters, and words that have 13 or more letters.\n\n```js\nconst singleLetterWord = /\\b\\w\\b/g;\nconst notSoLongWord = /\\b\\w{2,6}\\b/g;\nconst longWord = /\\b\\w{13,}\\b/g;\n\nconst sentence = \"Why do I have to learn multiplication table?\";\n\nconsole.table(sentence.match(singleLetterWord)); // [\"I\"]\nconsole.table(sentence.match(notSoLongWord)); // [ \"Why\", \"do\", \"have\", \"to\", \"learn\", \"table\" ]\nconsole.table(sentence.match(longWord)); // [\"multiplication\"]\n```",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 7,
      "totalChunks": 11,
      "startLineNumber": 157,
      "endLineNumber": 184
    }
  },
  {
    "content": "### Optional character\n\nIn this example, we match words that either end with \"our\" or \"or\".\n\n<!-- cSpell:ignore neighbour -->\n\n```js\nconst britishText = \"He asked his neighbour a favour.\";\nconst americanText = \"He asked his neighbor a favor.\";\n\nconst regexpEnding = /\\w+ou?r/g;\n// \\w+ One or several letters\n// o   followed by an \"o\",\n// u?  optionally followed by a \"u\"\n// r   followed by an \"r\"\n\nconsole.table(britishText.match(regexpEnding));\n// [\"neighbour\", \"favour\"]\n\nconsole.table(americanText.match(regexpEnding));\n// [\"neighbor\", \"favor\"]\n```",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Optional character",
      "chunkIndex": 8,
      "totalChunks": 11,
      "startLineNumber": 186,
      "endLineNumber": 207
    }
  },
  {
    "content": "### Greedy versus non-greedy\n\nIn this example, we match one or more word characters or spaces with `[\\w ]+` and `[\\w ]+?`. The first one is greedy and the second one is non-greedy. Note how the second one stops as soon as it meets the minimal requirement.\n\n```js\nconst text = \"I must be getting somewhere near the center of the earth.\";\nconst greedyRegexp = /[\\w ]+/;\n\nconsole.log(text.match(greedyRegexp)[0]);\n// \"I must be getting somewhere near the center of the earth\"\n// almost all of the text matches (leaves out the dot character)\n\nconst nonGreedyRegexp = /[\\w ]+?/; // Notice the question mark\nconsole.log(text.match(nonGreedyRegexp));\n// \"I\"\n// The match is the smallest one possible\n```",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Greedy versus non-greedy",
      "chunkIndex": 9,
      "totalChunks": 11,
      "startLineNumber": 209,
      "endLineNumber": 225
    }
  },
  {
    "content": "## See also\n\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Character classes](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) guide\n- [Assertions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions) guide\n- [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n- [`RegExp`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) reference\n- [Quantifier: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier)",
    "metadata": {
      "source": "regular_expressions/quantifiers/index.md",
      "documentSlug": "Web/JavaScript/Guide/Regular_expressions/Quantifiers",
      "documentTitle": "Quantifiers",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 10,
      "totalChunks": 11,
      "startLineNumber": 227,
      "endLineNumber": 235
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Numbers_and_strings\", \"Web/JavaScript/Guide/Regular_expressions\")}}\n\n> [!NOTE]\n> The `Date` object is now considered legacy and should be avoided in new code. We will update this page with modern alternatives soon.",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 9,
      "startLineNumber": 8,
      "endLineNumber": 11
    }
  },
  {
    "content": "## Date object\n\nJavaScript does not have a date data type. However, you can use the {{jsxref(\"Date\")}} object and its methods to work with dates and times in your applications. The `Date` object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.\n\nJavaScript handles dates similarly to Java. The two languages have many of the same date methods, and both languages store dates as the number of milliseconds since midnight at the beginning of January 1, 1970, UTC, with a Unix Timestamp being the number of seconds since the same instant. The instant at the midnight at the beginning of January 1, 1970, UTC is called the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nThe `Date` object range is -100,000,000 days to 100,000,000 days relative to the epoch.\n\nTo create a `Date` object:\n\n```js\nconst dateObjectName = new Date([parameters]);\n```",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date object",
      "chunkIndex": 1,
      "totalChunks": 9,
      "startLineNumber": 13,
      "endLineNumber": 25
    }
  },
  {
    "content": "The `Date` object range is -100,000,000 days to 100,000,000 days relative to the epoch.\n\nTo create a `Date` object:\n\n```js\nconst dateObjectName = new Date([parameters]);\n```\n\nwhere `dateObjectName` is the name of the `Date` object being created; it can be a new object or a property of an existing object.\n\nCalling `Date` without the `new` keyword returns a string representing the current date and time.\n\nThe `parameters` in the preceding syntax can be any of the following:",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date object",
      "chunkIndex": 2,
      "totalChunks": 9,
      "startLineNumber": 19,
      "endLineNumber": 31
    }
  },
  {
    "content": "Calling `Date` without the `new` keyword returns a string representing the current date and time.\n\nThe `parameters` in the preceding syntax can be any of the following:\n\n- Nothing: creates today's date and time. For example, `today = new Date();`.\n- A string representing a date, in many different forms. The exact forms supported differ among engines, but the following form is always supported: `YYYY-MM-DDTHH:mm:ss.sssZ`. For example, `xmas95 = new Date(\"1995-12-25\")`. If you omit hours, minutes, or seconds, the value will be set to zero.\n- A set of integer values for year, month, and day. For example, `xmas95 = new Date(1995, 11, 25)`.\n- A set of integer values for year, month, day, hour, minute, and seconds. For example, `xmas95 = new Date(1995, 11, 25, 9, 30, 0);`.",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Date object",
      "chunkIndex": 3,
      "totalChunks": 9,
      "startLineNumber": 29,
      "endLineNumber": 36
    }
  },
  {
    "content": "### Methods of the Date object\n\nThe `Date` object methods for handling dates and times fall into these broad categories:\n\n- \"set\" methods, for setting date and time values in `Date` objects.\n- \"get\" methods, for getting date and time values from `Date` objects.\n- \"to\" methods, for returning string values from `Date` objects.\n- parse and UTC methods, for parsing `Date` strings.\n\nWith the \"get\" and \"set\" methods you can get and set seconds, minutes, hours, day of the month, day of the week, months, and years separately. There is a `getDay` method that returns the day of the week, but no corresponding `setDay` method, because the day of the week is set automatically. These methods use integers to represent these values as follows:\n\n- Seconds and minutes: 0 to 59\n- Hours: 0 to 23\n- Day: 0 (Sunday) to 6 (Saturday)\n- Date: 1 to 31 (day of the month)\n- Months: 0 (January) to 11 (December)\n- Year: years since 1900\n\nFor example, suppose you define the following date:",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Methods of the Date object",
      "chunkIndex": 4,
      "totalChunks": 9,
      "startLineNumber": 38,
      "endLineNumber": 56
    }
  },
  {
    "content": "For example, suppose you define the following date:\n\n```js\nconst xmas95 = new Date(\"1995-12-25\");\n```\n\nThen `xmas95.getMonth()` returns 11, and `xmas95.getFullYear()` returns 1995.\n\nThe `getTime` and `setTime` methods are useful for comparing dates. The `getTime` method returns the number of milliseconds since the epoch for a `Date` object.\n\nFor example, the following code displays the number of days left in the current year:\n\n```js\nconst today = new Date();\nconst endYear = new Date(1995, 11, 31, 23, 59, 59, 999); // Set day and month\nendYear.setFullYear(today.getFullYear()); // Set year to this year\nconst msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds per day\nlet daysLeft = (endYear.getTime() - today.getTime()) / msPerDay;\ndaysLeft = Math.round(daysLeft); // Returns days left in the year\n```",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Methods of the Date object",
      "chunkIndex": 5,
      "totalChunks": 9,
      "startLineNumber": 56,
      "endLineNumber": 75
    }
  },
  {
    "content": "This example creates a `Date` object named `today` that contains today's date. It then creates a `Date` object named `endYear` and sets the year to the current year. Then, using the number of milliseconds per day, it computes the number of days between `today` and `endYear`, using `getTime` and rounding to a whole number of days.\n\nThe `parse` method is useful for assigning values from date strings to existing `Date` objects. For example, the following code uses `parse` and `setTime` to assign a date value to the `ipoDate` object:\n\n```js\nconst ipoDate = new Date();\nipoDate.setTime(Date.parse(\"Aug 9, 1995\"));\n```",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Methods of the Date object",
      "chunkIndex": 6,
      "totalChunks": 9,
      "startLineNumber": 77,
      "endLineNumber": 84
    }
  },
  {
    "content": "### Example\n\nIn the following example, the function `JSClock()` returns the time in the format of a digital clock.\n\n```js\nfunction JSClock() {\n  const time = new Date();\n  const hour = time.getHours();\n  const minute = time.getMinutes();\n  const second = time.getSeconds();\n  let temp = String(hour % 12);\n  if (temp === \"0\") {\n    temp = \"12\";\n  }\n  temp += (minute < 10 ? \":0\" : \":\") + minute;\n  temp += (second < 10 ? \":0\" : \":\") + second;\n  temp += hour >= 12 ? \" P.M.\" : \" A.M.\";\n  return temp;\n}\n```\n\nThe `JSClock` function first creates a new `Date` object called `time`; since no arguments are given, time is created with the current date and time. Then calls to the `getHours`, `getMinutes`, and `getSeconds` methods assign the value of the current hour, minute, and second to `hour`, `minute`, and `second`.",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 7,
      "totalChunks": 9,
      "startLineNumber": 86,
      "endLineNumber": 107
    }
  },
  {
    "content": "The following statements build a string value based on the time. The first statement creates a variable `temp`. Its value is `hour % 12`, which is `hour` in the 12-hour system. Then, if the hour is `0`, it gets re-assigned to `12`, so that midnights and noons are displayed as `12:00` instead of `0:00`.\n\nThe next statement appends a `minute` value to `temp`. If the value of `minute` is less than 10, the conditional expression adds a string with a preceding zero; otherwise it adds a string with a demarcating colon. Then a statement appends a seconds value to `temp` in the same way.\n\nFinally, a conditional expression appends \"P.M.\" to `temp` if `hour` is 12 or greater; otherwise, it appends \"A.M.\" to `temp`.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Numbers_and_strings\", \"Web/JavaScript/Guide/Regular_expressions\")}}",
    "metadata": {
      "source": "representing_dates_times/index.md",
      "documentSlug": "Web/JavaScript/Guide/Representing_dates_times",
      "documentTitle": "Representing dates & times",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Example",
      "chunkIndex": 8,
      "totalChunks": 9,
      "startLineNumber": 109,
      "endLineNumber": 115
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Iterators_and_generators\", \"Web/JavaScript/Guide/Internationalization\")}}\n\nThis guide talks about how to do _resource management_ in JavaScript. Resource management is not exactly the same as [memory management](/en-US/docs/Web/JavaScript/Guide/Memory_management), which is a more advanced topic and usually handled automatically by JavaScript. Resource management is about managing resources that are _not_ automatically cleaned up by JavaScript. Sometimes, it's okay to have some unused objects in memory, because they don't interfere with application logic, but resource leaks often lead to things not working, or a lot of excess memory usage. Therefore, this is not an optional feature about optimization, but a core feature to write correct programs!",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 37,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "> [!NOTE]\n> While memory management and resource management are two separate topics, sometimes you can hook into the memory management system to do resource management, as a last resort. For example, if you have a JavaScript object representing a handle of an external resource, you can create a {{jsxref(\"FinalizationRegistry\")}} to clean up the resource when the handle is garbage collected, because there is definitely no way to access the resource afterwards. However, there is no guarantee that the finalizer will run, so it's not a good idea to rely on it for critical resources.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 37,
      "startLineNumber": 12,
      "endLineNumber": 13
    }
  },
  {
    "content": "## Problem\n\nLet's first look at a few examples of resources that need to be managed:\n\n- **File handles**: A file handle is used to read and write bytes in a file. When you are done with it, you must call [`fileHandle.close()`](https://nodejs.org/api/fs.html#filehandleclose), otherwise the file will remain open, even when the JS object is no longer accessible. As the linked Node.js docs say:\n\n  > If a `<FileHandle>` is not closed using the `fileHandle.close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close `<FileHandle>`s. Node.js may change this behavior in the future.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 2,
      "totalChunks": 37,
      "startLineNumber": 15,
      "endLineNumber": 21
    }
  },
  {
    "content": "- **Network connections**: Some connections, such as {{domxref(\"WebSocket\")}} and {{domxref(\"RTCPeerConnection\")}}, need to be closed if no messages are transmitted. Otherwise, the connection remains open, and connection pools are often very limited in size.\n- **Stream readers**: If you don't call {{domxref(\"ReadableStreamDefaultReader.releaseLock()\")}}, the stream will be locked and does not permit another reader to consume it.\n\nHere is one concrete example, using a readable stream:\n\n```js\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"a\");\n    controller.enqueue(\"b\");\n    controller.enqueue(\"c\");\n    controller.close();\n  },\n});\n\nasync function readUntil(stream, text) {\n  const reader = stream.getReader();\n  let chunk = await reader.read();\n\n  while (!chunk.done && chunk.value !== text) {\n    console.log(chunk);\n    chunk = await reader.read();\n  }\n  // We forgot to release the lock here\n}",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 3,
      "totalChunks": 37,
      "startLineNumber": 23,
      "endLineNumber": 47
    }
  },
  {
    "content": "while (!chunk.done && chunk.value !== text) {\n    console.log(chunk);\n    chunk = await reader.read();\n  }\n  // We forgot to release the lock here\n}\n\nreadUntil(stream, \"b\").then(() => {\n  const anotherReader = stream.getReader();\n  // TypeError: ReadableStreamDefaultReader constructor can only\n  // accept readable streams that are not yet locked to a reader\n});\n```\n\nHere, we have a stream that emits three chunks of data. We read from the stream until we find the letter \"b\". When `readUntil` returns, the stream is only partially consumed, so we should be able to continue to read from it using another reader. However, we forgot to release the lock, so although `reader` is no longer available, the stream is still locked and we cannot create another reader.\n\nThe solution in this case is straightforward: call `reader.releaseLock()` at the end of `readUntil`. But, a few issues still remain:",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 4,
      "totalChunks": 37,
      "startLineNumber": 42,
      "endLineNumber": 58
    }
  },
  {
    "content": "The solution in this case is straightforward: call `reader.releaseLock()` at the end of `readUntil`. But, a few issues still remain:\n\n- Inconsistency: different resources have different ways to release them. For example, we have `close()`, `releaseLock()`, `disconnect()`, etc. The pattern does not generalize.\n- Error handling: what happens if the `reader.read()` call fails? Then `readUntil` would terminate and never get to the `reader.releaseLock()` call. We can fix this using {{jsxref(\"Statements/try...catch\", \"try...finally\")}}:\n\n  ```js\n  async function readUntil(stream, text) {\n    const reader = stream.getReader();\n    try {\n      let chunk = await reader.read();\n\n      while (!chunk.done && chunk.value !== text) {\n        console.log(chunk);\n        chunk = await reader.read();\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  ```\n\n  But you have to remember to do this every time you have some important resource to release.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 5,
      "totalChunks": 37,
      "startLineNumber": 58,
      "endLineNumber": 79
    }
  },
  {
    "content": "But you have to remember to do this every time you have some important resource to release.\n\n- Scoping: in the above example, `reader` is already closed when we exit the `try...finally` statement, but it continues to be available in its scope. This means you may accidentally use it after it's closed.\n- Multiple resources: if we have two readers on different streams, we have to remember to release both of them. This is a respectable attempt to do so:\n\n  ```js\n  const reader1 = stream1.getReader();\n  const reader2 = stream2.getReader();\n  try {\n    // do something with reader1 and reader2\n  } finally {\n    reader1.releaseLock();\n    reader2.releaseLock();\n  }\n  ```\n\n  However, this introduces more error handling troubles. If `stream2.getReader()` throws, then `reader1` does not get released; if `reader1.releaseLock()` throws an error, then `reader2` does not get released. This means we actually have to wrap each resource acquisition-release pair in its own `try...finally`:",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 6,
      "totalChunks": 37,
      "startLineNumber": 79,
      "endLineNumber": 95
    }
  },
  {
    "content": "```js\n  const reader1 = stream1.getReader();\n  try {\n    const reader2 = stream2.getReader();\n    try {\n      // do something with reader1 and reader2\n    } finally {\n      reader2.releaseLock();\n    }\n  } finally {\n    reader1.releaseLock();\n  }\n  ```\n\nYou see how a seemingly benign task of calling `releaseLock` can quickly lead to nested boilerplate code. This is why JavaScript provides integrated language support for resource management.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Problem",
      "chunkIndex": 7,
      "totalChunks": 37,
      "startLineNumber": 97,
      "endLineNumber": 111
    }
  },
  {
    "content": "## The `using` and `await using` declarations\n\nThe solution we have is two special kinds of variable declaration: {{jsxref(\"Statements/using\", \"using\")}} and {{jsxref(\"Statements/await_using\", \"await using\")}}. They are similar to `const`, but they automatically release the resource when the variable goes out of scope as long as the resource is _disposable_. Using the same example as above, we can rewrite it as:\n\n```js\n{\n  using reader1 = stream1.getReader();\n  using reader2 = stream2.getReader();\n\n  // do something with reader1 and reader2\n\n  // Before we exit the block, reader1 and reader2 are automatically released\n}\n```\n\n> [!NOTE]\n> At the time of writing, {{domxref(\"ReadableStreamDefaultReader\")}} does not implement the disposable protocol. This is a hypothetical example.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 8,
      "totalChunks": 37,
      "startLineNumber": 113,
      "endLineNumber": 129
    }
  },
  {
    "content": "> [!NOTE]\n> At the time of writing, {{domxref(\"ReadableStreamDefaultReader\")}} does not implement the disposable protocol. This is a hypothetical example.\n\nFirst, notice the extra braces around the code. This creates a new [block scope](/en-US/docs/Web/JavaScript/Reference/Statements/block) for the `using` declarations. Resources declared with `using` are automatically freed when they go out of the scope of `using`, which, in this case, is whenever we are exiting the block, either because all statements have executed, or because an error or `return`/`break`/`continue` was encountered somewhere.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 9,
      "totalChunks": 37,
      "startLineNumber": 128,
      "endLineNumber": 131
    }
  },
  {
    "content": "This means `using` can only be used in a scope that has a clear lifetime—namely, it cannot be used at the top level of a script, because variables at the top level of a script are in scope for all future scripts on the page, which practically means the resource can never be freed if the page never unloads. However, you can use it at the top level of a [module](/en-US/docs/Web/JavaScript/Guide/Modules), because the module scope ends when the module finishes executing.\n\nNow we know _when_ `using` does cleanup. But _how_ is it done? `using` requires the resource to implement the _disposable_ protocol. An object is disposable if it has the [`[Symbol.dispose]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/dispose) method. This method is called with no arguments to perform cleanup. For example, in the reader case, the `[Symbol.dispose]` property can be a simple alias or wrapper of `releaseLock`:",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 10,
      "totalChunks": 37,
      "startLineNumber": 133,
      "endLineNumber": 135
    }
  },
  {
    "content": "```js\n// For demonstration\nclass MyReader {\n  // A wrapper\n  [Symbol.dispose]() {\n    this.releaseLock();\n  }\n  releaseLock() {\n    // Logic to release resources\n  }\n}\n\n// OR, an alias\nMyReader.prototype[Symbol.dispose] = MyReader.prototype.releaseLock;\n```\n\nThrough the disposable protocol, `using` can dispose all resources in a consistent fashion without understanding what type of resource it is.\n\nEvery scope has a list of resources associated with it, in the order they were declared. When the scope exits, the resources are disposed in reverse order, by calling their `[Symbol.dispose]()` method. For example, in the example above, `reader1` is declared before `reader2`, so `reader2` is disposed first, then `reader1`. Errors thrown when attempting to dispose one resource will not prevent disposal of other resources. This is consistent with the `try...finally` pattern, and respects possible dependencies between resources.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 11,
      "totalChunks": 37,
      "startLineNumber": 137,
      "endLineNumber": 155
    }
  },
  {
    "content": "`await using` is very similar to `using`. The syntax tells you that an `await` happens somewhere—not when the resource is declared, but actually when it's disposed. `await using` requires the resource to be _async disposable_, which means it has an [`[Symbol.asyncDisposable]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncDispose) method. This method is called with no arguments and returns a promise that resolves when the cleanup is done. This is useful when the cleanup is asynchronous, such as `fileHandle.close()`, in which case the result of the disposal can only be known asynchronously.\n\n```js\n{\n  await using fileHandle = open(\"file.txt\", \"w\");\n  await fileHandle.write(\"Hello\");\n\n  // fileHandle.close() is called and awaited\n}\n```\n\nBecause `await using` requires doing an `await`, it is only permitted in contexts where `await` is, which includes inside `async` functions and top-level `await` in modules.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 12,
      "totalChunks": 37,
      "startLineNumber": 157,
      "endLineNumber": 168
    }
  },
  {
    "content": "Because `await using` requires doing an `await`, it is only permitted in contexts where `await` is, which includes inside `async` functions and top-level `await` in modules.\n\nResources are cleaned up sequentially, not concurrently: the return value of one resource's `[Symbol.asyncDispose]()` method will be `await`ed before the next resource's `[Symbol.asyncDispose]()` method is called.\n\nSome things to note:",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 13,
      "totalChunks": 37,
      "startLineNumber": 168,
      "endLineNumber": 172
    }
  },
  {
    "content": "- `using` and `await using` are _opt in_. If you declare your resource using `let`, `const`, or `var`, no automatic disposal happens, just like any other non-disposable values.\n- `using` and `await using` require the resource to be disposable (or async disposable). If the resource does not have the `[Symbol.dispose]()` or `[Symbol.asyncDispose]()` method respectively, you will get a `TypeError` at the line of declaration. The resource can be `null` or `undefined`, however, allowing you to conditionally acquire resources.\n- Like `const`, `using` and `await using` variables cannot be re-assigned, although the properties of the objects they hold can be changed. However, the `[Symbol.dispose]()`/`[Symbol.asyncDispose]()` method is already saved at the time of declaration, so changing the method after the declaration does not affect the cleanup.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 14,
      "totalChunks": 37,
      "startLineNumber": 174,
      "endLineNumber": 176
    }
  },
  {
    "content": "- There are some gotchas when conflating scopes with resource lifetime. See [`using`](/en-US/docs/Web/JavaScript/Reference/Statements/using#examples) for a few examples.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `using` and `await using` declarations",
      "chunkIndex": 15,
      "totalChunks": 37,
      "startLineNumber": 177,
      "endLineNumber": 177
    }
  },
  {
    "content": "## The `DisposableStack` and `AsyncDisposableStack` objects\n\n`using` and `await using` are special syntaxes. Syntaxes are convenient and hide a lot of the complexity, but sometimes you need to do things manually.\n\nFor one common example: what if you don't want to dispose the resource at the end of _this_ scope, but at some _later_ scope? Consider this:\n\n```js\nlet reader;\nif (someCondition) {\n  reader = stream.getReader();\n} else {\n  reader = stream.getReader({ mode: \"byob\" });\n}\n```\n\nAs we said, `using` is like `const`: it must be initialized and can't be reassigned, so you may attempt this:\n\n```js\nif (someCondition) {\n  using reader = stream.getReader();\n} else {\n  using reader = stream.getReader({ mode: \"byob\" });\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 16,
      "totalChunks": 37,
      "startLineNumber": 179,
      "endLineNumber": 202
    }
  },
  {
    "content": "```js\nif (someCondition) {\n  using reader = stream.getReader();\n} else {\n  using reader = stream.getReader({ mode: \"byob\" });\n}\n```\n\nHowever, this means all logic has to be written inside the `if` or `else`, causing a lot of duplication. What we want to do is to acquire and register the resource in one scope but dispose it in another. We can use a {{jsxref(\"DisposableStack\")}} for this purpose, which is an object which holds a collection of disposable resources and which itself is disposable:\n\n```js\n{\n  using disposer = new DisposableStack();\n  let reader;\n  if (someCondition) {\n    reader = disposer.use(stream.getReader());\n  } else {\n    reader = disposer.use(stream.getReader({ mode: \"byob\" }));\n  }\n  // Do something with reader\n  // Before scope exit, disposer is disposed, which disposes reader\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 17,
      "totalChunks": 37,
      "startLineNumber": 196,
      "endLineNumber": 218
    }
  },
  {
    "content": "You may have a resource that does not yet implement the disposable protocol, so it will be rejected by `using`. In this case, you can use {{jsxref(\"DisposableStack/adopt\", \"adopt()\")}}.\n\n```js\n{\n  using disposer = new DisposableStack();\n  // Suppose reader does not have the [Symbol.dispose]() method,\n  // then it cannot be used with using.\n  // However, we can manually pass a disposer function to disposer.adopt\n  const reader = disposer.adopt(stream.getReader(), (reader) =>\n    reader.releaseLock(),\n  );\n  // Do something with reader\n  // Before scope exit, disposer is disposed, which disposes reader\n}\n```\n\nYou may have a disposal action to perform but it's not \"tethered\" to any resource in particular. Maybe you just want to log a message saying \"All database connections closed\" when there are multiple connections open simultaneously. In this case, you can use {{jsxref(\"DisposableStack/defer\", \"defer()\")}}.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 18,
      "totalChunks": 37,
      "startLineNumber": 220,
      "endLineNumber": 236
    }
  },
  {
    "content": "```js\n{\n  using disposer = new DisposableStack();\n  disposer.defer(() => console.log(\"All database connections closed\"));\n  const connection1 = disposer.use(openConnection());\n  const connection2 = disposer.use(openConnection());\n  // Do something with connection1 and connection2\n  // Before scope exit, disposer is disposed, which first disposes connection1\n  // and connection2 and then logs the message\n}\n```\n\nYou may want to do _conditional_ disposal—for example, only dispose claimed resources when an error occurred. In this case, you can use {{jsxref(\"DisposableStack/move\", \"move()\")}} to preserve the resources which would otherwise be disposed.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 19,
      "totalChunks": 37,
      "startLineNumber": 238,
      "endLineNumber": 250
    }
  },
  {
    "content": "```js\nclass MyResource {\n  #resource1;\n  #resource2;\n  #disposables;\n  constructor() {\n    using disposer = new DisposableStack();\n    this.#resource1 = disposer.use(getResource1());\n    this.#resource2 = disposer.use(getResource2());\n    // If we made it here, then there were no errors during construction and\n    // we can safely move the disposables out of `disposer` and into `#disposables`.\n    this.#disposables = disposer.move();\n    // If construction failed, then `disposer` would be disposed before reaching\n    // the line above, disposing `#resource1` and `#resource2`.\n  }\n  [Symbol.dispose]() {\n    this.#disposables.dispose(); // Dispose `#resource2` and `#resource1`.\n  }\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 20,
      "totalChunks": 37,
      "startLineNumber": 252,
      "endLineNumber": 271
    }
  },
  {
    "content": "`AsyncDisposableStack` is like `DisposableStack`, but for use with async disposable resources. Its `use()` method expects an async disposable, its `adopt()` method expects an async cleanup function, and its `dispose()` method expects an async callback. It provides a `[Symbol.asyncDispose]()` method. You can still pass it sync resources if you have a mix of both sync and async.\n\nThe reference for {{jsxref(\"DisposableStack\")}} contains more examples and details.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "The `DisposableStack` and `AsyncDisposableStack` objects",
      "chunkIndex": 21,
      "totalChunks": 37,
      "startLineNumber": 273,
      "endLineNumber": 275
    }
  },
  {
    "content": "## Error handling\n\nA major use case of the resource management feature is to ensure that resources are always disposed, even when an error occurs. Let us investigate some complex error handling scenarios.\n\nWe start with the following code, which, by using `using`, is robust against errors:\n\n```js\nasync function readUntil(stream, text) {\n  // Use `using` instead of `await using` because `releaseLock` is synchronous\n  using reader = stream.getReader();\n  let chunk = await reader.read();\n\n  while (!chunk.done && chunk.value !== text) {\n    console.log(chunk.toUpperCase());\n    chunk = await reader.read();\n  }\n}\n```\n\nSuppose that `chunk` turns out to be `null`. Then `toUpperCase()` will throw a `TypeError`, causing the function to terminate. Before the function exits, `stream[Symbol.dispose]()` is called, which releases the lock on the stream.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 22,
      "totalChunks": 37,
      "startLineNumber": 277,
      "endLineNumber": 296
    }
  },
  {
    "content": "```js\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(\"a\");\n    controller.enqueue(null);\n    controller.enqueue(\"b\");\n    controller.enqueue(\"c\");\n    controller.close();\n  },\n});\n\nreadUntil(stream, \"b\")\n  .catch((e) => console.error(e)) // TypeError: chunk.toUpperCase is not a function\n  .then(() => {\n    const anotherReader = stream.getReader();\n    // Successfully creates another reader\n  });\n```\n\nSo, `using` does not swallow any errors: all errors that occur are still thrown, but the resources get closed right before that. Now, what happens if the resource cleanup itself also throws an error? Let's use a more contrived example:\n\n```js\nclass MyReader {\n  [Symbol.dispose]() {\n    throw new Error(\"Failed to release lock\");\n  }\n}\n\nfunction doSomething() {\n  using reader = new MyReader();\n  throw new Error(\"Failed to read\");\n}\n\ntry {\n  doSomething();\n} catch (e) {\n  console.error(e); // SuppressedError: An error was suppressed during disposal\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 23,
      "totalChunks": 37,
      "startLineNumber": 298,
      "endLineNumber": 336
    }
  },
  {
    "content": "try {\n  doSomething();\n} catch (e) {\n  console.error(e); // SuppressedError: An error was suppressed during disposal\n}\n```\n\nThere are two errors generated in the `doSomething()` call: an error thrown during `doSomething`, and an error thrown during disposal of `reader` because of the first error. Both errors are thrown together, so what you caught is a {{jsxref(\"SuppressedError\")}}. This is a special error that wraps two errors: the {{jsxref(\"SuppressedError/error\", \"error\")}} property contains the later error, and the {{jsxref(\"SuppressedError/suppressed\", \"suppressed\")}} property contains the earlier error, which gets \"suppressed\" by the later error.\n\nIf we have more than one resource, and _both_ of them throw an error during disposal (this should be exceedingly rare–it's already rare for disposal to fail!), then each earlier error is suppressed by the later error, forming a chain of suppressed errors.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 24,
      "totalChunks": 37,
      "startLineNumber": 331,
      "endLineNumber": 340
    }
  },
  {
    "content": "```js\nclass MyReader {\n  [Symbol.dispose]() {\n    throw new Error(\"Failed to release lock on reader\");\n  }\n}\n\nclass MyWriter {\n  [Symbol.dispose]() {\n    throw new Error(\"Failed to release lock on writer\");\n  }\n}\n\nfunction doSomething() {\n  using reader = new MyReader();\n  using writer = new MyWriter();\n  throw new Error(\"Failed to read\");\n}\n\ntry {\n  doSomething();\n} catch (e) {\n  console.error(e); // SuppressedError: An error was suppressed during disposal\n  console.error(e.suppressed); // SuppressedError: An error was suppressed during disposal\n  console.error(e.error); // Error: Failed to release lock on reader\n  console.error(e.suppressed.suppressed); // Error: Failed to read\n  console.error(e.suppressed.error); // Error: Failed to release lock on writer\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 25,
      "totalChunks": 37,
      "startLineNumber": 342,
      "endLineNumber": 370
    }
  },
  {
    "content": "- The `reader` is released last, so its error is the latest and therefore suppresses everything else: it shows up as `e.error`.\n- The `writer` is released first, so its error is later than the original exiting error, but earlier than the `reader` error: it shows up as `e.suppressed.error`.\n- The original error about \"Failed to read\" is the earliest error, so it shows up as `e.suppressed.suppressed`.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 26,
      "totalChunks": 37,
      "startLineNumber": 372,
      "endLineNumber": 374
    }
  },
  {
    "content": "## Examples",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 27,
      "totalChunks": 37,
      "startLineNumber": 376,
      "endLineNumber": 376
    }
  },
  {
    "content": "### Automatically releasing object URLs\n\nIn the following example, we create an [object URL](/en-US/docs/Web/URI/Reference/Schemes/blob) to a blob (in a real application, this blob would be fetched from somewhere, such as a file or a fetch response) so we can download the blob as a file. In order to prevent a resource leak, we must free the object URL with {{domxref(\"URL/revokeObjectURL_static\", \"URL.revokeObjectURL()\")}} when it is no longer needed (that is, when the download has successfully started). Because the URL itself is just a string and therefore doesn't implement the disposable protocol, we cannot directly declare `url` with `using`; therefore, we create a `DisposableStack` to serve as the disposer for `url`. The object URL is revoked as soon as `disposer` goes out of scope, which is when either `link.click()` finishes or an error occurs somewhere.\n\n```js\nconst downloadButton = document.getElementById(\"download-button\");\nconst exampleBlob = new Blob([\"example data\"]);",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Automatically releasing object URLs",
      "chunkIndex": 28,
      "totalChunks": 37,
      "startLineNumber": 378,
      "endLineNumber": 384
    }
  },
  {
    "content": "```js\nconst downloadButton = document.getElementById(\"download-button\");\nconst exampleBlob = new Blob([\"example data\"]);\n\ndownloadButton.addEventListener(\"click\", () => {\n  using disposer = new DisposableStack();\n  const link = document.createElement(\"a\");\n  const url = disposer.adopt(\n    URL.createObjectURL(exampleBlob),\n    URL.revokeObjectURL,\n  );\n\n  link.href = url;\n  link.download = \"example.txt\";\n  link.click();\n});\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Automatically releasing object URLs",
      "chunkIndex": 29,
      "totalChunks": 37,
      "startLineNumber": 382,
      "endLineNumber": 398
    }
  },
  {
    "content": "### Automatically cancelling in-progress requests\n\nIn the following example, we [fetch](/en-US/docs/Web/API/Window/fetch) a list of resources concurrently using {{jsxref(\"Promise.all()\")}}. `Promise.all()` fails and rejects the resulting promise as soon as one request failed; however, the other pending requests continue to run, despite their results being inaccessible to the program. To avoid these remaining requests needlessly consuming resources, we need to automatically cancel in-progress requests whenever `Promise.all()` settles. We implement cancellation with an {{domxref(\"AbortController\")}}, and pass its {{domxref(\"AbortController/signal\", \"signal\")}} to every `fetch()` call. If `Promise.all()` fulfills, then the function returns normally and the controller aborts, which is harmless because there's no pending request to cancel; if `Promise.all()` rejects and the function throws, then the controller aborts and cancels all pending requests.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Automatically cancelling in-progress requests",
      "chunkIndex": 30,
      "totalChunks": 37,
      "startLineNumber": 400,
      "endLineNumber": 402
    }
  },
  {
    "content": "```js\nasync function getAllData(urls) {\n  using disposer = new DisposableStack();\n  const { signal } = disposer.adopt(new AbortController(), (controller) =>\n    controller.abort(),\n  );\n\n  // Fetch all URLs in parallel\n  // Automatically cancel any incomplete requests if any request fails\n  const pages = await Promise.all(\n    urls.map((url) =>\n      fetch(url, { signal }).then((response) => {\n        if (!response.ok)\n          throw new Error(\n            `Response error: ${response.status} - ${response.statusText}`,\n          );\n        return response.text();\n      }),\n    ),\n  );\n  return pages;\n}\n```",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Automatically cancelling in-progress requests",
      "chunkIndex": 31,
      "totalChunks": 37,
      "startLineNumber": 404,
      "endLineNumber": 426
    }
  },
  {
    "content": "## Pitfalls\n\nThe resource disposal syntax offers a lot of strong error handling guarantees that ensure the resources are always cleaned up no matter what happens, but there are some pitfalls you may still encounter:",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Pitfalls",
      "chunkIndex": 32,
      "totalChunks": 37,
      "startLineNumber": 428,
      "endLineNumber": 430
    }
  },
  {
    "content": "- Forgetting to use `using` or `await using`. The resource management syntax is only there to help you when you know you need it, but there's nothing to yell at you if you forget to use it! Unfortunately, there's no good way to prevent this before-the-fact, because there are no syntactic clues that something is a disposable resource, and even for disposable resources, you may want to declare them without automatic disposal. You probably need a type checker combined with a linter to catch these issues, such as [typescript-eslint](https://typescript-eslint.io/) ([which is still planning to work on this feature](https://github.com/typescript-eslint/typescript-eslint/issues/8255)).",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Pitfalls",
      "chunkIndex": 33,
      "totalChunks": 37,
      "startLineNumber": 432,
      "endLineNumber": 432
    }
  },
  {
    "content": "- Use-after-free. Generally, the `using` syntax ensures that a resource is freed when it goes out of scope, but there are many ways to persist a value beyond its binding variable. JavaScript does not have an ownership mechanism like Rust, so you can declare an alias that does't use `using`, or preserve the resource in a [closure](/en-US/docs/Web/JavaScript/Guide/Closures), etc. The {{jsxref(\"Statements/using\", \"using\")}} reference contains many examples of such pitfalls. Again, there's no good way to properly detect this in a complicated control flow, so you need to be careful.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Pitfalls",
      "chunkIndex": 34,
      "totalChunks": 37,
      "startLineNumber": 433,
      "endLineNumber": 433
    }
  },
  {
    "content": "The resource management feature is not a silver bullet. It is definitely an improvement over manually invoking the disposal methods, but it is not smart enough to prevent all resource management bugs. You still need to be careful and understand the semantics of the resources you are using.",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Pitfalls",
      "chunkIndex": 35,
      "totalChunks": 37,
      "startLineNumber": 435,
      "endLineNumber": 435
    }
  },
  {
    "content": "## Conclusion\n\nHere are the key components of the resource management system:\n\n- {{jsxref(\"Statements/using\", \"using\")}} and {{jsxref(\"Statements/await_using\", \"await using\")}} declarations for automatic resource disposal.\n- The _disposable_ and _async disposable_ protocols, using the {{jsxref(\"Symbol.dispose\")}} and {{jsxref(\"Symbol.asyncDispose\")}} respectively, for resources to implement.\n- The {{jsxref(\"DisposableStack\")}} and {{jsxref(\"AsyncDisposableStack\")}} objects for cases where `using` and `await using` are not suitable.\n\nWith proper usage of these APIs, you can create systems interacting with external resources that remain strong and robust against all error conditions without lots of boilerplate code.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Iterators_and_generators\", \"Web/JavaScript/Guide/Internationalization\")}}",
    "metadata": {
      "source": "resource_management/index.md",
      "documentSlug": "Web/JavaScript/Guide/Resource_management",
      "documentTitle": "JavaScript resource management",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conclusion",
      "chunkIndex": 36,
      "totalChunks": 37,
      "startLineNumber": 437,
      "endLineNumber": 447
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Using_promises\", \"Web/JavaScript/Guide/Iterators_and_generators\")}}\n\nJavaScript typed arrays are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.\n\nTyped arrays are not intended to replace arrays for any kind of functionality. Instead, they provide developers with a familiar interface for manipulating binary data. This is useful when interacting with platform features, such as audio and video manipulation, access to raw data using [WebSockets](/en-US/docs/Web/API/WebSockets_API), and so forth. Each entry in a JavaScript typed array is a raw binary value in one of a number of supported formats, from 8-bit integers to 64-bit floating-point numbers.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 27,
      "startLineNumber": 8,
      "endLineNumber": 12
    }
  },
  {
    "content": "Typed array objects share many of the same methods as arrays with similar semantics. However, typed arrays are _not_ to be confused with normal arrays, as calling {{jsxref(\"Array.isArray()\")}} on a typed array returns `false`. Moreover, not all methods available for normal arrays are supported by typed arrays (e.g., push and pop).\n\nTo achieve maximum flexibility and efficiency, JavaScript typed arrays split the implementation into _buffers_ and _views_. A buffer is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a [view](#views). A view provides a _context_ — that is, a data type, starting offset, and number of elements.\n\n![A diagram showing how different typed arrays may be views of the same underlying buffer. Each one has a different element number and width.](typed_arrays.png)",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 27,
      "startLineNumber": 14,
      "endLineNumber": 18
    }
  },
  {
    "content": "## Buffers\n\nThere are two types of buffers: {{jsxref(\"ArrayBuffer\")}} and {{jsxref(\"SharedArrayBuffer\")}}. Both are low-level representations of a memory span. They have \"array\" in their names, but they don't have much to do with arrays — you cannot read or write to them directly. Instead, buffers are generic objects that just contain raw data. In order to access the memory represented by a buffer, you need to use a view.\n\nBuffers support the following actions:",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Buffers",
      "chunkIndex": 2,
      "totalChunks": 27,
      "startLineNumber": 20,
      "endLineNumber": 24
    }
  },
  {
    "content": "- _Allocate_: As soon as a new buffer is created, a new memory span is allocated and initialized to `0`.\n- _Copy_: Using the {{jsxref(\"ArrayBuffer/slice\", \"slice()\")}} method, you can efficiently copy a portion of the memory without creating views to manually copy each byte.\n- _Transfer_: Using the {{jsxref(\"ArrayBuffer/transfer\", \"transfer()\")}} and {{jsxref(\"ArrayBuffer/transferToFixedLength\", \"transferToFixedLength()\")}} methods, you can transfer ownership of the memory span to a new buffer object. This is useful when transferring data between different execution contexts without copying. After the transfer, the original buffer is no longer usable. A `SharedArrayBuffer` cannot be transferred (as the buffer is already shared by all execution contexts).",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Buffers",
      "chunkIndex": 3,
      "totalChunks": 27,
      "startLineNumber": 26,
      "endLineNumber": 28
    }
  },
  {
    "content": "- _Resize_: Using the {{jsxref(\"ArrayBuffer/resize\", \"resize()\")}} method, you can resize the memory span (either claim more memory space, as long as it doesn't pass the pre-set {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} limit, or release some memory space). `SharedArrayBuffer` can only be [grown](/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow) but not shrunk.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Buffers",
      "chunkIndex": 4,
      "totalChunks": 27,
      "startLineNumber": 29,
      "endLineNumber": 29
    }
  },
  {
    "content": "The difference between `ArrayBuffer` and `SharedArrayBuffer` is that the former is always owned by a single execution context at a time. If you pass an `ArrayBuffer` to a different execution context, it is _transferred_ and the original `ArrayBuffer` becomes unusable. This ensures that only one execution context can access the memory at a time. A `SharedArrayBuffer` is not transferred when passed to a different execution context, so it can be accessed by multiple execution contexts at the same time. This may introduce race conditions when multiple threads access the same memory span, so operations such as {{jsxref(\"Atomics\")}} methods become useful.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Buffers",
      "chunkIndex": 5,
      "totalChunks": 27,
      "startLineNumber": 31,
      "endLineNumber": 31
    }
  },
  {
    "content": "## Views\n\nThere are currently two main kinds of views: typed array views and {{jsxref(\"DataView\")}}. Typed arrays provide [utility methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#instance_methods) that allow you to conveniently transform binary data. `DataView` is more low-level and allows granular control of how data is accessed. The ways to read and write data using the two views are very different.\n\nBoth kinds of views cause {{jsxref(\"ArrayBuffer.isView()\")}} to return `true`. They both have the following properties:\n\n- `buffer`\n  - : The underlying buffer that the view references.\n- `byteOffset`\n  - : The offset, in bytes, of the view from the start of its buffer.\n- `byteLength`\n  - : The length, in bytes, of the view.\n\nBoth constructors accept the above three as separate arguments, although typed array constructors accept `length` as the number of elements rather than the number of bytes.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Views",
      "chunkIndex": 6,
      "totalChunks": 27,
      "startLineNumber": 33,
      "endLineNumber": 46
    }
  },
  {
    "content": "### Typed array views\n\nTyped array views have self-descriptive names and provide views for all the usual numeric types like `Int8`, `Uint32`, `Float64` and so forth. There is one special typed array view, {{jsxref(\"Uint8ClampedArray\")}}, which clamps the values between `0` and `255`. This is useful for [Canvas data processing](/en-US/docs/Web/API/ImageData), for example.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 7,
      "totalChunks": 27,
      "startLineNumber": 48,
      "endLineNumber": 50
    }
  },
  {
    "content": "| Type                            | Value Range                           | Size in bytes | Web IDL type          |\n| ------------------------------- | ------------------------------------- | ------------- | --------------------- |\n| {{jsxref(\"Int8Array\")}}         | -128 to 127                           | 1             | `byte`                |\n| {{jsxref(\"Uint8Array\")}}        | 0 to 255                              | 1             | `octet`               |\n| {{jsxref(\"Uint8ClampedArray\")}} | 0 to 255                              | 1             | `octet`               |\n| {{jsxref(\"Int16Array\")}}        | -32768 to 32767                       | 2             | `short`               |\n| {{jsxref(\"Uint16Array\")}}       | 0 to 65535                            | 2             | `unsigned short`      |\n| {{jsxref(\"Int32Array\")}}        | -2147483648 to 2147483647             | 4             | `long`                |",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 8,
      "totalChunks": 27,
      "startLineNumber": 52,
      "endLineNumber": 59
    }
  },
  {
    "content": "| {{jsxref(\"Int32Array\")}}        | -2147483648 to 2147483647             | 4             | `long`                |\n| {{jsxref(\"Uint32Array\")}}       | 0 to 4294967295                       | 4             | `unsigned long`       |\n| {{jsxref(\"Float16Array\")}}      | `-65504` to `65504`                   | 2             | N/A                   |\n| {{jsxref(\"Float32Array\")}}      | `-3.4e38` to `3.4e38`                 | 4             | `unrestricted float`  |\n| {{jsxref(\"Float64Array\")}}      | `-1.8e308` to `1.8e308`               | 8             | `unrestricted double` |\n| {{jsxref(\"BigInt64Array\")}}     | -2<sup>63</sup> to 2<sup>63</sup> - 1 | 8             | `bigint`              |\n| {{jsxref(\"BigUint64Array\")}}    | 0 to 2<sup>64</sup> - 1               | 8             | `bigint`              |",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 9,
      "totalChunks": 27,
      "startLineNumber": 59,
      "endLineNumber": 65
    }
  },
  {
    "content": "All typed array views have the same methods and properties, as defined by the {{jsxref(\"TypedArray\")}} class. They only differ in the underlying data type and the size in bytes. This is discussed in more detail in [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\nTyped arrays are, in principle, fixed-length, so array methods that may change the length of an array are not available. This includes `pop`, `push`, `shift`, `splice`, and `unshift`. In addition, `flat` is unavailable because there are no nested typed arrays, and related methods including `concat` and `flatMap` do not have great use cases so are unavailable. As `splice` is unavailable, so too is `toSpliced`. All other array methods are shared between `Array` and `TypedArray`.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 10,
      "totalChunks": 27,
      "startLineNumber": 67,
      "endLineNumber": 69
    }
  },
  {
    "content": "On the other hand, `TypedArray` has the extra `set` and `subarray` methods that optimize working with multiple typed arrays that view the same buffer. The `set()` method allows setting multiple typed array indices at once, using data from another array or typed array. If the two typed arrays share the same underlying buffer, the operation may be more efficient as it's a fast memory move. The `subarray()` method creates a new typed array view that references the same buffer as the original typed array, but with a narrower span.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 11,
      "totalChunks": 27,
      "startLineNumber": 71,
      "endLineNumber": 71
    }
  },
  {
    "content": "There's no way to directly change the length of a typed array without changing the underlying buffer. However, when the typed array views a resizable buffer and does not have a fixed `byteLength`, it is _length-tracking_, and will automatically resize to fit the underlying buffer as the resizable buffer is resized. See [Behavior when viewing a resizable buffer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#behavior_when_viewing_a_resizable_buffer) for details.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 12,
      "totalChunks": 27,
      "startLineNumber": 73,
      "endLineNumber": 73
    }
  },
  {
    "content": "Similar to regular arrays, you can access typed array elements using [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation). The corresponding bytes in the underlying buffer are retrieved and interpreted as a number. Any property access using a number (or the string representation of a number, since numbers are always converted to strings when accessing properties) will be proxied by the typed array — they never interact with the object itself. This means, for example:\n\n- Out-of-bounds index access always returns `undefined`, without actually accessing the property on the object.\n- Any attempt to write to such an out-of-bounds property has no effect: it does not throw an error but doesn't change the buffer or typed array either.\n- Typed array indices appear to be configurable and writable, but any attempt to change their attributes will fail.\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nconsole.log(uint8[0]); // 1",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 13,
      "totalChunks": 27,
      "startLineNumber": 75,
      "endLineNumber": 83
    }
  },
  {
    "content": "```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nconsole.log(uint8[0]); // 1\n\n// For illustrative purposes only. Not for production code.\nuint8[-1] = 0;\nuint8[2.5] = 0;\nuint8[NaN] = 0;\nconsole.log(Object.keys(uint8)); // [\"0\", \"1\", \"2\"]\nconsole.log(uint8[NaN]); // undefined\n\n// Non-numeric access still works\nuint8[true] = 0;\nconsole.log(uint8[true]); // 0\n\nObject.freeze(uint8); // TypeError: Cannot freeze array buffer views with elements\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Typed array views",
      "chunkIndex": 14,
      "totalChunks": 27,
      "startLineNumber": 81,
      "endLineNumber": 97
    }
  },
  {
    "content": "### DataView\n\nThe {{jsxref(\"DataView\")}} is a low-level interface that provides a getter/setter API to read and write arbitrary data to the buffer. This is useful when dealing with different types of data, for example. Typed array views are in the native byte-order (see [Endianness](/en-US/docs/Glossary/Endianness)) of your platform. With a `DataView`, the byte-order can be controlled. By default, it's big-endian—the bytes are ordered from most significant to least significant. This can be reversed, with the bytes ordered from least significant to most significant (little-endian), using getter/setter methods.\n\n`DataView` does not require alignment; multi-byte read and write can be started at any specified offset. The setter methods work the same way.\n\nThe following example uses a `DataView` to get the binary representation of any number:",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "DataView",
      "chunkIndex": 15,
      "totalChunks": 27,
      "startLineNumber": 99,
      "endLineNumber": 105
    }
  },
  {
    "content": "The following example uses a `DataView` to get the binary representation of any number:\n\n```js\nfunction toBinary(\n  x,\n  { type = \"Float64\", littleEndian = false, separator = \" \", radix = 16 } = {},\n) {\n  const bytesNeeded = globalThis[`${type}Array`].BYTES_PER_ELEMENT;\n  const dv = new DataView(new ArrayBuffer(bytesNeeded));\n  dv[`set${type}`](0, x, littleEndian);\n  const bytes = Array.from({ length: bytesNeeded }, (_, i) =>\n    dv\n      .getUint8(i)\n      .toString(radix)\n      .padStart(8 / Math.log2(radix), \"0\"),\n  );\n  return bytes.join(separator);\n}\n\nconsole.log(toBinary(1.1)); // 3f f1 99 99 99 99 99 9a\nconsole.log(toBinary(1.1, { littleEndian: true })); // 9a 99 99 99 99 99 f1 3f\nconsole.log(toBinary(20, { type: \"Int8\", radix: 2 })); // 00010100\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "DataView",
      "chunkIndex": 16,
      "totalChunks": 27,
      "startLineNumber": 105,
      "endLineNumber": 127
    }
  },
  {
    "content": "## Web APIs using typed arrays\n\nThese are some examples of APIs that make use of typed arrays; there are others, and more are being added all the time.\n\n- [`FileReader.prototype.readAsArrayBuffer()`](/en-US/docs/Web/API/FileReader/readAsArrayBuffer)\n  - : The `FileReader.prototype.readAsArrayBuffer()` method starts reading the contents of the specified [`Blob`](/en-US/docs/Web/API/Blob) or [`File`](/en-US/docs/Web/API/File).\n- [`fetch()`](/en-US/docs/Web/API/Window/fetch)\n  - : The [`body`](/en-US/docs/Web/API/RequestInit#body) option to `fetch()` can be a typed array or {{jsxref(\"ArrayBuffer\")}}, enabling you to send these objects as the payload of a {{HTTPMethod(\"POST\")}} request.\n- [`ImageData.data`](/en-US/docs/Web/API/ImageData)\n  - : Is a {{jsxref(\"Uint8ClampedArray\")}} representing a one-dimensional array containing the data in the RGBA order, with integer values between `0` and `255` inclusive.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Web APIs using typed arrays",
      "chunkIndex": 17,
      "totalChunks": 27,
      "startLineNumber": 129,
      "endLineNumber": 138
    }
  },
  {
    "content": "## Examples",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Examples",
      "chunkIndex": 18,
      "totalChunks": 27,
      "startLineNumber": 140,
      "endLineNumber": 140
    }
  },
  {
    "content": "### Using views with buffers\n\nFirst of all, we will need to create a buffer, here with a fixed length of 16-bytes:\n\n```js\nconst buffer = new ArrayBuffer(16);\n```\n\nAt this point, we have a chunk of memory whose bytes are all pre-initialized to 0. There's not a lot we can do with it, though. For example, we can confirm that the buffer is the right size:\n\n```js\nif (buffer.byteLength === 16) {\n  console.log(\"Yes, it's 16 bytes.\");\n} else {\n  console.log(\"Oh no, it's the wrong size!\");\n}\n```\n\nBefore we can really work with this buffer, we need to create a view. Let's create a view that treats the data in the buffer as an array of 32-bit signed integers:\n\n```js\nconst int32View = new Int32Array(buffer);\n```\n\nNow we can access the fields in the array just like a normal array:\n\n```js\nfor (let i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n```\n\nThis fills out the 4 entries in the array (4 entries at 4 bytes each makes 16 total bytes) with the values `0`, `2`, `4`, and `6`.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using views with buffers",
      "chunkIndex": 19,
      "totalChunks": 27,
      "startLineNumber": 142,
      "endLineNumber": 174
    }
  },
  {
    "content": "### Multiple views on the same data\n\nThings start to get really interesting when you consider that you can create multiple views onto the same data. For example, given the code above, we can continue like this:\n\n```js\nconst int16View = new Int16Array(buffer);\n\nfor (let i = 0; i < int16View.length; i++) {\n  console.log(`Entry ${i}: ${int16View[i]}`);\n}\n```\n\nHere we create a 16-bit integer view that shares the same buffer as the existing 32-bit view and we output all the values in the buffer as 16-bit integers. Now we get the output `0`, `0`, `2`, `0`, `4`, `0`, `6`, `0` (assuming little-endian encoding):\n\n```plain\nInt16Array  |   0  |  0   |   2  |  0   |   4  |  0   |   6  |  0   |\nInt32Array  |      0      |      2      |      4      |      6      |\nArrayBuffer | 00 00 00 00 | 02 00 00 00 | 04 00 00 00 | 06 00 00 00 |\n```\n\nYou can go a step farther, though. Consider this:\n\n```js\nint16View[0] = 32;\nconsole.log(`Entry 0 in the 32-bit array is now ${int32View[0]}`);\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multiple views on the same data",
      "chunkIndex": 20,
      "totalChunks": 27,
      "startLineNumber": 176,
      "endLineNumber": 201
    }
  },
  {
    "content": "You can go a step farther, though. Consider this:\n\n```js\nint16View[0] = 32;\nconsole.log(`Entry 0 in the 32-bit array is now ${int32View[0]}`);\n```\n\nThe output from this is `\"Entry 0 in the 32-bit array is now 32\"`.\n\nIn other words, the two arrays are indeed viewed on the same data buffer, treating it as different formats.\n\n```plain\nInt16Array  |  32  |  0   |   2  |  0   |   4  |  0   |   6  |  0   |\nInt32Array  |     32      |      2      |      4      |      6      |\nArrayBuffer | 20 00 00 00 | 02 00 00 00 | 04 00 00 00 | 06 00 00 00 |\n```\n\nYou can do this with any view type, although if you set an integer and then read it as a floating-point number, you will probably get a strange result because the bits are interpreted differently.\n\n```js\nconst float32View = new Float32Array(buffer);\nconsole.log(float32View[0]); // 4.484155085839415e-44\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Multiple views on the same data",
      "chunkIndex": 21,
      "totalChunks": 27,
      "startLineNumber": 196,
      "endLineNumber": 218
    }
  },
  {
    "content": "### Reading text from a buffer\n\nBuffers don't always represent numbers. For example, reading a file can give you a text data buffer. You can read this data out of the buffer using a typed array.\n\nThe following reads UTF-8 text using the {{domxref(\"TextDecoder\")}} web API:\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\n// Data manually written here, but pretend it was already in the buffer\nuint8.set([228, 189, 160, 229, 165, 189]);\nconst text = new TextDecoder().decode(uint8);\nconsole.log(text); // \"你好\"\n```\n\nThe following reads UTF-16 text using the {{jsxref(\"String.fromCharCode()\")}} method:\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint16 = new Uint16Array(buffer);\n// Data manually written here, but pretend it was already in the buffer\nuint16.set([0x4f60, 0x597d]);\nconst text = String.fromCharCode(...uint16);\nconsole.log(text); // \"你好\"\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Reading text from a buffer",
      "chunkIndex": 22,
      "totalChunks": 27,
      "startLineNumber": 220,
      "endLineNumber": 244
    }
  },
  {
    "content": "### Working with complex data structures\n\nBy combining a single buffer with multiple views of different types, starting at different offsets into the buffer, you can interact with data objects containing multiple data types. This lets you, for example, interact with complex data structures from [WebGL](/en-US/docs/Web/API/WebGL_API) or data files.\n\nConsider this C structure:\n\n```c\nstruct someStruct {\n    unsigned long id;\n    char username[16];\n    float amountDue;\n};\n```\n\nYou can access a buffer containing data in this format like this:\n\n```js\nconst buffer = new ArrayBuffer(24);\n\n// … read the data into the buffer …\n\nconst idView = new Uint32Array(buffer, 0, 1);\nconst usernameView = new Uint8Array(buffer, 4, 16);\nconst amountDueView = new Float32Array(buffer, 20, 1);\n```\n\nThen you can access, for example, the amount due with `amountDueView[0]`.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Working with complex data structures",
      "chunkIndex": 23,
      "totalChunks": 27,
      "startLineNumber": 246,
      "endLineNumber": 272
    }
  },
  {
    "content": "Then you can access, for example, the amount due with `amountDueView[0]`.\n\n> [!NOTE]\n> The [data structure alignment](https://en.wikipedia.org/wiki/Data_structure_alignment) in a C structure is platform-dependent. Take precautions and considerations for these padding differences.",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Working with complex data structures",
      "chunkIndex": 24,
      "totalChunks": 27,
      "startLineNumber": 272,
      "endLineNumber": 275
    }
  },
  {
    "content": "### Conversion to normal arrays\n\nAfter processing a typed array, it is sometimes useful to convert it back to a normal array in order to benefit from the {{jsxref(\"Array\")}} prototype. This can be done using {{jsxref(\"Array.from()\")}}:\n\n```js\nconst typedArray = new Uint8Array([1, 2, 3, 4]);\nconst normalArray = Array.from(typedArray);\n```\n\nas well as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax):\n\n```js\nconst typedArray = new Uint8Array([1, 2, 3, 4]);\nconst normalArray = [...typedArray];\n```",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Conversion to normal arrays",
      "chunkIndex": 25,
      "totalChunks": 27,
      "startLineNumber": 277,
      "endLineNumber": 291
    }
  },
  {
    "content": "## See also\n\n- [Faster Canvas Pixel Manipulation with Typed Arrays](https://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/) on hacks.mozilla.org (2011)\n- [Typed arrays - Binary data in the browser](https://web.dev/articles/webgl-typed-arrays) on web.dev (2012)\n- [Endianness](/en-US/docs/Glossary/Endianness)\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n\n{{PreviousNext(\"Web/JavaScript/Guide/Using_promises\", \"Web/JavaScript/Guide/Iterators_and_generators\")}}",
    "metadata": {
      "source": "typed_arrays/index.md",
      "documentSlug": "Web/JavaScript/Guide/Typed_arrays",
      "documentTitle": "JavaScript typed arrays",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 26,
      "totalChunks": 27,
      "startLineNumber": 293,
      "endLineNumber": 303
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Working_with_objects\", \"Web/JavaScript/Guide/Using_promises\")}}\n\nJavaScript is a prototype-based language — an object's behaviors are specified by its own properties and its prototype's properties. However, with the addition of [classes](/en-US/docs/Web/JavaScript/Reference/Classes), the creation of hierarchies of objects and the inheritance of properties and their values are much more in line with other object-oriented languages such as Java. In this section, we will demonstrate how objects can be created from classes.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 47,
      "startLineNumber": 8,
      "endLineNumber": 10
    }
  },
  {
    "content": "In many other languages, _classes_, or constructors, are clearly distinguished from _objects_, or instances. In JavaScript, classes are mainly an abstraction over the existing prototypical inheritance mechanism — all patterns are convertible to prototype-based inheritance. Classes themselves are normal JavaScript values as well, and have their own prototype chains. In fact, most plain JavaScript functions can be used as constructors — you use the `new` operator with a constructor function to create a new object.\n\nWe will be playing with the well-abstracted class model in this tutorial, and discuss what semantics classes offer. If you want to dive deep into the underlying prototype system, you can read the [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) guide.\n\nThis chapter assumes that you are already somewhat familiar with JavaScript and that you have used ordinary objects.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 47,
      "startLineNumber": 12,
      "endLineNumber": 16
    }
  },
  {
    "content": "## Overview of classes\n\nIf you have some hands-on experience with JavaScript, or have followed along with the guide, you probably have already used classes, even if you haven't created one. For example, this [may seem familiar to you](/en-US/docs/Web/JavaScript/Guide/Representing_dates_times):\n\n```js\nconst bigDay = new Date(2019, 6, 19);\nconsole.log(bigDay.toLocaleDateString());\nif (bigDay.getTime() < Date.now()) {\n  console.log(\"Once upon a time...\");\n}\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview of classes",
      "chunkIndex": 2,
      "totalChunks": 47,
      "startLineNumber": 18,
      "endLineNumber": 28
    }
  },
  {
    "content": "```js\nconst bigDay = new Date(2019, 6, 19);\nconsole.log(bigDay.toLocaleDateString());\nif (bigDay.getTime() < Date.now()) {\n  console.log(\"Once upon a time...\");\n}\n```\n\nOn the first line, we created an instance of the class [`Date`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), and called it `bigDay`. On the second line, we called a [method](/en-US/docs/Glossary/Method) [`toLocaleDateString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString) on the `bigDay` instance, which returns a string. Then, we compared two numbers: one returned from the [`getTime()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) method, the other directly called from the `Date` class _itself_, as [`Date.now()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now).\n\n`Date` is a built-in class of JavaScript. From this example, we can get some basic ideas of what classes do:",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview of classes",
      "chunkIndex": 3,
      "totalChunks": 47,
      "startLineNumber": 22,
      "endLineNumber": 32
    }
  },
  {
    "content": "`Date` is a built-in class of JavaScript. From this example, we can get some basic ideas of what classes do:\n\n- Classes create objects through the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n- Each object has some properties (data or method) added by the class.\n- The class stores some properties (data or method) itself, which are usually used to interact with instances.\n\nThese correspond to the three key features of classes:\n\n- Constructor;\n- Instance methods and instance fields;\n- Static methods and static fields.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Overview of classes",
      "chunkIndex": 4,
      "totalChunks": 47,
      "startLineNumber": 32,
      "endLineNumber": 42
    }
  },
  {
    "content": "## Declaring a class\n\nClasses are usually created with _class declarations_.\n\n```js\nclass MyClass {\n  // class body...\n}\n```\n\nWithin a class body, there are a range of features available.\n\n```js\nclass MyClass {\n  // Constructor\n  constructor() {\n    // Constructor body\n  }\n  // Instance field\n  myField = \"foo\";\n  // Instance method\n  myMethod() {\n    // myMethod body\n  }\n  // Static field\n  static myStaticField = \"bar\";\n  // Static method\n  static myStaticMethod() {\n    // myStaticMethod body\n  }\n  // Static block\n  static {\n    // Static initialization code\n  }\n  // Fields, methods, static fields, and static methods all have\n  // \"private\" forms\n  #myPrivateField = \"bar\";\n}\n```\n\nIf you came from a pre-ES6 world, you may be more familiar with using functions as constructors. The pattern above would roughly translate to the following with function constructors:",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declaring a class",
      "chunkIndex": 5,
      "totalChunks": 47,
      "startLineNumber": 44,
      "endLineNumber": 84
    }
  },
  {
    "content": "If you came from a pre-ES6 world, you may be more familiar with using functions as constructors. The pattern above would roughly translate to the following with function constructors:\n\n```js\nfunction MyClass() {\n  this.myField = \"foo\";\n  // Constructor body\n}\nMyClass.myStaticField = \"bar\";\nMyClass.myStaticMethod = function () {\n  // myStaticMethod body\n};\nMyClass.prototype.myMethod = function () {\n  // myMethod body\n};\n\n(function () {\n  // Static initialization code\n})();\n```\n\n> [!NOTE]\n> Private fields and methods are new features in classes with no trivial equivalent in function constructors.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Declaring a class",
      "chunkIndex": 6,
      "totalChunks": 47,
      "startLineNumber": 84,
      "endLineNumber": 105
    }
  },
  {
    "content": "### Constructing a class\n\nAfter a class has been declared, you can create instances of it using the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```js\nconst myInstance = new MyClass();\nconsole.log(myInstance.myField); // 'foo'\nmyInstance.myMethod();\n```\n\nTypical function constructors can both be constructed with `new` and called without `new`. However, attempting to \"call\" a class without `new` will result in an error.\n\n```js\nconst myInstance = MyClass(); // TypeError: Class constructor MyClass cannot be invoked without 'new'\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructing a class",
      "chunkIndex": 7,
      "totalChunks": 47,
      "startLineNumber": 107,
      "endLineNumber": 121
    }
  },
  {
    "content": "### Class declaration hoisting\n\nUnlike function declarations, class declarations are not [hoisted](/en-US/docs/Glossary/Hoisting) (or, in some interpretations, hoisted but with the temporal dead zone restriction), which means you cannot use a class before it is declared.\n\n```js\nnew MyClass(); // ReferenceError: Cannot access 'MyClass' before initialization\n\nclass MyClass {}\n```\n\nThis behavior is similar to variables declared with [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) and [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const).",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Class declaration hoisting",
      "chunkIndex": 8,
      "totalChunks": 47,
      "startLineNumber": 123,
      "endLineNumber": 133
    }
  },
  {
    "content": "### Class expressions\n\nSimilar to functions, class declarations also have their expression counterparts.\n\n```js\nconst MyClass = class {\n  // Class body...\n};\n```\n\nClass expressions can have names as well. The expression's name is only visible to the class's body.\n\n```js\nconst MyClass = class MyClassLongerName {\n  // Class body. Here MyClass and MyClassLongerName point to the same class.\n};\nnew MyClassLongerName(); // ReferenceError: MyClassLongerName is not defined\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Class expressions",
      "chunkIndex": 9,
      "totalChunks": 47,
      "startLineNumber": 135,
      "endLineNumber": 152
    }
  },
  {
    "content": "## Constructor\n\nPerhaps the most important job of a class is to act as a \"factory\" for objects. For example, when we use the `Date` constructor, we expect it to give a new object which represents the date data we passed in — which we can then manipulate with other methods the instance exposes. In classes, the instance creation is done by the [constructor](/en-US/docs/Web/JavaScript/Reference/Classes/constructor).\n\nAs an example, we would create a class called `Color`, which represents a specific color. Users create colors through passing in an [RGB](/en-US/docs/Glossary/RGB) triplet.\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    // Assign the RGB values as a property of `this`.\n    this.values = [r, g, b];\n  }\n}\n```\n\nOpen your browser's devtools, paste the above code into the console, and then create an instance:\n\n```js\nconst red = new Color(255, 0, 0);\nconsole.log(red);\n```\n\nYou should see some output like this:",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructor",
      "chunkIndex": 10,
      "totalChunks": 47,
      "startLineNumber": 154,
      "endLineNumber": 176
    }
  },
  {
    "content": "```js\nconst red = new Color(255, 0, 0);\nconsole.log(red);\n```\n\nYou should see some output like this:\n\n```plain\nObject { values: (3) […] }\n  values: Array(3) [ 255, 0, 0 ]\n```\n\nYou have successfully created a `Color` instance, and the instance has a `values` property, which is an array of the RGB values you passed in. That is pretty much equivalent to the following:\n\n```js\nfunction createColor(r, g, b) {\n  return {\n    values: [r, g, b],\n  };\n}\n```\n\nThe constructor's syntax is exactly the same as a normal function — which means you can use other syntaxes, like [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters):\n\n```js\nclass Color {\n  constructor(...values) {\n    this.values = values;\n  }\n}\n\nconst red = new Color(255, 0, 0);\n// Creates an instance with the same shape as above.\n```\n\nEach time you call `new`, a different instance is created.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructor",
      "chunkIndex": 11,
      "totalChunks": 47,
      "startLineNumber": 171,
      "endLineNumber": 206
    }
  },
  {
    "content": "const red = new Color(255, 0, 0);\n// Creates an instance with the same shape as above.\n```\n\nEach time you call `new`, a different instance is created.\n\n```js\nconst red = new Color(255, 0, 0);\nconst anotherRed = new Color(255, 0, 0);\nconsole.log(red === anotherRed); // false\n```\n\nWithin a class constructor, the value of `this` points to the newly created instance. You can assign properties to it, or read existing properties (especially methods — which we will cover next).\n\nThe `this` value will be automatically returned as the result of `new`. You are advised to not return any value from the constructor — because if you return a non-primitive value, it will become the value of the `new` expression, and the value of `this` is dropped. (You can read more about what `new` does in [its description](/en-US/docs/Web/JavaScript/Reference/Operators/new#description).)\n\n```js\nclass MyClass {\n  constructor() {\n    this.myField = \"foo\";\n    return {};\n  }\n}",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructor",
      "chunkIndex": 12,
      "totalChunks": 47,
      "startLineNumber": 202,
      "endLineNumber": 224
    }
  },
  {
    "content": "```js\nclass MyClass {\n  constructor() {\n    this.myField = \"foo\";\n    return {};\n  }\n}\n\nconsole.log(new MyClass().myField); // undefined\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Constructor",
      "chunkIndex": 13,
      "totalChunks": 47,
      "startLineNumber": 218,
      "endLineNumber": 227
    }
  },
  {
    "content": "## Instance methods\n\nIf a class only has a constructor, it is not much different from a `createX` factory function which just creates plain objects. However, the power of classes is that they can be used as \"templates\" which automatically assign methods to instances.\n\nFor example, for `Date` instances, you can use a range of methods to get different information from a single date value, such as the [year](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear), [month](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth), [day of the week](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay), etc. You can also set those values through the `setX` counterparts like [`setFullYear`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear).\n\nFor our own `Color` class, we can add a method called `getRed` which returns the red value of the color.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Instance methods",
      "chunkIndex": 14,
      "totalChunks": 47,
      "startLineNumber": 229,
      "endLineNumber": 235
    }
  },
  {
    "content": "For our own `Color` class, we can add a method called `getRed` which returns the red value of the color.\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  getRed() {\n    return this.values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```\n\nWithout methods, you may be tempted to define the function within the constructor:\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n    this.getRed = function () {\n      return this.values[0];\n    };\n  }\n}\n```\n\nThis also works. However, a problem is that this creates a new function every time a `Color` instance is created, even when they all do the same thing!\n\n```js\nconsole.log(new Color().getRed === new Color().getRed); // false\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Instance methods",
      "chunkIndex": 15,
      "totalChunks": 47,
      "startLineNumber": 235,
      "endLineNumber": 268
    }
  },
  {
    "content": "```js\nconsole.log(new Color().getRed === new Color().getRed); // false\n```\n\nIn contrast, if you use a method, it will be shared between all instances. A function can be shared between all instances, but still have its behavior differ when different instances call it, because the value of `this` is different. If you are curious _where_ this method is stored in — it's defined on the prototype of all instances, or `Color.prototype`, which is explained in more detail in [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain).\n\nSimilarly, we can create a new method called `setRed`, which sets the red value of the color.\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  getRed() {\n    return this.values[0];\n  }\n  setRed(value) {\n    this.values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.setRed(0);\nconsole.log(red.getRed()); // 0; of course, it should be called \"black\" at this stage!\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Instance methods",
      "chunkIndex": 16,
      "totalChunks": 47,
      "startLineNumber": 266,
      "endLineNumber": 290
    }
  },
  {
    "content": "## Private fields\n\nYou might be wondering: why do we want to go to the trouble of using `getRed` and `setRed` methods, when we can directly access the `values` array on the instance?\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.values[0] = 0;\nconsole.log(red.values[0]); // 0\n```\n\nThere is a philosophy in object-oriented programming called \"encapsulation\". This means you should not access the underlying implementation of an object, but instead use well-abstracted methods to interact with it. For example, if we suddenly decided to represent colors as [HSL](/en-US/docs/Web/CSS/color_value/hsl) instead:\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    // values is now an HSL array!\n    this.values = rgbToHSL([r, g, b]);\n  }\n  getRed() {\n    return this.values[0];\n  }\n  setRed(value) {\n    this.values[0] = value;\n  }\n}",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 17,
      "totalChunks": 47,
      "startLineNumber": 292,
      "endLineNumber": 322
    }
  },
  {
    "content": "const red = new Color(255, 0, 0);\nconsole.log(red.values[0]); // 0; It's not 255 anymore, because the H value for pure red is 0\n```\n\nThe user assumption that `values` means the RGB value suddenly collapses, and it may cause their logic to break. So, if you are an implementor of a class, you would want to hide the internal data structure of your instance from your user, both to keep the API clean and to prevent the user's code from breaking when you do some \"harmless refactors\". In classes, this is done through [_private fields_](/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements).",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 18,
      "totalChunks": 47,
      "startLineNumber": 324,
      "endLineNumber": 328
    }
  },
  {
    "content": "A private field is an identifier prefixed with `#` (the hash symbol). The hash is an integral part of the field's name, which means a private field can never have name clash with a public field or method. In order to refer to a private field anywhere in the class, you must _declare_ it in the class body (you can't create a private element on the fly). Apart from this, a private field is pretty much equivalent to a normal property.\n\n```js\nclass Color {\n  // Declare: every Color instance has a private field called #values.\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  getRed() {\n    return this.#values[0];\n  }\n  setRed(value) {\n    this.#values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 19,
      "totalChunks": 47,
      "startLineNumber": 330,
      "endLineNumber": 349
    }
  },
  {
    "content": "const red = new Color(255, 0, 0);\nconsole.log(red.getRed()); // 255\n```\n\nAccessing private fields outside the class is an early syntax error. The language can guard against this because `#privateField` is a special syntax, so it can do some static analysis and find all usage of private fields before even evaluating the code.\n\n```js-nolint example-bad\nconsole.log(red.#values); // SyntaxError: Private field '#values' must be declared in an enclosing class\n```\n\n> [!NOTE]\n> Code run in the Chrome console can access private elements outside the class. This is a DevTools-only relaxation of the JavaScript syntax restriction.\n\nPrivate fields in JavaScript are _hard private_: if the class does not implement methods that expose these private fields, there's absolutely no mechanism to retrieve them from outside the class. This means you are safe to do any refactors to your class's private fields, as long as the behavior of exposed methods stay the same.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 20,
      "totalChunks": 47,
      "startLineNumber": 347,
      "endLineNumber": 360
    }
  },
  {
    "content": "After we've made the `values` field private, we can add some more logic in the `getRed` and `setRed` methods, instead of making them simple pass-through methods. For example, we can add a check in `setRed` to see if it's a valid R value:\n\n```js\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  getRed() {\n    return this.#values[0];\n  }\n  setRed(value) {\n    if (value < 0 || value > 255) {\n      throw new RangeError(\"Invalid R value\");\n    }\n    this.#values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.setRed(1000); // RangeError: Invalid R value\n```\n\nIf we leave the `values` property exposed, our users can easily circumvent that check by assigning to `values[0]` directly, and create invalid colors. But with a well-encapsulated API, we can make our code more robust and prevent logic errors downstream.\n\nA class method can read the private fields of other instances, as long as they belong to the same class.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 21,
      "totalChunks": 47,
      "startLineNumber": 362,
      "endLineNumber": 387
    }
  },
  {
    "content": "A class method can read the private fields of other instances, as long as they belong to the same class.\n\n```js\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  redDifference(anotherColor) {\n    // #values doesn't necessarily need to be accessed from this:\n    // you can access private fields of other instances belonging\n    // to the same class.\n    return this.#values[0] - anotherColor.#values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nconst crimson = new Color(220, 20, 60);\nred.redDifference(crimson); // 35\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 22,
      "totalChunks": 47,
      "startLineNumber": 387,
      "endLineNumber": 406
    }
  },
  {
    "content": "const red = new Color(255, 0, 0);\nconst crimson = new Color(220, 20, 60);\nred.redDifference(crimson); // 35\n```\n\nHowever, if `anotherColor` is not a Color instance, `#values` won't exist. (Even if another class has an identically named `#values` private field, it's not referring to the same thing and cannot be accessed here.) Accessing a nonexistent private element throws an error instead of returning `undefined` like normal properties do. If you don't know if a private field exists on an object and you wish to access it without using `try`/`catch` to handle the error, you can use the [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator.\n\n```js\nclass Color {\n  #values;\n  constructor(r, g, b) {\n    this.#values = [r, g, b];\n  }\n  redDifference(anotherColor) {\n    if (!(#values in anotherColor)) {\n      throw new TypeError(\"Color instance expected\");\n    }\n    return this.#values[0] - anotherColor.#values[0];\n  }\n}\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 23,
      "totalChunks": 47,
      "startLineNumber": 403,
      "endLineNumber": 423
    }
  },
  {
    "content": "> [!NOTE]\n> Keep in mind that the `#` is a special identifier syntax, and you can't use the field name as if it's a string. `\"#values\" in anotherColor` would look for a property name literally called `\"#values\"`, instead of a private field.\n\nThere are some limitations in using private elements: the same name can't be declared twice in a single class, and they can't be deleted. Both lead to early syntax errors.\n\n```js-nolint example-bad\nclass BadIdeas {\n  #firstName;\n  #firstName; // syntax error occurs here\n  #lastName;\n  constructor() {\n    delete this.#lastName; // also a syntax error\n  }\n}\n```\n\nMethods, [getters, and setters](#accessor_fields) can be private as well. They're useful when you have something complex that the class needs to do internally but no other part of the code should be allowed to call.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 24,
      "totalChunks": 47,
      "startLineNumber": 425,
      "endLineNumber": 441
    }
  },
  {
    "content": "For example, imagine creating [HTML custom elements](/en-US/docs/Web/API/Web_components/Using_custom_elements) that should do something somewhat complicated when clicked/tapped/otherwise activated. Furthermore, the somewhat complicated things that happen when the element is clicked should be restricted to this class, because no other part of the JavaScript will (or should) ever access it.\n\n```js\nclass Counter extends HTMLElement {\n  #xValue = 0;\n  constructor() {\n    super();\n    this.onclick = this.#clicked.bind(this);\n  }\n  get #x() {\n    return this.#xValue;\n  }\n  set #x(value) {\n    this.#xValue = value;\n    window.requestAnimationFrame(this.#render.bind(this));\n  }\n  #clicked() {\n    this.#x++;\n  }\n  #render() {\n    this.textContent = this.#x.toString();\n  }\n  connectedCallback() {\n    this.#render();\n  }\n}\n\ncustomElements.define(\"num-counter\", Counter);\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 25,
      "totalChunks": 47,
      "startLineNumber": 443,
      "endLineNumber": 471
    }
  },
  {
    "content": "customElements.define(\"num-counter\", Counter);\n```\n\nIn this case, pretty much every field and method is private to the class. Thus, it presents an interface to the rest of the code that's essentially just like a built-in HTML element. No other part of the program has the power to affect any of the internals of `Counter`.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Private fields",
      "chunkIndex": 26,
      "totalChunks": 47,
      "startLineNumber": 470,
      "endLineNumber": 473
    }
  },
  {
    "content": "## Accessor fields\n\n`color.getRed()` and `color.setRed()` allow us to read and write to the red value of a color. If you come from languages like Java, you will be very familiar with this pattern. However, using methods to simply access a property is still somewhat unergonomic in JavaScript. _Accessor fields_ allow us to manipulate something as if it is an \"actual property\".\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  get red() {\n    return this.values[0];\n  }\n  set red(value) {\n    this.values[0] = value;\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.red = 0;\nconsole.log(red.red); // 0\n```\n\nIt looks as if the object has a property called `red` — but actually, no such property exists on the instance! There are only two methods, but they are prefixed with `get` and `set`, which allows them to be manipulated as if they were properties.\n\nIf a field only has a getter but no setter, it will be effectively read-only.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessor fields",
      "chunkIndex": 27,
      "totalChunks": 47,
      "startLineNumber": 475,
      "endLineNumber": 499
    }
  },
  {
    "content": "If a field only has a getter but no setter, it will be effectively read-only.\n\n```js\nclass Color {\n  constructor(r, g, b) {\n    this.values = [r, g, b];\n  }\n  get red() {\n    return this.values[0];\n  }\n}\n\nconst red = new Color(255, 0, 0);\nred.red = 0;\nconsole.log(red.red); // 255\n```\n\nIn [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), the `red.red = 0` line will throw a type error: \"Cannot set property red of #\\<Color> which has only a getter\". In non-strict mode, the assignment is silently ignored.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessor fields",
      "chunkIndex": 28,
      "totalChunks": 47,
      "startLineNumber": 499,
      "endLineNumber": 516
    }
  },
  {
    "content": "## Public fields\n\nPrivate fields also have their public counterparts, which allow every instance to have a property. Fields are usually designed to be independent of the constructor's parameters.\n\n```js\nclass MyClass {\n  luckyNumber = Math.random();\n}\nconsole.log(new MyClass().luckyNumber); // 0.5\nconsole.log(new MyClass().luckyNumber); // 0.3\n```\n\nPublic fields are almost equivalent to assigning a property to `this`. For example, the above example can also be converted to:\n\n```js\nclass MyClass {\n  constructor() {\n    this.luckyNumber = Math.random();\n  }\n}\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Public fields",
      "chunkIndex": 29,
      "totalChunks": 47,
      "startLineNumber": 518,
      "endLineNumber": 538
    }
  },
  {
    "content": "## Static properties\n\nWith the `Date` example, we have also encountered the [`Date.now()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now) method, which returns the current date. This method does not belong to any date instance — it belongs to the class itself. However, it's put on the `Date` class instead of being exposed as a global `DateNow()` function, because it's mostly useful when dealing with date instances.\n\n> [!NOTE]\n> Prefixing utility methods with what they deal with is called \"namespacing\" and is considered a good practice. For example, in addition to the older, unprefixed [`parseInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) method, JavaScript also later added the prefixed [`Number.parseInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) method to indicate that it's for dealing with numbers.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Static properties",
      "chunkIndex": 30,
      "totalChunks": 47,
      "startLineNumber": 540,
      "endLineNumber": 545
    }
  },
  {
    "content": "[_Static properties_](/en-US/docs/Web/JavaScript/Reference/Classes/static) are a group of class features that are defined on the class itself, rather than on individual instances of the class. These features include:\n\n- Static methods\n- Static fields\n- Static getters and setters\n\nEverything also has private counterparts. For example, for our `Color` class, we can create a static method that checks whether a given triplet is a valid RGB value:\n\n```js\nclass Color {\n  static isValid(r, g, b) {\n    return r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255;\n  }\n}\n\nColor.isValid(255, 0, 0); // true\nColor.isValid(1000, 0, 0); // false\n```\n\nStatic properties are very similar to their instance counterparts, except that:\n\n- They are all prefixed with `static`, and\n- They are not accessible from instances.\n\n```js\nconsole.log(new Color(0, 0, 0).isValid); // undefined\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Static properties",
      "chunkIndex": 31,
      "totalChunks": 47,
      "startLineNumber": 547,
      "endLineNumber": 573
    }
  },
  {
    "content": "- They are all prefixed with `static`, and\n- They are not accessible from instances.\n\n```js\nconsole.log(new Color(0, 0, 0).isValid); // undefined\n```\n\nThere is also a special construct called a [_static initialization block_](/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), which is a block of code that runs when the class is first loaded.\n\n```js\nclass MyClass {\n  static {\n    MyClass.myStaticProperty = \"foo\";\n  }\n}\n\nconsole.log(MyClass.myStaticProperty); // 'foo'\n```\n\nStatic initialization blocks are almost equivalent to immediately executing some code after a class has been declared. The only difference is that they have access to static private elements.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Static properties",
      "chunkIndex": 32,
      "totalChunks": 47,
      "startLineNumber": 568,
      "endLineNumber": 587
    }
  },
  {
    "content": "## Extends and inheritance\n\nA key feature that classes bring about (in addition to ergonomic encapsulation with private fields) is _inheritance_, which means one object can \"borrow\" a large part of another object's behaviors, while overriding or enhancing certain parts with its own logic.\n\nFor example, suppose our `Color` class now needs to support transparency. We may be tempted to add a new field that indicates its transparency:\n\n```js\nclass Color {\n  #values;\n  constructor(r, g, b, a = 1) {\n    this.#values = [r, g, b, a];\n  }\n  get alpha() {\n    return this.#values[3];\n  }\n  set alpha(value) {\n    if (value < 0 || value > 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#values[3] = value;\n  }\n}\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 33,
      "totalChunks": 47,
      "startLineNumber": 589,
      "endLineNumber": 611
    }
  },
  {
    "content": "However, this means every instance — even the vast majority which aren't transparent (those with an alpha value of 1) — will have to have the extra alpha value, which is not very elegant. Plus, if the features keep growing, our `Color` class will become very bloated and hard to maintain.\n\nInstead, in object-oriented programming, we would create a _derived class_. The derived class has access to all public properties of the parent class. In JavaScript, derived classes are declared with an [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) clause, which indicates the class it extends from.\n\n```js\nclass ColorWithAlpha extends Color {\n  #alpha;\n  constructor(r, g, b, a) {\n    super(r, g, b);\n    this.#alpha = a;\n  }\n  get alpha() {\n    return this.#alpha;\n  }\n  set alpha(value) {\n    if (value < 0 || value > 1) {\n      throw new RangeError(\"Alpha value must be between 0 and 1\");\n    }\n    this.#alpha = value;\n  }\n}\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 34,
      "totalChunks": 47,
      "startLineNumber": 613,
      "endLineNumber": 634
    }
  },
  {
    "content": "There are a few things that have immediately come to attention. First is that in the constructor, we are calling `super(r, g, b)`. It is a language requirement to call [`super()`](/en-US/docs/Web/JavaScript/Reference/Operators/super) before accessing `this`. The `super()` call calls the parent class's constructor to initialize `this` — here it's roughly equivalent to `this = new Color(r, g, b)`. You can have code before `super()`, but you cannot access `this` before `super()` — the language prevents you from accessing the uninitialized `this`.\n\nAfter the parent class is done with modifying `this`, the derived class can do its own logic. Here we added a private field called `#alpha`, and also provided a pair of getter/setters to interact with them.\n\nA derived class inherits all methods from its parent. For example, although `ColorWithAlpha` doesn't declare a `get red()` accessor itself, you can still access `red` because this behavior is specified by the parent class:",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 35,
      "totalChunks": 47,
      "startLineNumber": 636,
      "endLineNumber": 640
    }
  },
  {
    "content": "```js\nconst color = new ColorWithAlpha(255, 0, 0, 0.5);\nconsole.log(color.red); // 255\n```\n\nDerived classes can also override methods from the parent class. For example, all classes implicitly inherit the [`Object`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) class, which defines some basic methods like [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString). However, the base `toString()` method is notoriously useless, because it prints `[object Object]` in most cases:\n\n```js\nconsole.log(red.toString()); // [object Object]\n```\n\nInstead, our class can override it to print the color's RGB values:\n\n```js\nclass Color {\n  #values;\n  // …\n  toString() {\n    return this.#values.join(\", \");\n  }\n}\n\nconsole.log(new Color(255, 0, 0).toString()); // '255, 0, 0'\n```\n\nWithin derived classes, you can access the parent class's methods by using `super`. This allows you to build enhancement methods and avoid code duplication.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 36,
      "totalChunks": 47,
      "startLineNumber": 642,
      "endLineNumber": 667
    }
  },
  {
    "content": "Within derived classes, you can access the parent class's methods by using `super`. This allows you to build enhancement methods and avoid code duplication.\n\n```js\nclass ColorWithAlpha extends Color {\n  #alpha;\n  // …\n  toString() {\n    // Call the parent class's toString() and build on the return value\n    return `${super.toString()}, ${this.#alpha}`;\n  }\n}\n\nconsole.log(new ColorWithAlpha(255, 0, 0, 0.5).toString()); // '255, 0, 0, 0.5'\n```\n\nWhen you use `extends`, the static methods inherit from each other as well, so you can also override or enhance them.\n\n```js\nclass ColorWithAlpha extends Color {\n  // …\n  static isValid(r, g, b, a) {\n    // Call the parent class's isValid() and build on the return value\n    return super.isValid(r, g, b) && a >= 0 && a <= 1;\n  }\n}\n\nconsole.log(ColorWithAlpha.isValid(255, 0, 0, -1)); // false\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 37,
      "totalChunks": 47,
      "startLineNumber": 667,
      "endLineNumber": 694
    }
  },
  {
    "content": "console.log(ColorWithAlpha.isValid(255, 0, 0, -1)); // false\n```\n\nDerived classes don't have access to the parent class's private fields — this is another key aspect to JavaScript private fields being \"hard private\". Private fields are scoped to the class body itself and do not grant access to _any_ outside code.\n\n```js-nolint example-bad\nclass ColorWithAlpha extends Color {\n  log() {\n    console.log(this.#values); // SyntaxError: Private field '#values' must be declared in an enclosing class\n  }\n}\n```\n\nA class can only extend from one class. This prevents problems in multiple inheritance like the [diamond problem](https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem). However, due to the dynamic nature of JavaScript, it's still possible to achieve the effect of multiple inheritance through class composition and [mixins](/en-US/docs/Web/JavaScript/Reference/Classes/extends#mix-ins).",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 38,
      "totalChunks": 47,
      "startLineNumber": 693,
      "endLineNumber": 706
    }
  },
  {
    "content": "Instances of derived classes are also [instances of](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) the base class.\n\n```js\nconst color = new ColorWithAlpha(255, 0, 0, 0.5);\nconsole.log(color instanceof Color); // true\nconsole.log(color instanceof ColorWithAlpha); // true\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Extends and inheritance",
      "chunkIndex": 39,
      "totalChunks": 47,
      "startLineNumber": 708,
      "endLineNumber": 714
    }
  },
  {
    "content": "## Why classes?\n\nThe guide has been pragmatic so far: we are focusing on _how_ classes can be used, but there's one question unanswered: _why_ would one use a class? The answer is: it depends.\n\nClasses introduce a _paradigm_, or a way to organize your code. Classes are the foundations of object-oriented programming, which is built on concepts like [inheritance](<https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)>) and [polymorphism](<https://en.wikipedia.org/wiki/Polymorphism_(computer_science)>) (especially _subtype polymorphism_). However, many people are philosophically against certain OOP practices and don't use classes as a result.\n\nFor example, one thing that makes `Date` objects infamous is that they're _mutable_.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 40,
      "totalChunks": 47,
      "startLineNumber": 716,
      "endLineNumber": 722
    }
  },
  {
    "content": "For example, one thing that makes `Date` objects infamous is that they're _mutable_.\n\n```js\nfunction incrementDay(date) {\n  return date.setDate(date.getDate() + 1);\n}\nconst date = new Date(); // 2019-06-19\nconst newDay = incrementDay(date);\nconsole.log(newDay); // 2019-06-20\n// The old date is modified as well!?\nconsole.log(date); // 2019-06-20\n```\n\nMutability and internal state are important aspects of object-oriented programming, but often make code hard to reason with — because any seemingly innocent operation may have unexpected side effects and change the behavior in other parts of the program.\n\nIn order to reuse code, we usually resort to extending classes, which can create big hierarchies of inheritance patterns.\n\n![A typical OOP inheritance tree, with five classes and three levels](figure8.1.png)",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 41,
      "totalChunks": 47,
      "startLineNumber": 722,
      "endLineNumber": 739
    }
  },
  {
    "content": "![A typical OOP inheritance tree, with five classes and three levels](figure8.1.png)\n\nHowever, it is often hard to describe inheritance cleanly when one class can only extend one other class. Often, we want the behavior of multiple classes. In Java, this is done through interfaces; in JavaScript, it can be done through mixins. But at the end of the day, it's still not very convenient.\n\nOn the brighter side, classes are a very powerful way to organize our code on a higher level. For example, without the `Color` class, we may need to create a dozen of utility functions:\n\n```js\nfunction isRed(color) {\n  return color.red === 255;\n}\nfunction isValidColor(color) {\n  return (\n    color.red >= 0 &&\n    color.red <= 255 &&\n    color.green >= 0 &&\n    color.green <= 255 &&\n    color.blue >= 0 &&\n    color.blue <= 255\n  );\n}\n// …\n```",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 42,
      "totalChunks": 47,
      "startLineNumber": 739,
      "endLineNumber": 760
    }
  },
  {
    "content": "But with classes, we can congregate them all under the `Color` namespace, which improves readability. In addition, the introduction of private fields allows us to hide certain data from downstream users, creating a clean API.\n\nIn general, you should consider using classes when you want to create objects that store their own internal data and expose a lot of behavior. Take built-in JavaScript classes as examples:",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 43,
      "totalChunks": 47,
      "startLineNumber": 762,
      "endLineNumber": 764
    }
  },
  {
    "content": "- The [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) classes store a collection of elements and allow you to access them by key using `get()`, `set()`, `has()`, etc.\n- The [`Date`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) class stores a date as a Unix timestamp (a number) and allows you to format, update, and read individual date components.",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 44,
      "totalChunks": 47,
      "startLineNumber": 766,
      "endLineNumber": 767
    }
  },
  {
    "content": "- The [`Date`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) class stores a date as a Unix timestamp (a number) and allows you to format, update, and read individual date components.\n- The [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class stores information about a particular exception, including the error message, stack trace, cause, etc. It's one of the few classes that come with a rich inheritance structure: there are multiple built-in classes like [`TypeError`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) and [`ReferenceError`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) that extend `Error`. In the case of errors, this inheritance allows refining the semantics of errors: each error class represents a specific type of error, which can be easily checked with [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof).",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 45,
      "totalChunks": 47,
      "startLineNumber": 767,
      "endLineNumber": 768
    }
  },
  {
    "content": "JavaScript offers the mechanism to organize your code in a canonical object-oriented way, but whether and how to use it is entirely up to the programmer's discretion.\n\n{{PreviousNext(\"Web/JavaScript/Guide/Working_with_objects\", \"Web/JavaScript/Guide/Using_promises\")}}",
    "metadata": {
      "source": "using_classes/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_classes",
      "documentTitle": "Using classes",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Why classes?",
      "chunkIndex": 46,
      "totalChunks": 47,
      "startLineNumber": 770,
      "endLineNumber": 772
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Using_classes\", \"Web/JavaScript/Guide/Typed_arrays\")}}\n\nA {{jsxref(\"Promise\")}} is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.\n\nEssentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function. Imagine a function, `createAudioFileAsync()`, which asynchronously generates a sound file given a configuration record and two callback functions: one called if the audio file is successfully created, and the other called if an error occurs.\n\nHere's some code that uses `createAudioFileAsync()`:\n\n```js\nfunction successCallback(result) {\n  console.log(`Audio file ready at URL: ${result}`);\n}\n\nfunction failureCallback(error) {\n  console.error(`Error generating audio file: ${error}`);\n}",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 35,
      "startLineNumber": 8,
      "endLineNumber": 23
    }
  },
  {
    "content": "```js\nfunction successCallback(result) {\n  console.log(`Audio file ready at URL: ${result}`);\n}\n\nfunction failureCallback(error) {\n  console.error(`Error generating audio file: ${error}`);\n}\n\ncreateAudioFileAsync(audioSettings, successCallback, failureCallback);\n```\n\nIf `createAudioFileAsync()` were rewritten to return a promise, you would attach your callbacks to it instead:\n\n```js\ncreateAudioFileAsync(audioSettings).then(successCallback, failureCallback);\n```\n\nThis convention has several advantages. We will explore each one.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 35,
      "startLineNumber": 16,
      "endLineNumber": 34
    }
  },
  {
    "content": "## Chaining\n\nA common need is to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step. In the old days, doing several asynchronous operations in a row would lead to the classic [callback hell](https://medium.com/@raihan_tazdid/callback-hell-in-javascript-all-you-need-to-know-296f7f5d3c1):\n\n```js-nolint\ndoSomething(function (result) {\n  doSomethingElse(result, function (newResult) {\n    doThirdThing(newResult, function (finalResult) {\n      console.log(`Got the final result: ${finalResult}`);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n```\n\nWith promises, we accomplish this by creating a promise chain. The API design of promises makes this great, because callbacks are attached to the returned promise object, instead of being passed into a function.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 2,
      "totalChunks": 35,
      "startLineNumber": 36,
      "endLineNumber": 50
    }
  },
  {
    "content": "Here's the magic: the `then()` function returns a **new promise**, different from the original:\n\n```js\nconst promise = doSomething();\nconst promise2 = promise.then(successCallback, failureCallback);\n```\n\nThis second promise (`promise2`) represents the completion not just of `doSomething()`, but also of the `successCallback` or `failureCallback` you passed in — which can be other asynchronous functions returning a promise. When that's the case, any callbacks added to `promise2` get queued behind the promise returned by either `successCallback` or `failureCallback`.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 3,
      "totalChunks": 35,
      "startLineNumber": 52,
      "endLineNumber": 59
    }
  },
  {
    "content": "> [!NOTE]\n> If you want a working example to play with, you can use the following template to create any function returning a promise:\n>\n> ```js\n> function doSomething() {\n>   return new Promise((resolve) => {\n>     setTimeout(() => {\n>       // Other things to do before completion of the promise\n>       console.log(\"Did something\");\n>       // The fulfillment value of the promise\n>       resolve(\"https://example.com/\");\n>     }, 200);\n>   });\n> }\n> ```\n>\n> The implementation is discussed in the [Creating a Promise around an old callback API](#creating_a_promise_around_an_old_callback_api) section below.\n\nWith this pattern, you can create longer chains of processing, where each promise represents the completion of one asynchronous step in the chain. In addition, the arguments to `then` are optional, and `catch(failureCallback)` is short for `then(null, failureCallback)` — so if your error handling code is the same for all steps, you can attach it to the end of the chain:",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 4,
      "totalChunks": 35,
      "startLineNumber": 61,
      "endLineNumber": 79
    }
  },
  {
    "content": "```js\ndoSomething()\n  .then(function (result) {\n    return doSomethingElse(result);\n  })\n  .then(function (newResult) {\n    return doThirdThing(newResult);\n  })\n  .then(function (finalResult) {\n    console.log(`Got the final result: ${finalResult}`);\n  })\n  .catch(failureCallback);\n```\n\nYou might see this expressed with [arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) instead:\n\n```js\ndoSomething()\n  .then((result) => doSomethingElse(result))\n  .then((newResult) => doThirdThing(newResult))\n  .then((finalResult) => {\n    console.log(`Got the final result: ${finalResult}`);\n  })\n  .catch(failureCallback);\n```\n\n> [!NOTE]\n> Arrow function expressions can have an [implicit return](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body); so, `() => x` is short for `() => { return x; }`.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 5,
      "totalChunks": 35,
      "startLineNumber": 81,
      "endLineNumber": 108
    }
  },
  {
    "content": "> [!NOTE]\n> Arrow function expressions can have an [implicit return](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body); so, `() => x` is short for `() => { return x; }`.\n\n`doSomethingElse` and `doThirdThing` can return any value — if they return promises, that promise is first waited until it settles, and the next callback receives the fulfillment value, not the promise itself. It is important to always return promises from `then` callbacks, even if the promise always resolves to `undefined`. If the previous handler started a promise but did not return it, there's no way to track its settlement anymore, and the promise is said to be \"floating\".",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 6,
      "totalChunks": 35,
      "startLineNumber": 107,
      "endLineNumber": 110
    }
  },
  {
    "content": "```js example-bad\ndoSomething()\n  .then((url) => {\n    // Missing `return` keyword in front of fetch(url).\n    fetch(url);\n  })\n  .then((result) => {\n    // result is undefined, because nothing is returned from the previous\n    // handler. There's no way to know the return value of the fetch()\n    // call anymore, or whether it succeeded at all.\n  });\n```\n\nBy returning the result of the `fetch` call (which is a promise), we can both track its completion and receive its value when it completes.\n\n```js example-good\ndoSomething()\n  .then((url) => {\n    // `return` keyword added\n    return fetch(url);\n  })\n  .then((result) => {\n    // result is a Response object\n  });\n```\n\nFloating promises could be worse if you have race conditions — if the promise from the last handler is not returned, the next `then` handler will be called early, and any value it reads may be incomplete.\n\n```js example-bad\nconst listOfIngredients = [];",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 7,
      "totalChunks": 35,
      "startLineNumber": 112,
      "endLineNumber": 141
    }
  },
  {
    "content": "```js example-bad\nconst listOfIngredients = [];\n\ndoSomething()\n  .then((url) => {\n    // Missing `return` keyword in front of fetch(url).\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        listOfIngredients.push(data);\n      });\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n    // listOfIngredients will always be [], because the fetch request hasn't completed yet.\n  });\n```\n\nTherefore, as a rule of thumb, whenever your operation encounters a promise, return it and defer its handling to the next `then` handler.\n\n```js example-good\nconst listOfIngredients = [];\n\ndoSomething()\n  .then((url) => {\n    // `return` keyword now included in front of fetch call.\n    return fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        listOfIngredients.push(data);\n      });\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n    // listOfIngredients will now contain data from fetch call.\n  });\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 8,
      "totalChunks": 35,
      "startLineNumber": 140,
      "endLineNumber": 176
    }
  },
  {
    "content": "Even better, you can flatten the nested chain into a single chain, which is simpler and makes error handling easier. The details are discussed in the [Nesting](#nesting) section below.\n\n```js\ndoSomething()\n  .then((url) => fetch(url))\n  .then((res) => res.json())\n  .then((data) => {\n    listOfIngredients.push(data);\n  })\n  .then(() => {\n    console.log(listOfIngredients);\n  });\n```\n\nUsing [`async`/`await`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function) can help you write code that's more intuitive and resembles synchronous code. Below is the same example using `async`/`await`:\n\n```js\nasync function logIngredients() {\n  const url = await doSomething();\n  const res = await fetch(url);\n  const data = await res.json();\n  listOfIngredients.push(data);\n  console.log(listOfIngredients);\n}\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 9,
      "totalChunks": 35,
      "startLineNumber": 178,
      "endLineNumber": 202
    }
  },
  {
    "content": "Note how the code looks exactly like synchronous code, except for the `await` keywords in front of promises. One of the only tradeoffs is that it may be easy to forget the [`await`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function) keyword, which can only be fixed when there's a type mismatch (e.g., trying to use a promise as a value).\n\n`async`/`await` builds on promises — for example, `doSomething()` is the same function as before, so there's minimal refactoring needed to change from promises to `async`/`await`. You can read more about the `async`/`await` syntax in the [async functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [`await`](/en-US/docs/Web/JavaScript/Reference/Operators/await) references.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 10,
      "totalChunks": 35,
      "startLineNumber": 204,
      "endLineNumber": 206
    }
  },
  {
    "content": "> [!NOTE]\n> `async`/`await` has the same concurrency semantics as normal promise chains. `await` within one async function does not stop the entire program, only the parts that depend on its value, so other async jobs can still run while the `await` is pending.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining",
      "chunkIndex": 11,
      "totalChunks": 35,
      "startLineNumber": 208,
      "endLineNumber": 209
    }
  },
  {
    "content": "## Error handling\n\nYou might recall seeing `failureCallback` three times in the pyramid of doom earlier, compared to only once at the end of the promise chain:\n\n```js\ndoSomething()\n  .then((result) => doSomethingElse(result))\n  .then((newResult) => doThirdThing(newResult))\n  .then((finalResult) => console.log(`Got the final result: ${finalResult}`))\n  .catch(failureCallback);\n```\n\nIf there's an exception, the browser will look down the chain for `.catch()` handlers or `onRejected`. This is very much modeled after how synchronous code works:\n\n```js\ntry {\n  const result = syncDoSomething();\n  const newResult = syncDoSomethingElse(result);\n  const finalResult = syncDoThirdThing(newResult);\n  console.log(`Got the final result: ${finalResult}`);\n} catch (error) {\n  failureCallback(error);\n}\n```\n\nThis symmetry with asynchronous code culminates in the `async`/`await` syntax:",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 12,
      "totalChunks": 35,
      "startLineNumber": 211,
      "endLineNumber": 236
    }
  },
  {
    "content": "This symmetry with asynchronous code culminates in the `async`/`await` syntax:\n\n```js\nasync function foo() {\n  try {\n    const result = await doSomething();\n    const newResult = await doSomethingElse(result);\n    const finalResult = await doThirdThing(newResult);\n    console.log(`Got the final result: ${finalResult}`);\n  } catch (error) {\n    failureCallback(error);\n  }\n}\n```\n\nPromises solve a fundamental flaw with the callback pyramid of doom, by catching all errors, even thrown exceptions and programming errors. This is essential for functional composition of asynchronous operations. All errors are now handled by the [`catch()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) method at the end of the chain, and you should almost never need to use `try`/`catch` without using `async`/`await`.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Error handling",
      "chunkIndex": 13,
      "totalChunks": 35,
      "startLineNumber": 236,
      "endLineNumber": 251
    }
  },
  {
    "content": "### Nesting\n\nIn the examples above involving `listOfIngredients`, the first one has one promise chain nested in the return value of another `then()` handler, while the second one uses an entirely flat chain. Simple promise chains are best kept flat without nesting, as nesting can be a result of careless composition.\n\nNesting is a control structure to limit the scope of `catch` statements. Specifically, a nested `catch` only catches failures in its scope and below, not errors higher up in the chain outside the nested scope. When used correctly, this gives greater precision in error recovery:\n\n```js\ndoSomethingCritical()\n  .then((result) =>\n    doSomethingOptional(result)\n      .then((optionalResult) => doSomethingExtraNice(optionalResult))\n      .catch((e) => {}),\n  ) // Ignore if optional stuff fails; proceed.\n  .then(() => moreCriticalStuff())\n  .catch((e) => console.error(`Critical failure: ${e.message}`));\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Nesting",
      "chunkIndex": 14,
      "totalChunks": 35,
      "startLineNumber": 253,
      "endLineNumber": 268
    }
  },
  {
    "content": "Note that the optional steps here are nested — with the nesting caused not by the indentation, but by the placement of the outer `(` and `)` parentheses around the steps.\n\nThe inner error-silencing `catch` handler only catches failures from `doSomethingOptional()` and `doSomethingExtraNice()`, after which the code resumes with `moreCriticalStuff()`. Importantly, if `doSomethingCritical()` fails, its error is caught by the final (outer) `catch` only, and does not get swallowed by the inner `catch` handler.\n\nIn `async`/`await`, this code looks like:\n\n```js\nasync function main() {\n  try {\n    const result = await doSomethingCritical();\n    try {\n      const optionalResult = await doSomethingOptional(result);\n      await doSomethingExtraNice(optionalResult);\n    } catch (e) {\n      // Ignore failures in optional steps and proceed.\n    }\n    await moreCriticalStuff();\n  } catch (e) {\n    console.error(`Critical failure: ${e.message}`);\n  }\n}\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Nesting",
      "chunkIndex": 15,
      "totalChunks": 35,
      "startLineNumber": 270,
      "endLineNumber": 291
    }
  },
  {
    "content": "> [!NOTE]\n> If you don't have sophisticated error handling, you very likely don't need nested `then` handlers. Instead, use a flat chain and put the error handling logic at the end.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Nesting",
      "chunkIndex": 16,
      "totalChunks": 35,
      "startLineNumber": 293,
      "endLineNumber": 294
    }
  },
  {
    "content": "### Chaining after a catch\n\nIt's possible to chain _after_ a failure, i.e., a `catch`, which is useful to accomplish new actions even after an action failed in the chain. Read the following example:\n\n```js\ndoSomething()\n  .then(() => {\n    throw new Error(\"Something failed\");\n\n    console.log(\"Do this\");\n  })\n  .catch(() => {\n    console.error(\"Do that\");\n  })\n  .then(() => {\n    console.log(\"Do this, no matter what happened before\");\n  });\n```\n\nThis will output the following text:\n\n```plain\nDo that\nDo this, no matter what happened before\n```\n\n> [!NOTE]\n> The text \"Do this\" is not displayed because the \"Something failed\" error caused a rejection.\n\nIn `async`/`await`, this code looks like:\n\n```js\nasync function main() {\n  try {\n    await doSomething();\n    throw new Error(\"Something failed\");\n    console.log(\"Do this\");\n  } catch (e) {\n    console.error(\"Do that\");\n  }\n  console.log(\"Do this, no matter what happened before\");\n}\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Chaining after a catch",
      "chunkIndex": 17,
      "totalChunks": 35,
      "startLineNumber": 296,
      "endLineNumber": 338
    }
  },
  {
    "content": "### Promise rejection events\n\nIf a promise rejection event is not handled by any handler, it bubbles to the top of the call stack, and the host needs to surface it. On the web, whenever a promise is rejected, one of two events is sent to the global scope (generally, this is either the [`window`](/en-US/docs/Web/API/Window) or, if being used in a web worker, it's the [`Worker`](/en-US/docs/Web/API/Worker) or other worker-based interface). The two events are:\n\n- [`unhandledrejection`](/en-US/docs/Web/API/Window/unhandledrejection_event)\n  - : Sent when a promise is rejected but there is no rejection handler available.\n- [`rejectionhandled`](/en-US/docs/Web/API/Window/rejectionhandled_event)\n  - : Sent when a handler is attached to a rejected promise that has already caused an `unhandledrejection` event.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Promise rejection events",
      "chunkIndex": 18,
      "totalChunks": 35,
      "startLineNumber": 340,
      "endLineNumber": 347
    }
  },
  {
    "content": "In both cases, the event (of type [`PromiseRejectionEvent`](/en-US/docs/Web/API/PromiseRejectionEvent)) has as members a [`promise`](/en-US/docs/Web/API/PromiseRejectionEvent/promise) property indicating the promise that was rejected, and a [`reason`](/en-US/docs/Web/API/PromiseRejectionEvent/reason) property that provides the reason given for the promise to be rejected.\n\nThese make it possible to offer fallback error handling for promises, as well as to help debug issues with your promise management. These handlers are global per context, so all errors will go to the same event handlers, regardless of source.\n\nIn [Node.js](/en-US/docs/Glossary/Node.js), handling promise rejection is slightly different. You capture unhandled rejections by adding a handler for the Node.js `unhandledRejection` event (notice the difference in capitalization of the name), like this:",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Promise rejection events",
      "chunkIndex": 19,
      "totalChunks": 35,
      "startLineNumber": 349,
      "endLineNumber": 353
    }
  },
  {
    "content": "```js\nprocess.on(\"unhandledRejection\", (reason, promise) => {\n  // Add code here to examine the \"promise\" and \"reason\" values\n});\n```\n\nFor Node.js, to prevent the error from being logged to the console (the default action that would otherwise occur), adding that `process.on()` listener is all that's necessary; there's no need for an equivalent of the browser runtime's [`preventDefault()`](/en-US/docs/Web/API/Event/preventDefault) method.\n\nHowever, if you add that `process.on` listener but don't also have code within it to handle rejected promises, they will just be dropped on the floor and silently ignored. So ideally, you should add code within that listener to examine each rejected promise and make sure it was not caused by an actual code bug.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Promise rejection events",
      "chunkIndex": 20,
      "totalChunks": 35,
      "startLineNumber": 355,
      "endLineNumber": 363
    }
  },
  {
    "content": "## Composition\n\nThere are four [composition tools](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) for running asynchronous operations concurrently: {{jsxref(\"Promise.all()\")}}, {{jsxref(\"Promise.allSettled()\")}}, {{jsxref(\"Promise.any()\")}}, and {{jsxref(\"Promise.race()\")}}.\n\nWe can start operations at the same time and wait for them all to finish like this:\n\n```js\nPromise.all([func1(), func2(), func3()]).then(([result1, result2, result3]) => {\n  // use result1, result2 and result3\n});\n```\n\nIf one of the promises in the array rejects, `Promise.all()` immediately rejects the returned promise. The other operations continue to run, but their outcomes are not available via the return value of `Promise.all()`. This may cause unexpected state or behavior. {{jsxref(\"Promise.allSettled()\")}} is another composition tool that ensures all operations are complete before resolving.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Composition",
      "chunkIndex": 21,
      "totalChunks": 35,
      "startLineNumber": 365,
      "endLineNumber": 377
    }
  },
  {
    "content": "These methods all run promises concurrently — a sequence of promises are started simultaneously and do not wait for each other. Sequential composition is possible using some clever JavaScript:\n\n```js\n[func1, func2, func3]\n  .reduce((p, f) => p.then(f), Promise.resolve())\n  .then((result3) => {\n    /* use result3 */\n  });\n```\n\nIn this example, we [reduce](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) an array of asynchronous functions down to a promise chain. The code above is equivalent to:\n\n```js\nPromise.resolve()\n  .then(func1)\n  .then(func2)\n  .then(func3)\n  .then((result3) => {\n    /* use result3 */\n  });\n```\n\nThis can be made into a reusable compose function, which is common in functional programming:\n\n```js\nconst applyAsync = (acc, val) => acc.then(val);\nconst composeAsync =\n  (...funcs) =>\n  (x) =>\n    funcs.reduce(applyAsync, Promise.resolve(x));\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Composition",
      "chunkIndex": 22,
      "totalChunks": 35,
      "startLineNumber": 379,
      "endLineNumber": 409
    }
  },
  {
    "content": "```js\nconst applyAsync = (acc, val) => acc.then(val);\nconst composeAsync =\n  (...funcs) =>\n  (x) =>\n    funcs.reduce(applyAsync, Promise.resolve(x));\n```\n\nThe `composeAsync()` function accepts any number of functions as arguments and returns a new function that accepts an initial value to be passed through the composition pipeline:\n\n```js\nconst transformData = composeAsync(func1, func2, func3);\nconst result3 = transformData(data);\n```\n\nSequential composition can also be done more succinctly with async/await:\n\n```js\nlet result;\nfor (const f of [func1, func2, func3]) {\n  result = await f(result);\n}\n/* use last result (i.e. result3) */\n```\n\nHowever, before you compose promises sequentially, consider if it's really necessary — it's always better to run promises concurrently so that they don't unnecessarily block each other unless one promise's execution depends on another's result.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Composition",
      "chunkIndex": 23,
      "totalChunks": 35,
      "startLineNumber": 403,
      "endLineNumber": 428
    }
  },
  {
    "content": "## Cancellation\n\n`Promise` itself has no first-class protocol for cancellation, but you may be able to directly cancel the underlying asynchronous operation, typically using [`AbortController`](/en-US/docs/Web/API/AbortController).",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Cancellation",
      "chunkIndex": 24,
      "totalChunks": 35,
      "startLineNumber": 430,
      "endLineNumber": 432
    }
  },
  {
    "content": "## Creating a Promise around an old callback API\n\nA {{jsxref(\"Promise\")}} can be created from scratch using its [constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise). This should be needed only to wrap old APIs.\n\nIn an ideal world, all asynchronous functions would already return promises. Unfortunately, some APIs still expect success and/or failure callbacks to be passed in the old way. The most obvious example is the {{domxref(\"Window.setTimeout\", \"setTimeout()\")}} function:\n\n```js\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10 * 1000);\n```\n\nMixing old-style callbacks and promises is problematic. If `saySomething()` fails or contains a programming error, nothing catches it. This is intrinsic to the design of `setTimeout()`.\n\nLuckily we can wrap `setTimeout()` in a promise. The best practice is to wrap the callback-accepting functions at the lowest possible level, and then never call them directly again:",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating a Promise around an old callback API",
      "chunkIndex": 25,
      "totalChunks": 35,
      "startLineNumber": 434,
      "endLineNumber": 446
    }
  },
  {
    "content": "Luckily we can wrap `setTimeout()` in a promise. The best practice is to wrap the callback-accepting functions at the lowest possible level, and then never call them directly again:\n\n```js\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nwait(10 * 1000)\n  .then(() => saySomething(\"10 seconds\"))\n  .catch(failureCallback);\n```\n\nThe promise constructor takes an executor function that lets us resolve or reject a promise manually. Since `setTimeout()` doesn't really fail, we left out reject in this case. For more information on how the executor function works, see the [`Promise()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) reference.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating a Promise around an old callback API",
      "chunkIndex": 26,
      "totalChunks": 35,
      "startLineNumber": 446,
      "endLineNumber": 456
    }
  },
  {
    "content": "## Timing\n\nLastly, we will look into the more technical details, about when the registered callbacks get called.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Timing",
      "chunkIndex": 27,
      "totalChunks": 35,
      "startLineNumber": 458,
      "endLineNumber": 460
    }
  },
  {
    "content": "### Guarantees\n\nIn the callback-based API, when and how the callback gets called depends on the API implementor. For example, the callback may be called synchronously or asynchronously:\n\n```js example-bad\nfunction doSomething(callback) {\n  if (Math.random() > 0.5) {\n    callback();\n  } else {\n    setTimeout(() => callback(), 1000);\n  }\n}\n```\n\nThe above design is strongly discouraged because it leads to the so-called \"state of Zalgo\". In the context of designing asynchronous APIs, this means a callback is called synchronously in some cases but asynchronously in other cases, creating ambiguity for the caller. For further background, see the article [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony/), where the term was first formally presented. This API design makes side effects hard to analyze:\n\n```js\nlet value = 1;\ndoSomething(() => {\n  value = 2;\n});\nconsole.log(value); // 1 or 2?\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Guarantees",
      "chunkIndex": 28,
      "totalChunks": 35,
      "startLineNumber": 462,
      "endLineNumber": 484
    }
  },
  {
    "content": "```js\nlet value = 1;\ndoSomething(() => {\n  value = 2;\n});\nconsole.log(value); // 1 or 2?\n```\n\nOn the other hand, promises are a form of [inversion of control](https://en.wikipedia.org/wiki/Inversion_of_control) — the API implementor does not control when the callback gets called. Instead, the job of maintaining the callback queue and deciding when to call the callbacks is delegated to the promise implementation, and both the API user and API developer automatically gets strong semantic guarantees, including:",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Guarantees",
      "chunkIndex": 29,
      "totalChunks": 35,
      "startLineNumber": 478,
      "endLineNumber": 486
    }
  },
  {
    "content": "- Callbacks added with [`then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) will never be invoked before the [completion of the current run](/en-US/docs/Web/JavaScript/Reference/Execution_model#run-to-completion) of the JavaScript event loop.\n- These callbacks will be invoked even if they were added _after_ the success or failure of the asynchronous operation that the promise represents.\n- Multiple callbacks may be added by calling [`then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) several times. They will be invoked one after another, in the order in which they were inserted.\n\nTo avoid surprises, functions passed to [`then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) will never be called synchronously, even with an already-resolved promise:\n\n```js\nPromise.resolve().then(() => console.log(2));\nconsole.log(1);\n// Logs: 1, 2\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Guarantees",
      "chunkIndex": 30,
      "totalChunks": 35,
      "startLineNumber": 488,
      "endLineNumber": 498
    }
  },
  {
    "content": "```js\nPromise.resolve().then(() => console.log(2));\nconsole.log(1);\n// Logs: 1, 2\n```\n\nInstead of running immediately, the passed-in function is put on a microtask queue, which means it runs later (only after the function which created it exits, and when the JavaScript execution stack is empty), just before control is returned to the event loop; i.e., pretty soon:\n\n```js\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nwait(0).then(() => console.log(4));\nPromise.resolve()\n  .then(() => console.log(2))\n  .then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Guarantees",
      "chunkIndex": 31,
      "totalChunks": 35,
      "startLineNumber": 494,
      "endLineNumber": 510
    }
  },
  {
    "content": "### Task queues vs. microtasks\n\nPromise callbacks are handled as a [microtask](/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) whereas {{domxref(\"Window.setTimeout\", \"setTimeout()\")}} callbacks are handled as task queues.\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  console.log(\"Promise callback\");\n  resolve();\n}).then((result) => {\n  console.log(\"Promise callback (.then)\");\n});\n\nsetTimeout(() => {\n  console.log(\"event-loop cycle: Promise (fulfilled)\", promise);\n}, 0);\n\nconsole.log(\"Promise (pending)\", promise);\n```\n\nThe code above will output:\n\n```plain\nPromise callback\nPromise (pending) Promise {<pending>}\nPromise callback (.then)\nevent-loop cycle: Promise (fulfilled) Promise {<fulfilled>}\n```\n\nFor more details, refer to [Tasks vs. microtasks](/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth#tasks_vs._microtasks).",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Task queues vs. microtasks",
      "chunkIndex": 32,
      "totalChunks": 35,
      "startLineNumber": 512,
      "endLineNumber": 540
    }
  },
  {
    "content": "### When promises and tasks collide\n\nIf you run into situations in which you have promises and tasks (such as events or callbacks) which are firing in unpredictable orders, it's possible you may benefit from using a microtask to check status or balance out your promises when promises are created conditionally.\n\nIf you think microtasks may help solve this problem, see the [microtask guide](/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) to learn more about how to use {{domxref(\"Window.queueMicrotask()\", \"queueMicrotask()\")}} to enqueue a function as a microtask.",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "When promises and tasks collide",
      "chunkIndex": 33,
      "totalChunks": 35,
      "startLineNumber": 542,
      "endLineNumber": 546
    }
  },
  {
    "content": "## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Statements/async_function\", \"async function\")}}\n- {{jsxref(\"Operators/await\", \"await\")}}\n- [Promises/A+ specification](https://promisesaplus.com/)\n- [We have a problem with promises](https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html) on pouchdb.com (2015)\n\n{{PreviousNext(\"Web/JavaScript/Guide/Using_classes\", \"Web/JavaScript/Guide/Typed_arrays\")}}",
    "metadata": {
      "source": "using_promises/index.md",
      "documentSlug": "Web/JavaScript/Guide/Using_promises",
      "documentTitle": "Using promises",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 34,
      "totalChunks": 35,
      "startLineNumber": 548,
      "endLineNumber": 556
    }
  },
  {
    "content": "{{PreviousNext(\"Web/JavaScript/Guide/Keyed_collections\", \"Web/JavaScript/Guide/Using_classes\")}}\n\nJavaScript is designed on an object-based paradigm. An object is a collection of [properties](/en-US/docs/Glossary/Property/JavaScript), and a property is an association between a name (or _key_) and a value. A property's value can be a function, in which case the property is known as a [method](/en-US/docs/Glossary/Method).\n\nObjects in JavaScript, just as in many other programming languages, can be compared to objects in real life. In JavaScript, an object is a standalone entity, with properties and type. Compare it with a cup, for example. A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same way, JavaScript objects can have properties, which define their characteristics.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 0,
      "totalChunks": 31,
      "startLineNumber": 8,
      "endLineNumber": 12
    }
  },
  {
    "content": "In addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, and methods, and how to create your own objects.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": null,
      "chunkIndex": 1,
      "totalChunks": 31,
      "startLineNumber": 14,
      "endLineNumber": 14
    }
  },
  {
    "content": "## Creating new objects\n\nYou can create an object using an [object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer). Alternatively, you can first create a constructor function and then instantiate an object by invoking that function with the `new` operator.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Creating new objects",
      "chunkIndex": 2,
      "totalChunks": 31,
      "startLineNumber": 16,
      "endLineNumber": 18
    }
  },
  {
    "content": "### Using object initializers\n\nObject initializers are also called _object literals_. \"Object initializer\" is consistent with the terminology used by C++.\n\nThe syntax for an object using an object initializer is:\n\n```js\nconst obj = {\n  property1: value1, // property name may be an identifier\n  2: value2, // or a number\n  \"property n\": value3, // or a string\n};\n```\n\nEach property name before colons is an identifier (either a name, a number, or a string literal), and each `valueN` is an expression whose value is assigned to the property name. The property name can also be an expression; computed keys need to be wrapped in square brackets. The [object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) reference contains a more detailed explanation of the syntax.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using object initializers",
      "chunkIndex": 3,
      "totalChunks": 31,
      "startLineNumber": 20,
      "endLineNumber": 34
    }
  },
  {
    "content": "In this example, the newly created object is assigned to a variable `obj` — this is optional. If you do not need to refer to this object elsewhere, you do not need to assign it to a variable. (Note that you may need to wrap the object literal in parentheses if the object appears where a statement is expected, so as not to have the literal be confused with a block statement.)\n\nObject initializers are expressions, and each object initializer results in a new object being created whenever the statement in which it appears is executed. Identical object initializers create distinct objects that do not compare to each other as equal.\n\nThe following statement creates an object and assigns it to the variable `x` if and only if the expression `cond` is true:\n\n```js\nlet x;\nif (cond) {\n  x = { greeting: \"hi there\" };\n}\n```\n\nThe following example creates `myHonda` with three properties. Note that the `engine` property is also an object with its own properties.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using object initializers",
      "chunkIndex": 4,
      "totalChunks": 31,
      "startLineNumber": 36,
      "endLineNumber": 49
    }
  },
  {
    "content": "The following example creates `myHonda` with three properties. Note that the `engine` property is also an object with its own properties.\n\n```js\nconst myHonda = {\n  color: \"red\",\n  wheels: 4,\n  engine: { cylinders: 4, size: 2.2 },\n};\n```\n\nObjects created with initializers are called _plain objects_, because they are instances of {{jsxref(\"Object\")}}, but not any other object type. Some object types have special initializer syntaxes — for example, [array initializers](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals) and [regex literals](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#creating_a_regular_expression).",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using object initializers",
      "chunkIndex": 5,
      "totalChunks": 31,
      "startLineNumber": 49,
      "endLineNumber": 59
    }
  },
  {
    "content": "### Using a constructor function\n\nAlternatively, you can create an object with these two steps:\n\n1. Define the object type by writing a constructor function. There is a strong convention, with good reason, to use a capital initial letter.\n2. Create an instance of the object with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new).\n\nTo define an object type, create a function for the object type that specifies its name, properties, and methods. For example, suppose you want to create an object type for cars. You want this type of object to be called `Car`, and you want it to have properties for make, model, and year. To do this, you would write the following function:\n\n```js\nfunction Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n```\n\nNotice the use of `this` to assign values to the object's properties based on the values passed to the function.\n\nNow you can create an object called `myCar` as follows:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using a constructor function",
      "chunkIndex": 6,
      "totalChunks": 31,
      "startLineNumber": 61,
      "endLineNumber": 80
    }
  },
  {
    "content": "Notice the use of `this` to assign values to the object's properties based on the values passed to the function.\n\nNow you can create an object called `myCar` as follows:\n\n```js\nconst myCar = new Car(\"Eagle\", \"Talon TSi\", 1993);\n```\n\nThis statement creates `myCar` and assigns it the specified values for its properties. Then the value of `myCar.make` is the string `\"Eagle\"`, `myCar.model` is the string `\"Talon TSi\"`, `myCar.year` is the integer `1993`, and so on. The order of arguments and parameters should be the same.\n\nYou can create any number of `Car` objects by calls to `new`. For example,\n\n```js\nconst randCar = new Car(\"Nissan\", \"300ZX\", 1992);\nconst kenCar = new Car(\"Mazda\", \"Miata\", 1990);\n```\n\nAn object can have a property that is itself another object. For example, suppose you define an object called `Person` as follows:\n\n```js\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using a constructor function",
      "chunkIndex": 7,
      "totalChunks": 31,
      "startLineNumber": 78,
      "endLineNumber": 103
    }
  },
  {
    "content": "```js\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\n```\n\nand then instantiate two new `Person` objects as follows:\n\n```js\nconst rand = new Person(\"Rand McKinnon\", 33, \"M\");\nconst ken = new Person(\"Ken Jones\", 39, \"M\");\n```\n\nThen, you can rewrite the definition of `Car` to include an `owner` property that takes a `Person` object, as follows:\n\n```js\nfunction Car(make, model, year, owner) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n  this.owner = owner;\n}\n```\n\nTo instantiate the new objects, you then use the following:\n\n```js\nconst car1 = new Car(\"Eagle\", \"Talon TSi\", 1993, rand);\nconst car2 = new Car(\"Nissan\", \"300ZX\", 1992, ken);\n```\n\nNotice that instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects `rand` and `ken` as the arguments for the owners. Then if you want to find out the name of the owner of `car2`, you can access the following property:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using a constructor function",
      "chunkIndex": 8,
      "totalChunks": 31,
      "startLineNumber": 97,
      "endLineNumber": 130
    }
  },
  {
    "content": "```js\ncar2.owner.name;\n```\n\nYou can always add a property to a previously defined object. For example, the statement\n\n```js\ncar1.color = \"black\";\n```\n\nadds a property `color` to `car1`, and assigns it a value of `\"black\"`. However, this does not affect any other objects. To add the new property to all objects of the same type, you have to add the property to the definition of the `Car` object type.\n\nYou can also use the [`class`](/en-US/docs/Web/JavaScript/Reference/Classes) syntax instead of the `function` syntax to define a constructor function. For more information, see the [class guide](/en-US/docs/Web/JavaScript/Guide/Using_classes).",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using a constructor function",
      "chunkIndex": 9,
      "totalChunks": 31,
      "startLineNumber": 132,
      "endLineNumber": 144
    }
  },
  {
    "content": "### Using the Object.create() method\n\nObjects can also be created using the {{jsxref(\"Object.create()\")}} method. This method can be very useful, because it allows you to choose the [prototype](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) object for the object you want to create, without having to define a constructor function.\n\n```js\n// Animal properties and method encapsulation\nconst Animal = {\n  type: \"Invertebrates\", // Default value of properties\n  displayType() {\n    // Method which will display type of Animal\n    console.log(this.type);\n  },\n};\n\n// Create new animal type called `animal`\nconst animal = Object.create(Animal);\nanimal.displayType(); // Logs: Invertebrates\n\n// Create new animal type called fish\nconst fish = Object.create(Animal);\nfish.type = \"Fishes\";\nfish.displayType(); // Logs: Fishes\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using the Object.create() method",
      "chunkIndex": 10,
      "totalChunks": 31,
      "startLineNumber": 146,
      "endLineNumber": 168
    }
  },
  {
    "content": "## Objects and properties\n\nA JavaScript object has properties associated with it. Object properties are basically the same as variables, except that they are associated with objects, not [scopes](/en-US/docs/Glossary/Scope). The properties of an object define the characteristics of the object.\n\nFor example, this example creates an object named `myCar`, with properties named `make`, `model`, and `year`, with their values set to `\"Ford\"`, `\"Mustang\"`, and `1969`:\n\n```js\nconst myCar = {\n  make: \"Ford\",\n  model: \"Mustang\",\n  year: 1969,\n};\n```\n\nLike JavaScript variables, property names are case sensitive. Property names can only be strings or Symbols — all keys are [converted to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) unless they are Symbols. [Array indices](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_indices) are, in fact, properties with string keys that contain integers.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Objects and properties",
      "chunkIndex": 11,
      "totalChunks": 31,
      "startLineNumber": 170,
      "endLineNumber": 184
    }
  },
  {
    "content": "### Accessing properties\n\nYou can access a property of an object by its property name. [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) come in two syntaxes: _dot notation_ and _bracket notation_. For example, you could access the properties of the `myCar` object as follows:\n\n```js\n// Dot notation\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Bracket notation\nmyCar[\"make\"] = \"Ford\";\nmyCar[\"model\"] = \"Mustang\";\nmyCar[\"year\"] = 1969;\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessing properties",
      "chunkIndex": 12,
      "totalChunks": 31,
      "startLineNumber": 186,
      "endLineNumber": 200
    }
  },
  {
    "content": "```js\n// Dot notation\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Bracket notation\nmyCar[\"make\"] = \"Ford\";\nmyCar[\"model\"] = \"Mustang\";\nmyCar[\"year\"] = 1969;\n```\n\nAn object property name can be any JavaScript string or [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), including an empty string. However, you cannot use dot notation to access a property whose name is not a valid JavaScript identifier. For example, a property name that has a space or a hyphen, that starts with a number, or that is held inside a variable can only be accessed using the bracket notation. This notation is also very useful when property names are to be dynamically determined, i.e., not determinable until runtime. Examples are as follows:\n\n```js\nconst myObj = {};\nconst str = \"myString\";\nconst rand = Math.random();\nconst anotherObj = {};",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessing properties",
      "chunkIndex": 13,
      "totalChunks": 31,
      "startLineNumber": 190,
      "endLineNumber": 208
    }
  },
  {
    "content": "```js\nconst myObj = {};\nconst str = \"myString\";\nconst rand = Math.random();\nconst anotherObj = {};\n\n// Create additional properties on myObj\nmyObj.type = \"Dot syntax for a key named type\";\nmyObj[\"date created\"] = \"This key has a space\";\nmyObj[str] = \"This key is in variable str\";\nmyObj[rand] = \"A random number is the key here\";\nmyObj[anotherObj] = \"This key is object anotherObj\";\nmyObj[\"\"] = \"This key is an empty string\";\n\nconsole.log(myObj);\n// {\n//   type: 'Dot syntax for a key named type',\n//   'date created': 'This key has a space',\n//   myString: 'This key is in variable str',\n//   '0.6398914448618778': 'A random number is the key here',\n//   '[object Object]': 'This key is object anotherObj',\n//   '': 'This key is an empty string'\n// }\nconsole.log(myObj.myString); // 'This key is in variable str'\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessing properties",
      "chunkIndex": 14,
      "totalChunks": 31,
      "startLineNumber": 204,
      "endLineNumber": 228
    }
  },
  {
    "content": "In the above code, the key `anotherObj` is an object, which is neither a string nor a symbol. When it is added to the `myObj`, JavaScript calls the {{jsxref(\"Object/toString\", \"toString()\")}} method of `anotherObj`, and use the resulting string as the new key.\n\nYou can also access properties with a string value stored in a variable. The variable must be passed in bracket notation. In the example above, the variable `str` held `\"myString\"` and it is `\"myString\"` that is the property name. Therefore, `myObj.str` will return as undefined.\n\n```js\nstr = \"myString\";\nmyObj[str] = \"This key is in variable str\";\n\nconsole.log(myObj.str); // undefined\n\nconsole.log(myObj[str]); // 'This key is in variable str'\nconsole.log(myObj.myString); // 'This key is in variable str'\n```\n\nThis allows accessing any property as determined at runtime:\n\n```js\nlet propertyName = \"make\";\nmyCar[propertyName] = \"Ford\";",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessing properties",
      "chunkIndex": 15,
      "totalChunks": 31,
      "startLineNumber": 230,
      "endLineNumber": 248
    }
  },
  {
    "content": "This allows accessing any property as determined at runtime:\n\n```js\nlet propertyName = \"make\";\nmyCar[propertyName] = \"Ford\";\n\n// access different properties by changing the contents of the variable\npropertyName = \"model\";\nmyCar[propertyName] = \"Mustang\";\n\nconsole.log(myCar); // { make: 'Ford', model: 'Mustang' }\n```\n\nHowever, beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to [object injection attacks](https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\nNonexistent properties of an object have value {{jsxref(\"undefined\")}} (and not [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n```js\nmyCar.nonexistentProperty; // undefined\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Accessing properties",
      "chunkIndex": 16,
      "totalChunks": 31,
      "startLineNumber": 244,
      "endLineNumber": 263
    }
  },
  {
    "content": "### Enumerating properties\n\nThere are three native ways to list/traverse object properties:\n\n- [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops. This method traverses all of the enumerable string properties of an object as well as its prototype chain.\n- {{jsxref(\"Object.keys()\")}}. This method returns an array with only the enumerable own string property names (\"keys\") in the object `myObj`, but not those in the prototype chain.\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}. This method returns an array containing all the own string property names in the object `myObj`, regardless of if they are enumerable or not.\n\nYou can use the bracket notation with [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) to iterate over all the enumerable properties of an object. To illustrate how this works, the following function displays the properties of the object when you pass the object and the object's name as arguments to the function:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Enumerating properties",
      "chunkIndex": 17,
      "totalChunks": 31,
      "startLineNumber": 265,
      "endLineNumber": 273
    }
  },
  {
    "content": "```js\nfunction showProps(obj, objName) {\n  let result = \"\";\n  for (const i in obj) {\n    // Object.hasOwn() is used to exclude properties from the object's\n    // prototype chain and only show \"own properties\"\n    if (Object.hasOwn(obj, i)) {\n      result += `${objName}.${i} = ${obj[i]}\\n`;\n    }\n  }\n  console.log(result);\n}\n```\n\nThe term \"own property\" refers to the properties of the object, but excluding those of the prototype chain. So, the function call `showProps(myCar, 'myCar')` would print the following:\n\n```plain\nmyCar.make = Ford\nmyCar.model = Mustang\nmyCar.year = 1969\n```\n\nThe above is equivalent to:\n\n```js\nfunction showProps(obj, objName) {\n  let result = \"\";\n  Object.keys(obj).forEach((i) => {\n    result += `${objName}.${i} = ${obj[i]}\\n`;\n  });\n  console.log(result);\n}\n```\n\nThere is no native way to list inherited non-enumerable properties. However, this can be achieved with the following function:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Enumerating properties",
      "chunkIndex": 18,
      "totalChunks": 31,
      "startLineNumber": 275,
      "endLineNumber": 309
    }
  },
  {
    "content": "There is no native way to list inherited non-enumerable properties. However, this can be achieved with the following function:\n\n```js\nfunction listAllProperties(myObj) {\n  let objectToInspect = myObj;\n  let result = [];\n\n  while (objectToInspect !== null) {\n    result = result.concat(Object.getOwnPropertyNames(objectToInspect));\n    objectToInspect = Object.getPrototypeOf(objectToInspect);\n  }\n\n  return result;\n}\n```\n\nFor more information, see [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Guide/Enumerability_and_ownership_of_properties).",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Enumerating properties",
      "chunkIndex": 19,
      "totalChunks": 31,
      "startLineNumber": 309,
      "endLineNumber": 325
    }
  },
  {
    "content": "### Deleting properties\n\nYou can remove a non-inherited property using the [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator. The following code shows how to remove a property.\n\n```js\n// Creates a new object, myObj, with two properties, a and b.\nconst myObj = { a: 5, b: 12 };\n\n// Removes the a property, leaving myObj with only the b property.\ndelete myObj.a;\nconsole.log(\"a\" in myObj); // false\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Deleting properties",
      "chunkIndex": 20,
      "totalChunks": 31,
      "startLineNumber": 327,
      "endLineNumber": 338
    }
  },
  {
    "content": "## Inheritance\n\nAll objects in JavaScript inherit from at least one other object. The object being inherited from is known as the prototype, and the inherited properties can be found in the `prototype` object of the constructor. See [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) for more information.\n\n### Defining properties for all objects of one type\n\nYou can add a property to all objects created through a certain [constructor](#using_a_constructor_function) using the [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property. This defines a property that is shared by all objects of the specified type, rather than by just one instance of the object. The following code adds a `color` property to all objects of type `Car`, and then reads the property's value from an instance `car1`.\n\n```js\nCar.prototype.color = \"red\";\nconsole.log(car1.color); // \"red\"\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Inheritance",
      "chunkIndex": 21,
      "totalChunks": 31,
      "startLineNumber": 340,
      "endLineNumber": 351
    }
  },
  {
    "content": "## Defining methods\n\nA _method_ is a function associated with an object, or, put differently, a method is a property of an object that is a function. Methods are defined the way normal functions are defined, except that they have to be assigned as the property of an object. See also [method definitions](/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions) for more details. An example is:\n\n```js\nobjectName.methodName = functionName;\n\nconst myObj = {\n  myMethod: function (params) {\n    // do something\n  },\n\n  // this works too!\n  myOtherMethod(params) {\n    // do something else\n  },\n};\n```\n\nwhere `objectName` is an existing object, `methodName` is the name you are assigning to the method, and `functionName` is the name of the function.\n\nYou can then call the method in the context of the object as follows:\n\n```js\nobjectName.methodName(params);\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining methods",
      "chunkIndex": 22,
      "totalChunks": 31,
      "startLineNumber": 353,
      "endLineNumber": 378
    }
  },
  {
    "content": "You can then call the method in the context of the object as follows:\n\n```js\nobjectName.methodName(params);\n```\n\nMethods are typically defined on the `prototype` object of the constructor, so that all objects of the same type share the same method. For example, you can define a function that formats and displays the properties of the previously-defined `Car` objects.\n\n```js\nCar.prototype.displayCar = function () {\n  const result = `A Beautiful ${this.year} ${this.make} ${this.model}`;\n  console.log(result);\n};\n```\n\nNotice the use of `this` to refer to the object to which the method belongs. Then you can call the `displayCar` method for each of the objects as follows:\n\n```js\ncar1.displayCar();\ncar2.displayCar();\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining methods",
      "chunkIndex": 23,
      "totalChunks": 31,
      "startLineNumber": 374,
      "endLineNumber": 394
    }
  },
  {
    "content": "### Using this for object references\n\nJavaScript has a special keyword, [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), that you can use within a method to refer to the current object. For example, suppose you have 2 objects, `Manager` and `Intern`. Each object has its own `name`, `age` and `job`. In the function `sayHi()`, notice the use of `this.name`. When added to the 2 objects, the same function will print the message with the name of the respective object it's attached to.\n\n```js\nconst Manager = {\n  name: \"Karina\",\n  age: 27,\n  job: \"Software Engineer\",\n};\nconst Intern = {\n  name: \"Tyrone\",\n  age: 21,\n  job: \"Software Engineer Intern\",\n};\n\nfunction sayHi() {\n  console.log(`Hello, my name is ${this.name}`);\n}\n\n// add sayHi function to both objects\nManager.sayHi = sayHi;\nIntern.sayHi = sayHi;\n\nManager.sayHi(); // Hello, my name is Karina\nIntern.sayHi(); // Hello, my name is Tyrone\n```",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using this for object references",
      "chunkIndex": 24,
      "totalChunks": 31,
      "startLineNumber": 396,
      "endLineNumber": 422
    }
  },
  {
    "content": "// add sayHi function to both objects\nManager.sayHi = sayHi;\nIntern.sayHi = sayHi;\n\nManager.sayHi(); // Hello, my name is Karina\nIntern.sayHi(); // Hello, my name is Tyrone\n```\n\n`this` is a \"hidden parameter\" of a function call that's passed in by specifying the object before the function that was called. For example, in `Manager.sayHi()`, `this` is the `Manager` object, because `Manager` comes before the function `sayHi()`. If you access the same function from another object, `this` will change as well. If you use other methods to call the function, like {{jsxref(\"Function.prototype.call()\")}} or {{jsxref(\"Reflect.apply()\")}}, you can explicitly pass the value of `this` as an argument.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Using this for object references",
      "chunkIndex": 25,
      "totalChunks": 31,
      "startLineNumber": 416,
      "endLineNumber": 424
    }
  },
  {
    "content": "## Defining getters and setters\n\nA [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) is a function associated with a property that gets the value of a specific property. A [setter](/en-US/docs/Web/JavaScript/Reference/Functions/set) is a function associated with a property that sets the value of a specific property. Together, they can indirectly represent the value of a property.\n\nGetters and setters can be either\n\n- defined within [object initializers](#using_object_initializers), or\n- added later to any existing object.\n\nWithin [object initializers](#using_object_initializers), getters and setters are defined like regular [methods](/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions), but prefixed with the keywords `get` or `set`. The getter method must not expect a parameter, while the setter method expects exactly one parameter (the new value to set). For instance:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining getters and setters",
      "chunkIndex": 26,
      "totalChunks": 31,
      "startLineNumber": 426,
      "endLineNumber": 435
    }
  },
  {
    "content": "```js\nconst myObj = {\n  a: 7,\n  get b() {\n    return this.a + 1;\n  },\n  set c(x) {\n    this.a = x / 2;\n  },\n};\n\nconsole.log(myObj.a); // 7\nconsole.log(myObj.b); // 8, returned from the get b() method\nmyObj.c = 50; // Calls the set c(x) method\nconsole.log(myObj.a); // 25\n```\n\nThe `myObj` object's properties are:\n\n- `myObj.a` — a number\n- `myObj.b` — a getter that returns `myObj.a` plus 1\n- `myObj.c` — a setter that sets the value of `myObj.a` to half of the value `myObj.c` is being set to\n\nGetters and setters can also be added to an object at any time after creation using the {{jsxref(\"Object.defineProperties()\")}} method. This method's first parameter is the object on which you want to define the getter or setter. The second parameter is an object whose property names are the getter or setter names, and whose property values are objects for defining the getter or setter functions. Here's an example that defines the same getter and setter used in the previous example:",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining getters and setters",
      "chunkIndex": 27,
      "totalChunks": 31,
      "startLineNumber": 437,
      "endLineNumber": 460
    }
  },
  {
    "content": "```js\nconst myObj = { a: 0 };\n\nObject.defineProperties(myObj, {\n  b: {\n    get() {\n      return this.a + 1;\n    },\n  },\n  c: {\n    set(x) {\n      this.a = x / 2;\n    },\n  },\n});\n\nmyObj.c = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property\nconsole.log(myObj.b); // Runs the getter, which yields a + 1 or 6\n```\n\nWhich of the two forms to choose depends on your programming style and task at hand. If you can change the definition of the original object, you will probably define getters and setters through the original initializer. This form is more compact and natural. However, if you need to add getters and setters later — maybe because you did not write the particular object — then the second form is the only possible form. The second form better represents the dynamic nature of JavaScript, but it can make the code hard to read and understand.",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Defining getters and setters",
      "chunkIndex": 28,
      "totalChunks": 31,
      "startLineNumber": 462,
      "endLineNumber": 482
    }
  },
  {
    "content": "## Comparing objects\n\nIn JavaScript, objects are a reference type. Two distinct objects are never equal, even if they have the same properties. Only comparing the same object reference with itself yields true.\n\n```js\n// Two variables, two distinct objects with the same properties\nconst fruit = { name: \"apple\" };\nconst anotherFruit = { name: \"apple\" };\n\nfruit == anotherFruit; // return false\nfruit === anotherFruit; // return false\n```\n\n```js\n// Two variables, a single object\nconst fruit = { name: \"apple\" };\nconst anotherFruit = fruit; // Assign fruit object reference to anotherFruit\n\n// Here fruit and anotherFruit are pointing to same object\nfruit == anotherFruit; // return true\nfruit === anotherFruit; // return true\n\nfruit.name = \"grape\";\nconsole.log(anotherFruit); // { name: \"grape\" }; not { name: \"apple\" }\n```\n\nFor more information about comparison operators, see [equality operators](/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators).",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "Comparing objects",
      "chunkIndex": 29,
      "totalChunks": 31,
      "startLineNumber": 484,
      "endLineNumber": 510
    }
  },
  {
    "content": "## See also\n\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain)\n- [Classes](/en-US/docs/Web/JavaScript/Reference/Classes)\n\n{{PreviousNext(\"Web/JavaScript/Guide/Regular_expressions\", \"Web/JavaScript/Guide/Using_classes\")}}",
    "metadata": {
      "source": "working_with_objects/index.md",
      "documentSlug": "Web/JavaScript/Guide/Working_with_objects",
      "documentTitle": "Working with objects",
      "documentPageType": "guide",
      "documentSidebar": "jssidebar",
      "nearestHeading": "See also",
      "chunkIndex": 30,
      "totalChunks": 31,
      "startLineNumber": 512,
      "endLineNumber": 517
    }
  }
]